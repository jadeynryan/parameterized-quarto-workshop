{
  "hash": "3fb8a0a87d5a51ab514e4823cc9da754",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Parameterizing reports<br>![](../images/cascadia-jr-quarto.webp){width=5em}\"\nformat: revealjs\n---\n\n\n\n## Many use cases\n\n::: columns\n::: {.column width=\"25%\"}\n![](images/ocean-floor.png){.lightbox group=\"examples\"\nfig-alt=\"RStudio R Markdown parameterized report project for mapping ocean floors.\"}\n\n[Ocean floor maps](https://rmarkdown.rstudio.com/lesson-6.html)\n:::\n\n::: {.column width=\"25%\"}\n![](images/urban-institute.png){.lightbox group=\"examples\"\nfig-alt=\"Report for Alabama spending with text and plots generated from parameterized R Markdown.\"}\n\n[Fiscal\nbriefs](https://book.rwithoutstatistics.com/parameterized-reports-chapter.html)\n:::\n\n::: {.column width=\"25%\"}\n![](images/driver-quality.png){.lightbox group=\"examples\"\nfig-alt=\"Report for Alaska driver quality with text, plot, and table generated from parameterized RMarkdown.\"}\n\n[Bad\ndrivers](https://urban-institute.medium.com/iterated-fact-sheets-with-r-markdown-d685eb4eafce)\n:::\n\n::: {.column width=\"25%\"}\n![](images/soils-report-html.png){.lightbox group=\"examples\"\nfig-alt=\"HTML report for soil health survey participant, generated from a parameterized Quarto report.\"}\n\n[Soil health](https://wa-department-of-agriculture.github.io/soils/)\n:::\n:::\n\n. . .\n\n<br>\n\n**Different audiences, different reports**\n\nShow code for technical staff and hide code for everyone else ([StackOverflow\nexample](https://stackoverflow.com/questions/73571919/how-to-pass-logical-parameters-with-the-quarto-r-package-to-the-knitr-chunk-opti)).\n\n## Like a custom function\n\n::: r-stack\n![](images/template1.png){.fragment\nfig-alt=\"File with the word '.qmd' inside and the word 'Function' above.\"\nwidth=\"1300\" fig-align=\"left\" style=\"margin-top:-1em\"}\n\n![](images/template2.png){.fragment\nfig-alt=\"An arrow points from 'Input' with 'params$year' to the previous image with 'Function' and '.qmd' file.\"\nwidth=\"1300\" fig-align=\"left\" style=\"margin-top:-1em\"}\n\n![](images/template3.png){.fragment\nfig-alt=\"In addition to the previous two images, arrows point to five reports with years 2019 through 2023 on them in a flow chart.\"\nwidth=\"1300\" fig-align=\"left\" style=\"margin-top:-1em\"}\n:::\n\n## What makes a report \"parameterized\"?\n\n-   YAML header with `params` key-value pairs\n\n-   Use these `params` to create different variations of a report from a single `.qmd` document.\n\n. . .\n\n::: callout-important\n-   Valid parameter values are strings, numbers, or Boolean.\n\n-   Must serialize a dataframe to pass it as a parameter, then un-serialize it\n    back to a dataframe within the `.qmd` content.\n\n-   See [Christophe Dervieux's answer in Posit\n    Community](https://community.rstudio.com/t/param-converted-from-data-frame-to-list/155556/9)\n    to understand why.\n\n-   See [John Paul Helveston's blog\n    post](https://www.jhelvy.com/posts/2023-02-28-parameterized-pdfs-with-quarto/#passing-data-frames-as-parameters)\n    to learn how to use {jsonlite} as a workaround.\n:::\n\n## Workflow\n\n::: incremental\n1.  Write report template with default values hard-coded, and then render & review.\n\n2.  Set default `params` key-value pairs in YAML. \n\n3. Replace hard-coded values with the `params` variables.\n\n4.  Render the single report and review.\n\n5.  Render extreme cases and review.\n\n    -   Parameter values with barely any data and with tons of data.\n\n6.  Render all variations of the report at once.\n:::\n\n# üí™üèº Exercise 2 {.exercise}\n\n**Explore a report without parameters and see where we could add them.**\n\n1.  Open `2-swiss-cats.qmd`.\n\n2.  Click the\n    ![](https://quarto.org/docs/get-started/hello/images/rstudio-render-button.png){fig-alt=\"Quarto render button in RStudio\"\n    style=\"vertical-align:middle;\" width=\"49\"} **Render** button.\n\n3.  Look at the source markdown & code and the rendered report.\n\n4.  üí¨ **Discuss**: What variables could we set as parameters?\n\n    üí° **Hint**: run the `setup` chunk and look at the `pets` dataframe to see\n    what variables it has.\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_349f002d\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n## Set `params` in YAML header\n\n```{.yaml code-line-numbers=\"|2|3,4,6|7-8|11\"}\n---\ntitle: \"Swiss Cats\"             # Metadata\nformat:                         # Set format types\n  html:\n    toc: true                   # Set additional options\n  docx: default                           \nparams:                         # Set default parameter key-value pairs\n  fave_breed: \"Snowshoe\"                                \n---\n    \nReport content goes here.       # Write narrative and code\n```\n\n. . .\n\n::: callout-important\nYour default `params` key-value pairs must be found in your dataset. Otherwise, code will error or output will be blank.\n\nThe variable name for `params` can be anything you choose. Often, it's a column name in your dataset.\n:::\n\n## Access `params`\n\n\n\n\n\n\n\nRun any line or chunk to add `params` to your environment.\n\n. . .\n\n`params` object is a list.\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 1\n $ fave_breed: chr \"Snowshoe\"\n```\n\n\n:::\n:::\n\n\n\n<br>\n\n. . .\n\nAccess with `$` notation.\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Snowshoe\"\n```\n\n\n:::\n:::\n\n\n\n<br>\n\n. . .\n\nFor inline code in YAML or report content, enclose the expression in `` `r ` ``.\n\n```markdown\nMy favorite cat breed is the **`r params$fave_breed`**.\n```\n\nMy favorite cat breed is the **Snowshoe**.\n\n## Replace hard-coded values with `params`\n\n-   `Cmd`/`Ctrl` + `F` to find where to replace hard-coded values with `params`.\n\n![](images/find-replace-hard-coded-values.png){fig-alt=\"Find and replace toolbar with &quot;pet_type in the Search field highlighted by a purple box and &quot;params$pet_type in the Replace field highlighted by a blue box. The .qmd file shows a filter statement with the &quot;pet_type highlighted by RStudio as a match for the Find tool. This filter statement is highlighted by a purple box with an arrow pointing to a blue box that has the filter statement with the hard-coded &quot;cats string replaced with &quot;params$pet_type.\"}\n\n## Replace hard-coded values with `params`\n\nUse inline R code for markdown.\n\n```{.markdown}\n## My favorite breed: Snowshoe\n```\n\n<br>\n\n. . .\n\nUse `paste()` or `glue::glue()` for plot and table titles and labels.\n\n\n\n::: {.cell}\n\n:::\n\n\n\n##\n\n![](images/snowshoe-graph.png){fig-align=\"center\"}\n\n# üíÉüèª Demo {.demo}\n\nModify `2-swiss-cats.qmd` to add `pet_type` and `fave_breed` parameters.\n\n<br>\n\nThis parameterized version of `2-swiss-cats.qmd` is the starting point for the next section's exercises (`3-quarto-render.qmd`).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}