{
  "hash": "993cdb0e4530329379acf85c989fa40e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"üèÅ Summary<br>![](../images/cascadia-jr-quarto.webp){width=5em}\"\nformat: revealjs\n---\n\n\n\n## Learning objective 1\n\n**Understand what parameterized reporting is and when it is useful.**\n\n. . .\n\n**Like very fancy custom functions:**\n\n::: incremental\n\n- Function &rarr; `.qmd` template\n\n- Input &rarr; parameters\n\n- Output &rarr; rendered reports\n:::\n\n. . . \n\n**Useful for creating variations of the same report:**\n\n-   Spatial: country, state, county, or city\n\n-   Temporal: year, month or other time period\n\n-   Anything you can filter by: breeds, species, diseases, water bodies, customers, trials, etc.\n\n. . .\n\n::: callout-note\nWe only covered reports, but you can also parameterize `revealjs` presentations! See this [Jumping Rivers blog post](https://www.jumpingrivers.com/blog/r-parameterised-presentations-quarto/) about it.\n:::\n\n## Learning objective 2a\n\n**Convert a Quarto document into a parameterized template.**\n\n::: incremental\n- Include default `params:` in YAML\n    \n- Replace hard-coded values with `params$pet_type`\n\n  - **YAML**: \n  \n\n\n    ::: {.cell}\n    \n    ```{.yaml .cell-code}\n    ---\n    title: \"Report about `r params$pet_type`\"\n    params:\n      pet_type: \"cats\"\n    ---\n    ```\n    :::\n\n\n    \n  - **Inline R code**: \n  \n\n\n    ::: {.cell}\n    \n    ```{.markdown .cell-code}\n    I like **`r params$pet_type`**.\n    ```\n    :::\n\n\n    \n  - **Code chunks**: \n  \n    ``` r\n    pets |> \n        dplyr::filter(pet_type == params$pet_type)\n    ```\n:::\n\n## Learning objective 2b\n\n**Render all variations of the report at once using [{quarto}](https://quarto-dev.github.io/quarto-r/) and [{purrr}](https://purrr.tidyverse.org/).**\n\n::: {.fragment}\n1. Get all unique parameter combinations into a dataframe:\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(pet_reports, 2)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|pet_type |breed       |output_format |output_file                  |execute_params           |\n|:--------|:-----------|:-------------|:----------------------------|:------------------------|\n|cats     |Abyssiniane |html          |cats-abyssiniane-report.html |cats       , Abyssiniane |\n|cats     |Aegean Cat  |html          |cats-aegean-cat-report.html  |cats      , Aegean Cat   |\n\n</div>\n:::\n:::\n\n\n\n:::\n\n::: {.fragment}\n2. Use dataframe in `pwalk()` with `quarto_render()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npurrr::pwalk(\n  pet_reports,\n  quarto::quarto_render,\n  input = here::here(\"pet_template.qmd\"),\n  .progress = TRUE\n)\n```\n:::\n\n\n:::\n\n## Learning objective 3a\n\n**Generate multiple format outputs from the same .qmd using [conditional content]{style=\"font-size:larger;text-decoration: underline;\"}.**\n\nCreate a div, span, or non-executable code block with one option from each of the below columns:\n\n:::: {.columns}\n\n::: {.column width=\"30%\"}\n**Class**\n\n- `.content-visible`\n- `.content-hidden`\n:::\n\n::: {.column width=\"30%\"}\n**Attribute**\n\n- `when-format=\"___\"`\n- `unless-format=\"___\"`\n:::\n\n::: {.column width=\"30%\"}\n**Format**\n\n- `latex` or `pdf`\n- `epub`\n- `html` or `revealjs`\n- `markdown`\n:::\n::::\n\n:::: {.fragment style=\"margin-top:-2em\"}\n\n**Example to show tabset only for HTML reports:**\n\n```markdown\n:::: {.content-visible when-format=\"html\"}\n::: panel-tabset\n{{{< include _4-report-content.qmd >}}}\n:::\n::::\n```\n::::\n\n## Learning objective 3b\n\n**Generate multiple format outputs from the same .qmd using [conditional code execution]{style=\"font-size:larger;text-decoration: underline;\"}**.\n\n::: panel-tabset\n\n## Conditional on output\n\n1. Get the Pandoc output format.\n\n```r\n#| label: setup\n\nformat <- knitr::opts_knit$get(\"rmarkdown.pandoc.to\")\n```\n\n2. Use `format` in the `eval: !expr` chunk option.\n\n```r\n#| label: interactive-plot\n#| eval: !expr format == \"html\"\n\n# plotly code\n```\n\n## Conditional on parameter\n\nUse `params` in the `eval: !expr` chunk option.\n\n```r\n#| eval: !expr params$fave_breed == \"Snowshoe\"\n\n# Code for a special plot for my favorite cat breed.\n```\n:::\n\n## Learning objective 3c\n\n**Generate multiple format outputs from the same .qmd using [custom styling]{style=\"font-size:larger;text-decoration: underline;\"}.**\n\n::: panel-tabset\n\n## HTML: Bootswatch & SCSS file\n\n1. Pick a [Bootswatch](https://bootswatch.com/) theme.\n\n2. Customize with a `.scss` file.\n\n3. Use browser developer tools to find/test more styling.\n\n``` yaml\nformat:\n  html:\n    theme: [flatly, theme.scss]\n```\n\n## MS Word: reference doc\n\n1. Create the reference doc.\n\n```{.bash filename=\"Terminal\"}\nquarto pandoc -o word-template.docx --print-default-data-file reference.docx\n```\n\n2. Open `word-template.docx` and modify the styles.\n\n3. Set this template in the YAML under the `reference-doc:` key:\n\n```yaml\nformat:\n  docx:\n    reference-doc: word-template.docx\n```\n:::\n\n## Thank you!\n\n::: columns\n::: {.column width=\"65%\"}\nüè° **Home for all workshop materials**:\n[jadeyryan.quarto.pub/cascadia-quarto/](https://jadeyryan.quarto.pub/cascadia-quarto/)\n\n\\\n\nüé• **Recordings from previous workshops & talks**:  \n[links in GitHub repo](https://github.com/jadeynryan/parameterized-quarto-workshop?tab=readme-ov-file#workshops) or [my YouTube playlist](https://youtube.com/playlist?list=PLzjGoNexcyYaDUVCg4MQDtMXLl2F5HE3B&si=-y0jQfCYyRAQjI1B)\n\n![](images/mts.jpg){width=\"600\"\nfig-alt=\"From left to right, Mai, Tai, and Skye. Three snowshoe cats cuddling in their warming beds.\"\nstyle=\"border-radius:1em\"}\n:::\n\n::: {.column width=\"35%\"}\n**Let's stay connected!**\n\n{{< fa link size=xl >}} [jadeyryan.com](https://jadeyryan.com)\n\n{{< fa brands mastodon size=xl >}} [\\@jadeynryan](https://fosstodon.org/@jadeynryan)\n\n{{< fa brands linkedin size=xl >}} [linkedin.com/in/jadey-ryan](https://www.linkedin.com/in/jadey-ryan)\n\n{{< fa brands github size=xl >}} [jadeynryan](https://github.com/jadeynryan/)\n\n{{< fa brands etsy size=xl >}} [thecodingcats.etsy.com](https://thecodingcats.etsy.com/)\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}