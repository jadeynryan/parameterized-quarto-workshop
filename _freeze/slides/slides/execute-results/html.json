{
  "hash": "858a3ed0dd1317b65e2197d32a6626f4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Intermediate Quarto:<br>Parameterized Reporting<br> ![](images/cascadia-jr-quarto.webp){width=5em}\"\nauthor: \"Jadey Ryan // June 21, 2024<br>Cascadia R Conf\"\nfooter: \"Intermediate Quarto // [jadeyryan.quarto.pub/cascadia-quarto/](https://jadeyryan.quarto.pub/cascadia-quarto/)\"\nlogo: \"images/cascadia-jr-quarto.webp\"\nlogo-alt: \"Cascadia R Conf hex sticker on top of JR's cat hex logo joined by a heart with the Quarto hex sticker.\"\nformat: \n  revealjs: \n    width: 1600\n    height: 900  \n    theme: slides.scss\n    highlight-style: a11y\n    transition: fade\n    slide-number: true\nexecute:\n  echo: true\ndf-print: kable\n---\n## While you wait for us to begin...\n\n1. Open the course website: [jadeyryan.quarto.pub/cascadia-quarto](https://jadeyryan.quarto.pub/cascadia-quarto).\n\n2. Get the exercises/packages via Posit Cloud or by downloading to your computer:\n\n**Option 1: Posit Cloud** (requires an account)\n\n[posit.cloud/spaces/504211/content/8093007](https://posit.cloud/spaces/504211/content/8093007)\n\n**Option 2: Download to your computer & install packages**\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_course(\n  \"https://github.com/jadeynryan/parameterized-quarto-workshop/raw/cascadia/exercises/cascadia-quarto-exercises.zip\"\n#  ,destdir = \"___\"\n  )\n\ninstall.packages(c(\"dplyr\", \"fs\", \"ggplot2\", \"here\", \"janitor\", \"knitr\", \n                   \"lubridate\", \"plotly\", \"purrr\", \"quarto\", \"readr\", \n                   \"rmarkdown\", \"stringr\", \"tidyr\"))\n```\n:::\n\nIf `use_course()` didn't work, manually download the zip file from GitHub: [github.com/jadeynryan/parameterized-quarto-workshop/tree/cascadia/exercises](https://github.com/jadeynryan/parameterized-quarto-workshop/tree/cascadia/exercises).\n\n## Acknowledgements\n\n![](images/cascadia-logo.png){.center fig-alt=\"Cascadia R Conf logo\" height=350px}\n\n\\\n\n**Workshop structure adapted from:**\n\n[R/Medicine Data Cleaning 2023\nWorkshop](https://shannonpileggi.github.io/rmedicine-data-cleaning-2023/) taught\nby [Crystal Lewis](https://cghlewis.com/), [Shannon\nPileggi](https://www.pipinghotdata.com/), and [Peter\nHiggins](https://bookdown.org/pdr_higgins/rmrwr/)\n\n\\\n\n[ASA Traveling Courses on\nQuarto](https://quarto.org/docs/blog/posts/2023-12-05-asa-traveling-courses/)\ntaught by [Mine √áetinkaya-Rundel](https://mine-cr.com/) and [Andrew\nBray](https://andrewpbray.github.io/)\n\n## Code of Conduct\n\nPlease review and abide by: [cascadiarconf.com/policies/](https://cascadiarconf.com/policies/)\n\n\\\n\nüíô Treat everyone with respect and kindness.\n\n\\\n\nü©µ Everyone should feel welcome and safe.\n\n## Disclaimer and license\n\nOpinions expressed are solely my own and do not express the views of my employer\nor any organizations I am associated with.\n\n<br>\n\nThis work is licensed under [Creative Commons\nAttribution-NonCommercial-ShareAlike 4.0 International (CC\nBY-NC-SA)](https://creativecommons.org/licenses/by-nc-sa/4.0/).\n\n{{< fa brands creative-commons size=2x >}} {{< fa brands creative-commons-by size=2x >}} {{< fa brands creative-commons-nc size=2x >}} {{< fa brands creative-commons-sa size=2x >}}\n\n## Meet Jadey Ryan\n\n::: columns\n::: {.column width=\"44%\"}\nData scientist at WA Dept of Agriculture\n\nThe Coding Cats: cat & code themed merch\n\n{{< fa link size=xl >}} [jadeyryan.com](https://jadeyryan.com)\n\n{{< fa brands mastodon size=xl >}} [\\@jadeynryan](https://fosstodon.org/@jadeynryan)\n\n{{< fa brands linkedin size=xl >}} [linkedin.com/in/jadey-ryan](https://www.linkedin.com/in/jadey-ryan)\n\n{{< fa brands github size=xl >}} [jadeynryan](https://github.com/jadeynryan/)\n\n{{< fa brands etsy size=xl >}} [thecodingcats.etsy.com](https://thecodingcats.etsy.com/)\n\n![](images/mts.webp){fig-alt=\"Three snowshoe siamese cats in loaf mode. From left to right: Tai, Mai, and Skye\" style=\"border-radius:1em;margin-top:auto\"}\n:::\n\n::: {.column width=\"28%\"}\n![](images/bulk-density.jpg){fig-alt=\"Jadey collecting a bulk density soil sample in a field of wheat stubble.\" style=\"border-radius:1em;margin-top:auto\"}\n:::\n\n::: {.column width=\"28%\"}\n::: {layout-nrow=\"2\"}\n![](images/soil-sampling.jpg){style=\"border-radius:1em;margin-top:auto\"\nfig-alt=\"Jadey standing in a field of wheat stubble holding a 3 foot long soil sampling probe over her shoulder.\"}\n\n![](images/rangeland.jpg){fig-alt=\"Jadey standing in a grazed wildflower meadow with two colleagues collecting soil samples.\"\nstyle=\"border-radius:1em;margin-top:auto\"}\n:::\n\n{{< fa camera title=\"Photo credit\" >}} [@leslie.mmichel](https://twitter.com/leslie_mmichel)\n:::\n:::\n\n## Meet our TA: Lydia Gibson\n\n![](images/lydia-gibson.jpeg){.center fig-alt=\"Photo of Lydia Gibson\"}\n\n## Learning objectives\n\n::: incremental\n-   Understand what parameterized reporting is and when it is useful.\n-   Convert a Quarto document into a parameterized template and render\n    all variations.\n-   Generate multiple format outputs from the same template using\n    conditional content, conditional code execution, and custom styling.\n:::\n\n## Schedule\n\n| Time        | Topic                                |\n|-------------|--------------------------------------|\n| 1:30 - 2:00 | Welcome & Parameters                 |\n| 2:00 - 3:00 | Rendering                            |\n| 3:00 - 3:30 | Break                                |\n| 3:30 - 4:00 | Conditional content & code           |\n| 4:00 - 4:20 | Styling                              |\n| 4:20 - 4:30 | Summary                              |\n\n## Workshop structure\n\nPresentation\n\nüíÉüèª Demos\n\nüí™üèª Exercises\n\n\\\n\n. . . \n\nLet us know how you're doing by displaying your stickies!\n\nüü© I'm all good; I'm done.\n\nüüß I'm a little lost; I could use some help.\n\n# üí™üèº Exercise 0 {.exercise}\n\n**Meet your neighbors**: \n\n-   Your name\n\n-   Your favorite snack üçéüßÄüç¶üç´üçø\n\n-   What kinds of reports are you wanting to create after today's workshop?\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_973b6c90\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n# Parameterized reports {.section}\n\n## Many use cases\n\n::: columns\n::: {.column width=\"25%\"}\n![](images/ocean-floor.png){.lightbox group=\"examples\"\nfig-alt=\"RStudio R Markdown parameterized report project for mapping ocean floors.\"}\n\n[Ocean floor maps](https://rmarkdown.rstudio.com/lesson-6.html)\n:::\n\n::: {.column width=\"25%\"}\n![](images/urban-institute.png){.lightbox group=\"examples\"\nfig-alt=\"Report for Alabama spending with text and plots generated from parameterized R Markdown.\"}\n\n[Fiscal\nbriefs](https://book.rwithoutstatistics.com/parameterized-reports-chapter.html)\n:::\n\n::: {.column width=\"25%\"}\n![](images/driver-quality.png){.lightbox group=\"examples\"\nfig-alt=\"Report for Alaska driver quality with text, plot, and table generated from parameterized RMarkdown.\"}\n\n[Bad\ndrivers](https://urban-institute.medium.com/iterated-fact-sheets-with-r-markdown-d685eb4eafce)\n:::\n\n::: {.column width=\"25%\"}\n![](images/soils-report-html.png){.lightbox group=\"examples\"\nfig-alt=\"HTML report for soil health survey participant, generated from a parameterized Quarto report.\"}\n\n[Soil health](https://wa-department-of-agriculture.github.io/soils/)\n:::\n:::\n\n. . .\n\n<br>\n\n**Different audiences, different reports**\n\nShow code for technical staff and hide code for everyone else ([StackOverflow\nexample](https://stackoverflow.com/questions/73571919/how-to-pass-logical-parameters-with-the-quarto-r-package-to-the-knitr-chunk-opti)).\n\n## Like a custom function\n\n::: r-stack\n![](images/template1.png){.fragment\nfig-alt=\"File with the word '.qmd' inside and the word 'Function' above.\"\nwidth=\"1300\" fig-align=\"left\" style=\"margin-top:-1em\"}\n\n![](images/template2.png){.fragment\nfig-alt=\"An arrow points from 'Input' with 'params$year' to the previous image with 'Function' and '.qmd' file.\"\nwidth=\"1300\" fig-align=\"left\" style=\"margin-top:-1em\"}\n\n![](images/template3.png){.fragment\nfig-alt=\"In addition to the previous two images, arrows point to five reports with years 2019 through 2023 on them in a flow chart.\"\nwidth=\"1300\" fig-align=\"left\" style=\"margin-top:-1em\"}\n:::\n\n## What makes a report \"parameterized\"?\n\n-   YAML header with `params` key-value pairs\n\n-   Use these `params` to create different variations of a report from a single `.qmd` document.\n\n. . .\n\n::: callout-important\n-   Valid parameter values are strings, numbers, or Boolean.\n\n-   Must serialize a dataframe to pass it as a parameter, then un-serialize it\n    back to a dataframe within the `.qmd` content.\n\n-   See [Christophe Dervieux's answer in Posit\n    Community](https://community.rstudio.com/t/param-converted-from-data-frame-to-list/155556/9)\n    to understand why.\n\n-   See [John Paul Helveston's blog\n    post](https://www.jhelvy.com/posts/2023-02-28-parameterized-pdfs-with-quarto/#passing-data-frames-as-parameters)\n    to learn how to use {jsonlite} as a workaround.\n:::\n\n## Workflow\n\n::: incremental\n1.  Write report template with default values hard-coded, and then render & review.\n\n2.  Set default `params` key-value pairs in YAML. \n\n3. Replace hard-coded values with the `params` variables.\n\n4.  Render the single report and review.\n\n5.  Render extreme cases and review.\n\n    -   Parameter values with barely any data and with tons of data.\n\n6.  Render all variations of the report at once.\n:::\n\n# üí™üèº Exercise 2 {.exercise}\n\n**Explore a report without parameters and see where we could add them.**\n\n1.  Open `2-swiss-cats.qmd`.\n\n2.  Click the\n    ![](https://quarto.org/docs/get-started/hello/images/rstudio-render-button.png){fig-alt=\"Quarto render button in RStudio\"\n    style=\"vertical-align:middle;\" width=\"49\"} **Render** button.\n\n3.  Look at the source markdown & code and the rendered report.\n\n4.  üí¨ **Discuss**: What variables could we set as parameters?\n\n    üí° **Hint**: run the `setup` chunk and look at the `pets` dataframe to see\n    what variables it has.\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_66eb85b8\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n## Set `params` in YAML header\n\n```{.yaml code-line-numbers=\"|2|3,4,6|7-8|11\"}\n---\ntitle: \"Swiss Cats\"             # Metadata\nformat:                         # Set format types\n  html:\n    toc: true                   # Set additional options\n  docx: default                           \nparams:                         # Set default parameter key-value pairs\n  fave_breed: \"Snowshoe\"                                \n---\n    \nReport content goes here.       # Write narrative and code\n```\n\n. . .\n\n::: callout-important\nYour default `params` key-value pairs must be found in your dataset. Otherwise, code will error or output will be blank.\n\nThe variable name for `params` can be anything you choose. Often, it's a column name in your dataset.\n:::\n\n## Access `params`\n\n\n\nRun any line or chunk to add `params` to your environment.\n\n. . .\n\n`params` object is a list.\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(params)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 1\n $ fave_breed: chr \"Snowshoe\"\n```\n\n\n:::\n:::\n\n<br>\n\n. . .\n\nAccess with `$` notation.\n\n::: {.cell}\n\n```{.r .cell-code}\nparams$fave_breed\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Snowshoe\"\n```\n\n\n:::\n:::\n\n<br>\n\n. . .\n\nFor inline code in YAML or report content, enclose the expression in `` `r ` ``.\n\n::: {.cell}\n\n```{.markdown .cell-code}\nMy favorite cat breed is the **`r params$fave_breed`**.\n```\n:::\n\nMy favorite cat breed is the **Snowshoe**.\n\n## Replace hard-coded values with `params`\n\n-   `Cmd`/`Ctrl` + `F` to find where to replace hard-coded values with `params`.\n\n![](images/find-replace-hard-coded-values.png){fig-alt=\"Find and replace toolbar with &quot;pet_type in the Search field highlighted by a purple box and &quot;params$pet_type in the Replace field highlighted by a blue box. The .qmd file shows a filter statement with the &quot;pet_type highlighted by RStudio as a match for the Find tool. This filter statement is highlighted by a purple box with an arrow pointing to a blue box that has the filter statement with the hard-coded &quot;cats string replaced with &quot;params$pet_type.\"}\n\n## Replace hard-coded values with `params`\n\nUse inline R code for markdown.\n\n::: {.cell}\n\n```{.markdown .cell-code}\n## My favorite breed: `r params$fave_breed`\n```\n:::\n\n<br>\n\n. . .\n\nUse `paste()` or `glue::glue()` for plot and table titles and labels.\n\n::: {.cell}\n\n```{.r .cell-code}\n# ggplot code +\nlabs(title = paste(params$fave_breed, \"population\"))\n\n# OR\n\n# ggplot code +\nlabs(title = glue::glue(\"{params$fave_breed} population\"))\n```\n:::\n\n##\n\n![](images/snowshoe-graph.png){fig-align=\"center\"}\n\n# üíÉüèª Demo {.demo}\n\nModify `2-swiss-cats.qmd` to add `pet_type` and `fave_breed` parameters.\n\n<br>\n\nThis parameterized version of `2-swiss-cats.qmd` is the starting point for the next section's exercises (`3-quarto-render.qmd`).\n\n# Rendering many reports {.section}\n\n## Review three ways to render\n\n::: incremental\n1. **RStudio/Quarto integration**:\n\n    ![](https://quarto.org/docs/get-started/hello/images/rstudio-render-button.png){fig-alt=\"Quarto render button in RStudio\" style=\"vertical-align:middle;\" width=\"49\"} **Render** button in RStudio or `Cmd`/`Ctrl` + `Shift` + `K` keyboard shortcut\n\n2. ‚ú® **Quarto R package** ‚ú®\n\n    ```{.r filename=\"Console or R script\"}\n    quarto::quarto_render(\n      input = here::here(\"3-quarto-render.qmd\"),   # Input Quarto file\n      execute_params = list(                       # Named list of params\n        pet_type = \"cats\",\n        fave_breed = \"Snowshoe\"))\n    ```\n\n3. **Quarto CLI**\n\n    ```{.bash filename=\"Terminal\"}\n    quarto render 3-quarto-render.qmd -P pet_type:'cats' -P fave_breed:'Snowshoe'\n    ```\n\n:::\n\n# üí™üèº Exercise 3-1 {.exercise}\n\n**Change parameters in the YAML and render using ![](https://quarto.org/docs/get-started/hello/images/rstudio-render-button.png){fig-alt=\"Quarto render button in RStudio\" style=\"vertical-align:middle;\" width=\"49\"} Render button.**\n\n1. Look at the unique pet breeds and pick your favorite.\n   ```{.r}\n   # Run in Console\n   pets <- readr::read_rds(here::here(\"data\", \"pets.RDS\")) |> \n      dplyr::distinct(pet_type, breed) |> View()\n   ```\n   \n2. In `3-quarto-render.qmd` Change the default parameters in the YAML to your favorite pet type and breed. Render using the ![](https://quarto.org/docs/get-started/hello/images/rstudio-render-button.png){fig-alt=\"Quarto render button in RStudio\" style=\"vertical-align:middle;\" width=\"49\"} **Render** button.\n\n    ```yaml\n    params:\n      pet_type: \"___\"\n      fave_breed: \"___\"\n    ```\n\n3. üí¨ **Discuss**: Which breed did you pick and why? What do you think will happen if you set the `pet_type` default parameter to \"cats\" and the `fave_breed` parameter to \"American Bulldog\"? \n\nTry it out! \n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_94fd9c28\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">07</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n# üí™üèº Exercise 3-2 {.exercise}\n\n**Change parameters and render using `quarto_render()`.**\n\n1. Render with `quarto::quarto_render()`.\n\n   ```r\n   # Run in the console\n    quarto::quarto_render(\n      input = here::here(\"3-quarto-render.qmd\"),\n      execute_params = list(\n        pet_type = \"___\",\n        fave_breed = \"___\"))\n   ```\n\n2. üí¨ **Discuss**: What kinds of variables will you use as parameters for your reports? \n\n‚è±**10-min break after this exercise**\n   \n   \n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_a73a227d\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">07</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n# üö∂üèª‚Äç‚ôÄ Break üßòüèª‚Äç‚ôÄÔ∏è {.section}\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_d6f3c830\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n## Render all 538 reports \n\nOne HTML report for each cat breed and each dog breed.\n\n:::: panel-tabset\n\n## üìä Data\n\n::: {.cell}\n\n```{.r .cell-code}\npets <- readr::read_rds(here::here(\"data\", \"pets.RDS\"))\n\npets |>\n  dplyr::distinct(pet_type, breed) |>\n  dplyr::count(pet_type) |>\n  janitor::adorn_totals()\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|pet_type |   n|\n|:--------|---:|\n|cats     | 104|\n|dogs     | 434|\n|Total    | 538|\n\n</div>\n:::\n:::\n\n## üë∑üèº‚Äç‚ôÇÔ∏è Manual 1\n\n1. Change the default `params` in the YAML.\n\n2. **Render** button or `Cmd`/`Ctrl` + `Shift` + `K` keyboard shortcut.\n\n3. Rename the rendered report to include the parameter & prevent overwriting.\n\n4. Repeat 537 times.\n\nüò≠\n\n## üë∑üèª‚Äç‚ôÄÔ∏è Manual 2\n\n::: {.cell}\n\n```{.r .cell-code}\nquarto::quarto_render(\n  input = here::here(\"3-quarto-render.qmd\"),\n  output_file = \"dogs-affenpinscher-report.html\",\n  execute_params = list(\n    pet_type = \"dogs\",\n    fave_breed = \"Affenpinscher\"))\n\nquarto::quarto_render(\n  input = here::here(\"3-quarto-render.qmd\"),\n  output_file = \"dogs-afghan-hound-report.html\",\n  execute_params = list(\n    pet_type = \"dogs\",\n    fave_breed = \"Afghan Hound\"))\n\nquarto::quarto_render(\n  input = here::here(\"3-quarto-render.qmd\"),\n  output_file = \"dogs-aidi-chien-de-montagne-de-l-atlas-report.html\",\n  execute_params = list(\n    pet_type = \"dogs\",\n    fave_breed = \"Aidi Chien De Montagne De L Atlas\"))\n\nquarto::quarto_render(\n  input = here::here(\"3-quarto-render.qmd\"),\n  output_file = \"dogs-akita-report.html\",\n  execute_params = list(\n    pet_type = \"dogs\",\n    fave_breed = \"Akita\"))\n\n# + 534 more times... \n# üò≠\n```\n:::\n\n## ‚ö° Programatically\n\n**Create a dataframe with three columns that match `quarto_render()` args:**\n\n- `output_format`: file type (html, revealjs, pdf, docx, etc.)\n\n- `output_file`: file name with extension\n\n- `execute_params`: named list of parameters\n\n**Map over each row:**\n\n- `purrr::pwalk(dataframe, quarto_render, <arguments for quarto_render>)` üòé\n::::\n\n## `purrr` map functions for iteration\n\n:::: {.columns}\n\n::: {.column width=\"60%\"}\n**Map functions** apply the same action/function to each element of an object.\n\n-   Base R `apply()` functions are map functions.\n\n-   `purrr` map functions have consistent syntax and the output data type is predictable.\n\n`for loops` &rarr; `lapply()` &rarr; `purrr::map()`\n:::\n\n::: {.column width=\"40%\"}\n![](https://purrr.tidyverse.org/logo.png){fig-alt=\"purrr R package logo\"}\n:::\n::::\n\n. . .\n\n**Learn more**:\n\n- [Iteration chapter of *R for Data Science*](https://r4ds.had.co.nz/iteration.html)\n\n- R-Ladies Baltimore presentation [*Make your R Code purr with `purrr`*](https://www.youtube.com/watch?v=IewsPpjKElc)\n\n- Jenny Bryan's [tutorial](https://jennybc.github.io/purrr-tutorial/) and [workshop](https://github.com/jennybc/row-oriented-workflows)\n\n## Create dataframe to iterate over\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2|4|5-9|11-14|\"}\npet_reports <- pets |>\n  dplyr::distinct(pet_type, breed) |>   # Get distinct pet/breed combos\n  dplyr::mutate(\n    output_format = \"html\",             # Make output_format column\n    output_file = paste(                # Make output_file column:\n      tolower(pet_type),                # cats-abyssiniane-report.html\n      tolower(gsub(\" \", \"-\", breed)),           \n      \"report.html\",\n      sep = \"-\"\n    ),\n    execute_params = purrr::map2(       # Make execute_params column\n      pet_type,\n      breed,\n      \\(pet_type, breed) list(pet_type = pet_type, breed = breed)))\n```\n:::\n        \n## Subset to first 2 cat/dog breeds\n\n::: {.cell}\n\n```{.r .cell-code}\npet_reports_subset <- pet_reports |>\n  dplyr::slice_head(n = 2, by = pet_type) |>\n  dplyr::select(output_file, execute_params)\n\npet_reports_subset\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|output_file                    |execute_params               |\n|:------------------------------|:----------------------------|\n|cats-abyssiniane-report.html   |cats       , Abyssiniane     |\n|cats-aegean-cat-report.html    |cats      , Aegean Cat       |\n|dogs-affenpinscher-report.html |dogs         , Affenpinscher |\n|dogs-afghan-hound-report.html  |dogs        , Afghan Hound   |\n\n</div>\n:::\n:::\n\n## Map over each row \n\n::: incremental\n-   `purrr::pwalk()` iterates over multiple arguments simultaneously.\n\n-   First `.l` argument is a *list of vectors*. \n\n    - Dataframe is a special case of `.l` that iterates over rows.\n:::\n. . .\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2|3|4|5|\"}\npurrr::pwalk(\n  .l = pet_reports_subset,                      # Dataframe to map over\n  .f = quarto::quarto_render,                   # Function we are applying to each row\n  input = here::here(\"3-quarto-render.qmd\"),    # Named arguments of .f\n  .progress = TRUE                              # Show a progress bar :)\n)\n```\n:::\n\n. . .\n\n::: callout-note\n`index` is the only named argument of `quarto_render()` included in `pwalk()`.\n\n\n`output_format`, `output_file`, and `execute_params` are already passed in through the dataframe.\n:::\n\n# Multiple formats {.section}\n\n## Render all reports to all formats\n\nAdd to the `format:` YAML option to render additional output formats from the same `.qmd` file.\n\n``` yaml\n---\nformat:\n  html: \n    embed-resources: true   # Makes the report self-contained\n  pdf: default              # If not using any additional format options,\n  docx: default             # set value to `default`  \n---\n```\n\n. . .\n\n**Note**: the Render button now has a dropdown!\n\n![](images/render-button.png){width=60% fig-alt=\"Screenshot of Quarto file with the Render dropdown showing options for HTML, PDF, and MS Word formats.\"}\n\n[Quarto docs on multiple formats](https://quarto.org/docs/get-started/authoring/rstudio.html#multiple-formats)\n\n## Format links for HTML output\n\nLinks to download the other formats will automatically appear in HTML documents.\n\n![](images/other-formats.png){fig-alt=\"Screenshot of a HTML page that includes links to the PDF and MS Word formats in the table of contents under the heading Other Formats.\" style=\"border-radius:1em\"}\n\n## Format link options\n\n**Choose which format links to include:**\n\n::: {.cell}\n\n```{.yaml .cell-code  code-line-numbers=\"7\"}\n---\nformat:\n  html: \n    embed-resources: true\n  pdf: default\n  docx: default\nformat-links: [pdf]\n---\n```\n:::\n\n. . .\n\n**Or hide all links:**\n\n::: {.cell}\n\n```{.yaml .cell-code  code-line-numbers=\"7\"}\n---\nformat:\n  html: \n    embed-resources: true\n  pdf: default\n  docx: default\nformat-links: false\n---\n```\n:::\n\n# üíÉüèª Demo {.demo}\n\nDemo programmatically rendering all reports in all formats in `4-demo-quarto-render-purrr.qmd` and `4-demo-quarto-render-purrr.R`.\n\n## ‚ö† Watch out!\n\n::: incremental\n\n-   Can't render reports to another directory.\n\n    - [`output-dir` YAML option](https://quarto.org/docs/books/book-output.html#output-path) only works for *Quarto projects* that contain a `_quarto.yml` config file.\n\n    - **Workaround**: use [`{fs}`](https://fs.r-lib.org/) to move files after rendering. \n      \n      See `demo-quarto-render-purrr.R` for example.\n    \n    - **More info**: [GitHub discussion](https://github.com/quarto-dev/quarto-cli/discussions/2171#discussioncomment-4865286) and [GitHub issue](https://github.com/quarto-dev/quarto-r/issues/81).\n\n<br>\n\n- If using `embed-resources: true` YAML option, `.qmd` can't be in subfolder, otherwise: \n\n    - [[WARNING] Could not fetch resource ...]{.warning}\n\n    - **More info**: [GitHub discussion](https://github.com/quarto-dev/quarto-cli/discussions/4041#discussioncomment-6052000) and [GitHub issue](https://github.com/quarto-dev/quarto-cli/issues/5765).\n:::\n\n---\nexecute:\n  eval: false\n---\n\n<!-- # Conditional content {.section} -->\n\n<!-- ## Control content visibility -->\n\n<!-- Special `.content-visible` and `.content-hidden` classes with `when-format=\"___\"` and `unless-format=\"___\"` attributes can be applied to: -->\n\n<!-- ::: panel-tabset -->\n\n<!-- ## Divs -->\n\n<!-- ```markdown -->\n<!-- ::: {.content-visible when-format=\"html\"} -->\n\n<!-- Will only appear in HTML. -->\n\n<!-- ::: -->\n<!-- ``` -->\n\n<!-- ## Spans -->\n\n<!-- ``` markdown -->\n<!-- Some text -->\n<!-- [in HTML.]{.content-visible when-format=\"html\"} -->\n<!-- [in PDF.]{.content-visible when-format=\"pdf\"} -->\n<!-- ``` -->\n\n<!-- ## Non-executable code -->\n\n<!-- Fenced code blocks purely for documentation. -->\n\n<!-- ````markdown -->\n<!-- ```{.python .content-visible when-format=\"html\"} -->\n<!-- # code shown only in HTML -->\n<!-- 2 + 2 -->\n<!-- ``` -->\n<!-- ```` -->\n\n<!-- ::: -->\n\n<!-- ::: footer -->\n<!-- Examples from [Conditional Content Quarto docs](https://quarto.org/docs/authoring/conditional.html) -->\n<!-- ::: -->\n\n<!-- ## Useful for static/interactive features -->\n\n<!-- Pairs well with `{{< include >}}` shortcodes to re-use content without copying/pasting. -->\n\n<!-- . . . -->\n\n<!-- ::::: panel-tabset -->\n\n<!-- ## Static -->\n\n<!-- ```markdown -->\n<!-- :::: {.content-visible unless-format=\"html\"} -->\n\n<!-- ## Cats -->\n\n<!-- {{{< include _cats.qmd >}}} -->\n\n<!-- ## Dogs -->\n\n<!-- {{{< include _dogs.qmd >}}} -->\n\n<!-- :::: -->\n<!-- ``` -->\n\n<!-- ## Interactive -->\n\n<!-- ```markdown -->\n<!-- :::: {.content-visible when-format=\"html\"} -->\n<!-- ::: panel-tabset -->\n\n<!-- ## Cats -->\n\n<!-- {{{< include _cats.qmd >}}} -->\n\n<!-- ## Dogs -->\n\n<!-- {{{< include _dogs.qmd >}}} -->\n\n<!-- ::: -->\n<!-- :::: -->\n<!-- ``` -->\n<!-- ::::: -->\n\n<!-- . . . -->\n\n<!-- Use an underscore prefix for included files so they are automatically ignored by a Quarto render of a project ([Includes Quarto Docs](https://quarto.org/docs/authoring/includes.html)). -->\n\n<!-- # üí™üèº Exercise 4 {.exercise} -->\n\n<!-- **Use conditional content divs to control when tabsets are shown.** -->\n\n<!-- 1. Modify `ex-4-conditional-content.qmd` so that the `panel-tabset` is visible for HTML reports and hidden for all other formats. -->\n\n<!-- <br> -->\n\n<!-- 2. Explore the other options. There are multiple ways to get the same result. -->\n\n<!--     {.content-visible when-format=\"html\"} == {.content-hidden unless-format=\"html\"} -->\n\n<!-- <br> -->\n\n<!-- 3. üí¨ **Chat**: what other kinds of content might you want to make visible for only a certain format? -->\n\n<!-- ```{r} -->\n<!-- #| echo: false -->\n<!-- countdown::countdown(minutes = 5, top = 0) -->\n<!-- ``` -->\n\n# Conditional code execution {.section}\n\n## Conditionally execute a code chunk\n\n::: incremental\n\n-   More efficient to not execute code that generates interactive outputs for static reports.\n\n-   Useful for executing interactive plot code (e.g., `plotly` or `ggiraph`) for HTML reports and static `ggplot2` code for all other formats. \n\n-   Useful for executing different code based on a parameter value.\n\n-   Not currently a feature of Quarto v1.4. Follow along with this [GitHub discussion](https://github.com/quarto-dev/quarto-cli/discussions/3260#discussioncomment-4573926).\n\n-   Chunk options can use R code for option values with `!expr`. Learn about the limitations to this YAML \"tag\" literal syntax in the [Quarto Chunk Options reference](https://quarto.org/docs/computations/r.html#chunk-options).\n\n:::\n\n## Conditional code based on output\n\nInclude in the setup chunk of your `.qmd` file.\n\nGet the format of the Pandoc output:\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: setup\n\n# Get output format\nformat <- knitr::opts_knit$get(\"rmarkdown.pandoc.to\")\n```\n````\n:::\n\n## Use `eval: !expr` chunk option\n\n::: panel-tabset\n\n## Static plot\n\n```markdown\n#| echo: fenced\n#| eval: !expr format %in% c(\"latex\", \"docx\")\n\n# code to create static {ggplot2}\n```\n\nüí° Pandoc uses LaTeX to create PDFs.\n\n## Interactive plot\n\n```markdown\n#| echo: fenced\n#| eval: !expr format == \"html\"\n\n# code to create interactive {plotly}\n```\n\n:::\n\n# üí™üèº Exercise 5 {.exercise}\n\n<br>\n\n**Conditionally execute `ggplot2` code for static reports & `plotly` code for interactive reports.**\n\n1. Open `ex-5-conditional-code.qmd`.\n\n2. Fill in the blanks for the `eval: ` option for `ggplot` code chunks and `plotly` code chunks.\n\n3. üí¨ **Discuss**: How would you change the `eval: ` option to execute a chunk based on a parameter value rather than the output format?\n\n::: {.cell}\n\n```{.r .cell-code}\n# Options are html, latex, and docx.\n\n#| eval: !expr format == \"___\"\n\n#| eval: !expr format %in% c(\"___\", \"___\")\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_1f84454c\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n## Conditional code based on parameter\n\nUse `params` in `!expr`:\n\n``` r\n#| eval: !expr params$fave_breed == \"Snowshoe\"\n\n# Code for a special plot for my favorite cat breed.\n```\n\n<br>\n\n. . .\n\n``` r\n#| eval: !expr !params$fave_breed == \"Snowshoe\"\n\n# Code for a different plot for all other breeds.\n# Note the ! in front of params.\n```\n\n<br>\n\n. . .\n\n::: callout-tip\n## Community project: home energy monitoring\nConsider using a different conditional code chunk to create different visualizations depending on heating source.\n:::\n\n# üèÅ Recap {.section}\n\n## Learning objective 1\n\n**Learn what Quarto is and what you can use it for.**\n\n::: columns\n::: {.column width=\"50%\"}\nScientific and technical publishing system for:\n\n-   interactive [HTML\n    reports](https://quarto.org/docs/output-formats/html-basics.html)\n-   static [MS Word](https://quarto.org/docs/output-formats/ms-word.html) or\n    [PDF](https://quarto.org/docs/output-formats/pdf-basics.html) fact sheets or\n    reports\n-   [manuscripts](https://quarto.org/docs/manuscripts/)\n-   [presentations](https://quarto.org/docs/presentations/)\n-   [dashboards](https://quarto.org/docs/dashboards/)\n-   [websites](https://quarto.org/docs/websites/)\n-   [books](https://quarto.org/docs/books/)\n-   [blogs](https://quarto.org/docs/websites/website-blog.html)\n\n**Check out the [Quarto Gallery](https://quarto.org/docs/gallery/)!**\n:::\n\n::: {.column width=\"50%\"}\n![Artwork from \"Hello, Quarto\" keynote by Julia Lowndes and Mine\n√áetinkaya-Rundel, presented at RStudio::Conf(2022). Illustrated by Allison\nHorst.](images/horst-quarto-schematic.png){fig-alt=\"A schematic representing the multi-language input (e.g. Python, R, Observable, Julia) and multi-format output (e.g. PDF, html, Word documents, and more) versatility of Quarto.\"\nfig-align=\"center\" style=\"margin-top:-1.5em;margin-bottom:-1em\"}\n:::\n:::\n\n## Learning objective 2\n\n**Learn how to weave code and text together to create a fully reproducible\nreport.**\n\n`.qmd` documents contain:\n\n-   document level metadata and options in the **YAML**\n-   a **narrative** using markdown syntax, and\n-   **code chunks** to import, wrangle, visualize data.\n\n## Learning objective 3\n\n**Learn how to use parameters to create variations of a report.**\n\n. . .\n\n**Parameterized reports &rarr; very fancy custom functions:**\n\n::: incremental\n-   Function ‚Üí `.qmd` template\n\n-   Input ‚Üí parameters\n\n-   Output ‚Üí rendered reports\n:::\n\n. . .\n\n**Useful for creating variations of the same report:**\n\n-   spatial: country, state, county, or city\n\n-   temporal: year or other time period\n\n-   water bodies, sampling sites, energy sources, breeds, species, diseases, trials, etc.\n\n. . .\n\n::: callout-note\nWe only covered reports, but you can also parameterize `revealjs` presentations!\nSee this [Jumping Rivers blog\npost](https://www.jumpingrivers.com/blog/r-parameterised-presentations-quarto/)\nabout it.\n:::\n\n## Thank you!\n\n::: columns\n::: {.column width=\"65%\"}\nüè° **Home for all workshop materials**:\n[jadeyryan.quarto.pub/ceds-quarto-workshop/](https://jadeyryan.quarto.pub/ceds-quarto-workshop/)\n\nüé• **Recordings from previous workshops & talks**:  \n[links in GitHub repo](https://github.com/jadeynryan/parameterized-quarto-workshop?tab=readme-ov-file#workshops) or [my YouTube playlist](https://youtube.com/playlist?list=PLzjGoNexcyYaDUVCg4MQDtMXLl2F5HE3B&si=-y0jQfCYyRAQjI1B)\n\n![](images/mts.jpg){width=\"600\"\nfig-alt=\"From left to right, Mai, Tai, and Skye. Three snowshoe cats cuddling in their warming beds.\"\nstyle=\"border-radius:1em\"}\n:::\n\n::: {.column width=\"35%\"}\n**Stay connected!**\n\n{{< fa link size=xl >}} [jadeyryan.com](https://jadeyryan.com)\n\n{{< fa brands mastodon size=xl >}} [\\@jadeynryan](https://fosstodon.org/@jadeynryan)\n\n{{< fa brands linkedin size=xl >}} [linkedin.com/in/jadey-ryan](https://www.linkedin.com/in/jadey-ryan)\n\n{{< fa brands github size=xl >}} [jadeynryan](https://github.com/jadeynryan/)\n\n{{< fa brands etsy size=xl >}} [thecodingcats.etsy.com](https://thecodingcats.etsy.com/)\n:::\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}