{
  "hash": "ea5c551797fe264af43e60f5a8563611",
  "result": {
    "markdown": "---\ntitle: \"Parameterized Reporting<br> with Quarto<br> ![](images/jr-logo-quarto.webp){width=5em}\"\nauthor: \"Jadey Ryan | January 18, 2024<br>R-Ladies Washington DC\"\nfooter: \"Parameterized Reporting with Quarto // [jadeyryan.quarto.pub/rladies-dc-quarto-params/](https://jadeyryan.quarto.pub/rladies-dc-quarto-params/)\"\nlogo: \"images/jr-logo-quarto.webp\"\nlogo-alt: \"Two hex stickers side by side with a heart joining them in the middle. Left sticker is Jadey's cat logo. Right sticker is the Quarto logo.\"\nformat: \n  revealjs: \n    width: 1600\n    height: 900  \n    theme: slides.scss\n    highlight-style: a11y\n    transition: fade\n    slide-number: true\nexecute:\n  echo: true\ndf-print: kable\n---\n## Acknowledgements\n\n![](images/rladies-dc.jpg){fig-alt=\"R-Ladies Washington DC Logo\" style=\"border-radius:1em\"}\n\n-   [R/Medicine Data Cleaning 2023 Workshop](https://shannonpileggi.github.io/rmedicine-data-cleaning-2023/) taught by [Crystal Lewis](https://cghlewis.com/), [Shannon Pileggi](https://www.pipinghotdata.com/), and [Peter Higgins](https://bookdown.org/pdr_higgins/rmrwr/)\n\n-   [ASA Traveling Courses on Quarto](https://quarto.org/docs/blog/posts/2023-12-05-asa-traveling-courses/) taught by [Mine √áetinkaya-Rundel](https://mine-cr.com/) and [Andrew Bray](https://andrewpbray.github.io/)\n\n## License\n\nOpinions expressed are solely my own and do not express the views of my employer or any organizations I am associated with.\n\nThis work is licensed under [Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA)](https://creativecommons.org/licenses/by-nc-sa/4.0/).\n\n{{< fa brands creative-commons size=2x >}} {{< fa brands creative-commons-by size=2x >}} {{< fa brands creative-commons-nc size=2x >}} {{< fa brands creative-commons-sa size=2x >}}\n\n## Jadey Ryan\n\n::: columns\n::: {.column width=\"40%\"}\nData scientist at WA Dept of Agriculture\n\nBusiness owner of The Coding Cats\n\n{{< fa link size=xl >}} [jadeyryan.com](https://jadeyryan.com)\n\n{{< fa brands mastodon size=xl >}} [\\@jadeynryan](https://fosstodon.org/@jadeynryan)\n\n{{< fa brands linkedin size=xl >}} [linkedin.com/in/jadey-ryan](https://www.linkedin.com/in/jadey-ryan)\n\n{{< fa brands github size=xl >}} [jadeynryan](https://github.com/jadeynryan/)\n\n{{< fa brands etsy size=xl >}} [thecodingcats.etsy.com](https://thecodingcats.etsy.com/)\n\n![](images/mts.webp){fig-alt=\"Three snowshoe siamese cats in loaf mode. From left to right: Tai, Mai, and Skye\" style=\"border-radius:1em;margin-top:auto\"}\n:::\n\n::: {.column width=\"30%\"}\n![](images/bulk-density.jpg){fig-alt=\"Jadey collecting a bulk density soil sample in a field of wheat stubble.\" style=\"border-radius:1em;margin-top:auto\"}\n:::\n\n::: {.column width=\"30%\"}\n::: {layout-nrow=\"2\"}\n![](images/soil-sampling.jpg){style=\"border-radius:1em;margin-top:auto\" fig-alt=\"Jadey standing in a field of wheat stubble holding a 3 foot long soil sampling probe over her shoulder.\"}\n\n![](images/rangeland.jpg){fig-alt=\"Jadey standing in a grazed wildflower meadow with two colleagues collecting soil samples.\" style=\"border-radius:1em;margin-top:auto\"}\n:::\nPhoto credit: [@leslie.mmichel](https://twitter.com/leslie_mmichel)\n:::\n\n\n:::\n\n## Logistics\n\n::: incremental\n-   Login to Posit Cloud: [**bit.ly/rladies-parameterized-quarto**](https://bit.ly/rladies-parameterized-quarto).\n\n-   If Posit Cloud doesn't work, download materials locally:\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    usethis::use_course(\n      \"https://github.com/jadeynryan/rladies-parameterized-quarto/raw/main/exercises/exercises.zip\")\n    ```\n    :::\n\n-   Ask questions in the public Zoom chat or raise hand ‚úã. \n\n    ![](images/zoom-reactions.png){fig-alt=\"Zoom reactions panel with options for emojis and raising hand.\"}\n    \n-   Workshop structure: presentation, exercises, questions to answer in chat [üí¨ **Chat**:], and demos. \n:::\n\n# üí™üèº Exercise 0 {.exercise}\n\n1. Raise/lower your hand on Zoom.\n\n2. Use your favorite reaction.\n\n3. üí¨ **Chat**: share your name, where you're calling from, and one thing you‚Äôve made that you‚Äôre proud of.\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_9642e85c\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">01</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n## Learning objectives\n\n::: incremental\n1. Understand what parameterized reporting is and when it is useful.\n\n<br>\n\n2. Learn how to convert a report into a parameterized template.\n\n<br>\n\n3. Render all variations of the report at once using [{quarto}](https://quarto-dev.github.io/quarto-r/) and [{purrr}](https://purrr.tidyverse.org/). \n\n<br>\n\n4. Generate multiple format outputs from the same template file with conditional content and conditional code execution.\n:::\n\n# Syntax and RStudio aside {.section}\n\n## Pipes\n\n-   2014+ magrittr pipe `%>%`\n\n-   2021+ (R $\\geq$ 4.1.0) native R pipe `|>`\n\n. . .\n\nIsabella Vel√°squez's blog post [*Understanding the native R pipe* \\|\\>](https://ivelasq.rbind.io/blog/understanding-the-r-pipe/) (2022)\n\n. . .\n\n::: columns\n::: {.column width=\"50%\"}\n::: {.cell}\n\n```{.r .cell-code}\ndo_something(arg1, arg2, arg3, ...)\n\narg1 |>  \n  do_something(arg2, arg3)\n```\n:::\n:::\n\n::: {.column width=\"5%\"}\n:::\n\n::: {.column width=\"45%\"}\n::: {.cell}\n\n```{.r .cell-code}\nmean(0:10)\n\n0:10 |> \n  mean()\n```\n:::\n:::\n:::\n\n. . .\n\n<br>\n\nTo change `Ctrl` + `Shift` + `M` shortcut to the native pipe:\n\n`Tools` ‚Üí `Global Options` ‚Üí `Code` ‚Üí `Editing` ‚Üí `Use Native Pipe Operator`\n\n::: footer\nSlide adapted from [R/Medicine Data Cleaning 2023 Workshop](https://shannonpileggi.github.io/rmedicine-data-cleaning-2023/)\n:::\n\n## Namespacing\n\n`package::function()`\n\n`dplyr::select()`\n\n. . .\n\n-   tells R explicitly to use the function `select` from the package `dplyr`\n\n-   helps avoid name conflicts (e.g., `MASS::select()`)\n\n-   does not require `library(dplyr)`\n\n. . .\n\n::: columns\n::: {.column width=\"45%\"}\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\nmtcars |>  \n  select(mpg, cyl) \n```\n:::\n:::\n\n::: {.column width=\"5%\"}\n:::\n\n::: {.column width=\"50%\"}\n::: {.cell}\n\n```{.r .cell-code}\n# library(dplyr) not needed\n\nmtcars |>  \n  dplyr::select(mpg, cyl) \n```\n:::\n:::\n:::\n\n::: footer\nSlide adapted from [R/Medicine Data Cleaning 2023 Workshop](https://shannonpileggi.github.io/rmedicine-data-cleaning-2023/)\n:::\n\n## RStudio options\n\n`Tools` ‚Üí `Global Options` ‚Üí \n\n::: incremental\n\n-   Fussy YAML indentation: \n\n    `Code` ‚Üí `Display` ‚Üí `Indentation guides:` ‚Üí `Rainbow lines`\n    \n<br>\n\n-   Match parentheses: \n\n    `Code` ‚Üí `Display` ‚Üí `Indentation guides:` ‚Üí Check `Use rainbow parentheses`\n\n<br>\n\n-   Matching divs: \n\n    `R Markdown` ‚Üí `Advanced` ‚Üí Check `Use rainbow fenced divs`\n:::\n\n# R Markdown ‚Üí Quarto {.section}\n\n. . .\n\n<br>\n\nüí¨ **Chat**: what's your comfort level / experience with R Markdown and Quarto?\n\n## R Markdown\n\n![Figure from \"Hello, Quarto\" keynote by Julia Lowndes and Mine √áetinkaya-Rundel, presented at RStudio::Conf(2022).](images/rmd-ecosystem.png){style=\"margin-top:-5em;margin-bottom:-1em\" fig-alt=\"Hex logos for various packages from the R Markdown ecosystem.\" fig-align=\"center\" width=\"800\"}\n\n## Quarto\n\n::: r-stack\n![Artwork from \"Hello, Quarto\" keynote by Julia Lowndes and Mine √áetinkaya-Rundel, presented at RStudio::Conf(2022). Illustrated by Allison Horst.](images/horst-quarto-schematic.png){.fragment .fade-out fragment-index=\"1\" fig-alt=\"A schematic representing the multi-language input (e.g. Python, R, Observable, Julia) and multi-format output (e.g. PDF, html, Word documents, and more) versatility of Quarto.\" fig-align=\"center\" style=\"margin-top:-1.5em;margin-bottom:-1em\"}\n\n![](images/horst-qmd-render-schema.png){.fragment fragment-index=\"1\" fig-alt=\"A schematic representing rendering of Quarto documents from .qmd, to knitr or jupyter, to plain text markdown, then converted by pandoc into any number of output types including html, PDF, or Word document.\" fig-align=\"center\" style=\"margin-top:-1.5em;margin-bottom:-1em\"}\n:::\n\n## R Markdown vs Quarto\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/rmarkdown.png){width=\"150\" style=\"float:left;padding: 0 1em 0 0\"}\n\n### R Markdown\n\n-   Vast R Markdown ecosystem\n\n-   Dependent on R\n:::\n\n::: {.column width=\"50%\"}\n![](images/quarto.png){width=\"150\" style=\"float:left;padding: 0 1em 0 0\"}\n\n### Quarto\n\n-   Command line interface (CLI)\n\n-   Expands R Markdown ecosystem\n\n-   \"Batteries included\"\n\n-   Multi-language and multi-engine\n:::\n:::\n\n. . .\n\n<br>\n\nR Markdown will still be maintained but likely no new features [(Xie 2022)](https://yihui.org/en/2022/04/quarto-r-markdown/).\n\n## Differences with parameters\n\nNo Quarto equivalent to .Rmd [Knit with Parameters GUI](https://bookdown.org/yihui/rmarkdown/params-knit.html#the-interactive-user-interface) built with Shiny [{miniUI}](https://github.com/rstudio/miniUI).\n\n![Figure from [*R Markdown: The Definitive Guide* (Xie et al. 2023)](https://bookdown.org/yihui/rmarkdown/params-knit.html#the-interactive-user-interface)](https://bookdown.org/yihui/rmarkdown/images/params-input.png){fig-alt=\"Input parameter values interactively for parameterized reports.\" fig-align=\"left\" width=\"300\"}\n\n::: incremental\n-   **Workaround**: build webapp to get input, serialize to YAML, pass to Quarto render.\n\n-   **More info**: [GitHub discussion](https://github.com/quarto-dev/quarto-cli/discussions/7581#discussioncomment-7603016)\n:::\n\n## Convert `.Rmd` ‚Üí `.qmd`\\*\n\n1.  Change file extension from `.Rmd` ‚Üí `.qmd`\n2.  Change YAML header (`output:` ‚Üí `format:`)\n3.  Convert chunk headers with `knitr::convert_chunk_header()`\n\n*\\*If you want.*\n\n. . .\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n\n**R Markdown**\n\n::: {.cell}\n\n````{.cell-code}\n```{{r, label=rmarkdown, eval=FALSE}}\n# code\n```\n````\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n**Quarto**\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: quarto\n#| eval: false\n\n# code\n```\n````\n:::\n\n:::\n::::\n\n## Resources for R Markdown users\n\n- [From R Markdown to Quarto workshop](https://quarto.org/docs/blog/posts/2023-12-05-asa-traveling-courses/) taught by Dr. Mine √áetinkaya-Rundel and Dr. Andrew Bray.\n\n- [Quarto FAQ for R Markdown Users](https://quarto.org/docs/faq/rmarkdown.html)\n\n- Ted Laderas' talk [Quarto/RMarkdown - What's Different?](https://laderast.github.io/qmd_rmd)\n\n# Parameterized reports {.section}\n\n## Many use cases\n\n::: columns\n::: {.column width=\"25%\"}\n![](images/ocean-floor.png){.lightbox group=\"examples\" fig-alt=\"RStudio R Markdown parameterized report project for mapping ocean floors.\"}\n\n[Ocean floor maps](https://rmarkdown.rstudio.com/lesson-6.html)\n:::\n\n::: {.column width=\"25%\"}\n![](images/urban-institute.png){.lightbox group=\"examples\" fig-alt=\"Report for Alabama spending with text and plots generated from parameterized R Markdown.\"}\n\n[Fiscal briefs](https://book.rwithoutstatistics.com/parameterized-reports-chapter.html)\n:::\n\n::: {.column width=\"25%\"}\n![](images/driver-quality.png){.lightbox group=\"examples\" fig-alt=\"Report for Alaska driver quality with text, plot, and table generated from parameterized RMarkdown.\"}\n\n[Bad drivers](https://urban-institute.medium.com/iterated-fact-sheets-with-r-markdown-d685eb4eafce)\n:::\n\n::: {.column width=\"25%\"}\n![](images/soils-report.png){.lightbox group=\"examples\" fig-alt=\"HTML report for soil health survey participant, generated from a parameterized Quarto report.\"}\n\n[Soil health](https://wa-department-of-agriculture.github.io/soils/)\n:::\n:::\n\n. . .\n\n**Different audiences, different reports**\n\nShow code for technical staff and hide code for everyone else.\n\nSee this [StackOverflow question and answer](https://stackoverflow.com/questions/73571919/how-to-pass-logical-parameters-with-the-quarto-r-package-to-the-knitr-chunk-opti) for an example.\n\n. . .\n\n<br> \n\nüí¨ **Chat**: what kinds of reports would you like to parameterize? What would the parameters be?\n\n## Like a custom function\n\n::: r-stack\n![](images/template1.png){.fragment fig-alt=\"File with the word '.qmd' inside and the word 'Function' above.\" width=\"1300\" fig-align=\"left\" style=\"margin-top:-1em\"}\n\n![](images/template2.png){.fragment fig-alt=\"An arrow points from 'Input' with 'params$year' to the previous image with 'Function' and '.qmd' file.\" width=\"1300\" fig-align=\"left\" style=\"margin-top:-1em\"}\n\n![](images/template3.png){.fragment fig-alt=\"In addition to the previous two images, arrows point to five reports with years 2019 through 2023 on them in a flow chart.\" width=\"1300\" fig-align=\"left\" style=\"margin-top:-1em\"}\n:::\n\n## What makes a report \"parameterized\"?\n\n-   YAML header with `params` key-value pairs\n\n    - Yet Another Markdown Language or YAML Ain't Markup Language ü§∑üèª‚Äç‚ôÄÔ∏è\n    \n-   Use those `params` in your report to create different variations\n\n. . .\n\n::: callout-important\nValid parameter values are strings, numbers, or Boolean.\n    \nMust serialize a dataframe to pass it as a parameter, then un-serialize it back to a dataframe within the `.qmd` content. \n\nSee [Christophe Dervieux's answer in Posit Community](https://community.rstudio.com/t/param-converted-from-data-frame-to-list/155556/9) to understand why.\n\nSee [John Paul Helveston's blog post](https://www.jhelvy.com/posts/2023-02-28-parameterized-pdfs-with-quarto/#passing-data-frames-as-parameters) to learn how to use {jsonlite} as a workaround.\n:::\n\n## Workflow\n\n::: incremental\n1.  Write report template with default values hard-coded, and then render & review.\n\n2.  Set default `params` key-value pairs in YAML. Replace hard-coded values with the `params` variables.\n\n3.  Render the single report and review.\n\n4.  Render extreme cases and review.\n\n    -   Parameter values with barely any data and with tons of data.\n    \n5. Render all variations of the report at once.\n:::\n\n# üí™üèº Exercise 1 {.exercise}\n\n**Explore a report without parameters and see where we could add them.**\n\n1.  Open `ex-1-swiss-cats.qmd`.\n\n2.  Click the ![](https://quarto.org/docs/get-started/hello/images/rstudio-render-button.png){fig-alt=\"Quarto render button in RStudio\" style=\"vertical-align:middle;\" width=\"49\"} **Render** button.\n\n3.  Look at the source markdown and code and the rendered report.\n\n4.  Update your name as the author. Re-render.\n\n5.  üí¨ **Chat**: what variables could we set as parameters?\n    \n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_ce757346\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n## Set `params` in YAML header\n\n::: {.cell}\n\n```{.yaml .cell-code  code-line-numbers=\"2|3-5|6-8|11\"}\n---\ntitle: \"Swiss Cats\"                 # Metadata\nformat:                             # Set format types\n  html: default                                     \n  docx: default                           \nparams:                             # Set default parameter key-value pairs\n  fave_breed: \"Snowshoe\"                                \n---\n    \nReport content goes here.           # Write content\n```\n:::\n\n. . .\n\n::: callout-important\nYour default `params` key-value pairs must be found in your dataset.\n:::\n\n## Access `params`\n\n\n\nRun any line or chunk to add `params` to your environment.\n\n. . .\n\n`params` object is a list.\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(params)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 1\n $ fave_breed: chr \"Snowshoe\"\n```\n:::\n:::\n\n<br>\n\n. . .\n\nAccess with `$` notation.\n\n::: {.cell}\n\n```{.r .cell-code}\nparams$fave_breed\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Snowshoe\"\n```\n:::\n:::\n\n<br>\n\n. . .\n\nFor inline code in YAML or report content, enclose the expression in `` `r ` ``.\n\n::: {.cell}\n\n```{.markdown .cell-code}\nMy favorite cat breed is the **`r params$fave_breed`**.\n```\n:::\n\nMy favorite cat breed is the **Snowshoe**.\n\n## Replace hard-coded values with `params`\n\n`Ctrl` + `F` to find where to replace hard-coded values with `params`\n\n. . .\n\n<br>\n\nUse inline R code for markdown\n    \n::: {.cell}\n\n```{.markdown .cell-code}\nText textity text **`r params$___`**.\n```\n:::\n\n. . .\n\n<br>\n\nUse `paste()` for plot and table titles and labels\n    \n::: {.cell}\n\n```{.r .cell-code}\n# ggplot code +\nlabs(title = paste(params$fave_breed, \"population\"))\n```\n:::\n\n# üíÉüèª Demo {.demo}\n\nModify `ex-1-swiss-cats.qmd` to add `pet_type` and `fave_breed` parameters.\n\n# Rendering reports {.section}\n\n## Multiple ways to render \n\n::: incremental\n1. ![](https://quarto.org/docs/get-started/hello/images/rstudio-render-button.png){fig-alt=\"Quarto render button in RStudio\" style=\"vertical-align:middle;\" width=\"49\"} **Render** button in RStudio or `Ctrl` + `Shift` + `K` keyboard shortcut\n\n2. Check `Render on Save` and `Ctrl` + `S` keyboard shortcut\n\n3. Quarto CLI\n\n    ```{.bash filename=\"Terminal\"}\n    quarto render ex-2-quarto-render.qmd -P pet_type:'cats' -P fave_breed:'Snowshoe'\n    ```\n\n4. ‚ú® `quarto::quarto_render()`\n\n    ```{.r filename=\"Console or R script\"}\n    quarto::quarto_render(\n      input = here::here(\"ex-2-quarto-render.qmd\"), # Input Quarto file\n      execute_params = list(                        # Named list of params\n        pet_type = \"cats\",\n        fave_breed = \"Snowshoe\"))\n    ```\n:::\n\n# üí™üèº Exercise 2 {.exercise}\n\n**Change parameters and render using 1) Render button and 2) `quarto_render()`.**\n\n0. Look at the unique pet breeds and pick your favorite.\n   ```r\n   # Run in the console\n   pets |>\n      dplyr::distinct(pet_type, breed) |>\n      View()\n   ```\n   \n1. In `ex-2-quarto-render.qmd` Change the default parameters in the YAML to your favorite pet type and breed. Render using the button.\n\n2. Now render with `quarto::quarto_render()`. Replace `___` with different parameters:\n\n   ```r\n   # Run in the console\n    quarto::quarto_render(\n      input = here::here(\"ex-2-quarto-render.qmd\"),\n      execute_params = list(\n        pet_type = \"___\",\n        fave_breed = \"___\"))\n   ```\n\n3. üí¨ **Chat**: what's your fave breed and do you have any pets? üêàüêïüêπüêçüê†\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_90047869\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">07</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n## Render all 538 reports \n\nOne HTML report for each cat breed and each dog breed.\n\n:::: panel-tabset\n\n## üìä Data\n\n::: {.cell}\n\n```{.r .cell-code}\npets <- readr::read_rds(here::here(\"data\", \"pets.RDS\"))\n\npets |>\n  dplyr::distinct(pet_type, breed) |>\n  dplyr::count(pet_type) |>\n  janitor::adorn_totals()\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|pet_type |   n|\n|:--------|---:|\n|cats     | 104|\n|dogs     | 434|\n|Total    | 538|\n\n</div>\n:::\n:::\n\n## üë∑üèº‚Äç‚ôÇÔ∏è Manual 1\n\n1. Change the default `params` in the YAML.\n\n2. **Render** button in RStudio or `Ctrl` + `Shift` + `K` keyboard shortcut.\n\n3. Change the file name to add the parameter.\n    \n   `output-file:` YAML option doesn't seem to work with inline R code.\n\n4. Repeat 537 times.\n\n## üë∑üèª‚Äç‚ôÄÔ∏è Manual 2\n\n::: {.cell}\n\n```{.r .cell-code}\nquarto::quarto_render(\n  input = here::here(\"ex-2-quarto-render.qmd\"),\n  output_file = \"dogs-affenpinscher-report.html\",\n  execute_params = list(\n    pet_type = \"dogs\",\n    fave_breed = \"Affenpinscher\"))\n\nquarto::quarto_render(\n  input = here::here(\"ex-2-quarto-render.qmd\"),\n  output_file = \"dogs-afghan-hound-report.html\",\n  execute_params = list(\n    pet_type = \"dogs\",\n    fave_breed = \"Afghan Hound\"))\n\nquarto::quarto_render(\n  input = here::here(\"ex-2-quarto-render.qmd\"),\n  output_file = \"dogs-aidi-chien-de-montagne-de-l-atlas-report.html\",\n  execute_params = list(\n    pet_type = \"dogs\",\n    fave_breed = \"Aidi Chien De Montagne De L Atlas\"))\n\nquarto::quarto_render(\n  input = here::here(\"ex-2-quarto-render.qmd\"),\n  output_file = \"dogs-akita-report.html\",\n  execute_params = list(\n    pet_type = \"dogs\",\n    fave_breed = \"Akita\"))\n\n# + 534 more times... \n```\n:::\n\n## ‚ö° Programatically\n\n**Create a dataframe with three columns that match `quarto_render()` args:**\n\n- `output_format`: file type (html, revealjs, pdf, docx, etc.)\n\n- `output_file`: file name with extension\n\n- `execute_params`: named list of parameters\n\n**Map over each row:**\n\n- `purrr::pwalk(dataframe, quarto_render, quarto_render_args)` \n::::\n\n## Create dataframe to iterate over\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2|4|5-9|11-14|\"}\npet_reports <- pets |>\n  dplyr::distinct(pet_type, breed) |>   # Get distinct pet/breed combos\n  dplyr::mutate(\n    output_format = \"html\",             # Make output_format column\n    output_file = paste(                # Make output_file column\n      tolower(pet_type),\n      tolower(gsub(\" \", \"-\", breed)),\n      \"report.html\",\n      sep = \"-\"\n    ),\n    execute_params = purrr::map2(       # Make execute_params column\n      pet_type,\n      breed,\n      \\(pet_type, breed) list(pet_type = pet_type, breed = breed)))\n```\n:::\n        \n## Subset to first 2 cat/dog breeds\n\n::: {.cell}\n\n```{.r .cell-code}\npet_reports_subset <- pet_reports |>\n  dplyr::slice_head(n = 2, by = pet_type) |>\n  dplyr::select(output_file, execute_params)\n\npet_reports_subset\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|output_file                    |execute_params               |\n|:------------------------------|:----------------------------|\n|cats-abyssiniane-report.html   |cats       , Abyssiniane     |\n|cats-aegean-cat-report.html    |cats      , Aegean Cat       |\n|dogs-affenpinscher-report.html |dogs         , Affenpinscher |\n|dogs-afghan-hound-report.html  |dogs        , Afghan Hound   |\n\n</div>\n:::\n:::\n\n## Map over each row \n\n::: incremental\n-   `purrr::pwalk()` iterates over multiple arguments simultaneously.\n\n-   First `.l` argument is a *list of vectors*. \n\n    - Dataframe is a special case of `.l` that iterates over rows.\n:::\n. . .\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2|3|4|5|\"}\npurrr::pwalk(\n  .l = pet_reports_subset,                      # Dataframe to map over\n  .f = quarto::quarto_render,                   # Function we are applying to each row\n  input = here::here(\"ex-2-quarto-render.qmd\"), # Arguments of .f\n  .progress = TRUE                              # Show a progress bar :)\n)\n```\n:::\n\n## Limitations\n\n::: incremental\n\n-   Can't render reports to another directory.\n\n    - [`output-dir` YAML option](https://quarto.org/docs/books/book-output.html#output-path) only works for Quarto projects that have `_quarto.yml`.\n\n    - **Workaround**: use [`{fs}`](https://fs.r-lib.org/) to move files after rendering. See `ex-3-render-reports.R` for example.\n    \n    - **More info**: [GitHub discussion](https://github.com/quarto-dev/quarto-cli/discussions/2171#discussioncomment-4865286) and [GitHub issue](https://github.com/quarto-dev/quarto-r/issues/81).\n\n<br>\n\n- If using `embed-resources: true` YAML option, `.qmd` can't be in subfolder, otherwise: \n\n    - [[WARNING] Could not fetch resource ...]{.warning}\n\n    - **More info**: [GitHub discussion](https://github.com/quarto-dev/quarto-cli/discussions/4041#discussioncomment-6052000) and [GitHub issue](https://github.com/quarto-dev/quarto-cli/issues/5765).\n:::\n\n# üíÉüèª Demo {.demo}\n\nDemo `ex-3-render-reports.R`.\n\n## Multiple formats\n\nAdd to the `format:` YAML option to render additional output formats from the same `.qmd` file.\n\n``` yaml\n---\nformat:\n  html: \n    embed-resources: true   # Makes the report self-contained\n  pdf: default              # If not using any additional format options,\n  docx: default             # set value to `default`  \n---\n```\n\n. . .\n\n**Note**: the Render button now has a dropdown!\n\n![](images/render-button.png){width=60% fig-alt=\"Screenshot of Quarto file with the Render dropdown showing options for HTML, PDF, and MS Word formats.\"}\n\n[Quarto docs on multiple formats](https://quarto.org/docs/get-started/authoring/rstudio.html#multiple-formats)\n\n## Format links for HTML output\n\nLinks to download the other formats will automatically appear in HTML documents.\n\n![](images/other-formats.png){fig-alt=\"Screenshot of a HTML page that includes links to the PDF and MS Word formats in the table of contents under the heading Other Formats.\" style=\"border-radius:1em\"}\n\n## Format link options\n\n**Choose which format links to include:**\n\n::: {.cell}\n\n```{.yaml .cell-code  code-line-numbers=\"7\"}\n---\nformat:\n  html: \n    embed-resources: true\n  pdf: default\n  docx: default\nformat-links: [pdf]\n---\n```\n:::\n\n. . .\n\n**Or hide all links:**\n\n::: {.cell}\n\n```{.yaml .cell-code  code-line-numbers=\"7\"}\n---\nformat:\n  html: \n    embed-resources: true\n  pdf: default\n  docx: default\nformat-links: false\n---\n```\n:::\n\n# üí™üèº Exercise 3 {.exercise}\n\n**Add another format by updating 1) the YAML, 2) the `pet_reports` dataframe, and 3) the `regexp` argument.**\n\n1. Modify the YAML of `ex-3-render-reports.qmd` to add a new format ([see all the options](https://quarto.org/docs/output-formats/all-formats.html)).\n\n2. Modify `ex-3-render-reports.R` to:\n   \n   - Add this new format to the `pet_reports` dataframe used in `pwalk()`\n\n   - Include \".html\" OR \".docx\" OR \".pdf\" in the `regexp` argument in `dir_ls()`\n   \n   - Hint: use the `|` pipe `OR` operator. \n\n4. üí¨ **Chat**: were any of these functions from the `.qmd` or `.R` files new to you?\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_19354f6d\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n---\nexecute:\n  eval: false\n---\n\n# Conditional content {.section}\n\n## Control content visibility\n\nSpecial `.content-visible` and `.content-hidden` classes with `when-format=\"___\"` and `unless-format=\"___\"` attributes can be applied to:\n\n::: panel-tabset\n\n## Divs\n\n``` markdown\n::: {.content-visible when-format=\"html\"}\n\nWill only appear in HTML.\n\n:::\n```\n\n## Non-executable code\n\n```` markdown\n```{.python .content-visible when-format=\"html\"}\n# code shown only in HTML\n2 + 2\n```\n````\n\n## Spans\n\n``` markdown\nSome text\n[in HTML.]{.content-visible when-format=\"html\"}\n[in PDF.]{.content-visible when-format=\"pdf\"}\n```\n:::\n\n::: footer\nExamples from [Conditional Content Quarto docs](https://quarto.org/docs/authoring/conditional.html)\n:::\n\n## Useful for static/interactive features\n\nPairs well with `{{< include >}}` shortcodes to re-use content without copying/pasting.\n\nUse an underscore (_) prefix for included files so they are automatically ignored by a Quarto render of a project ([Includes Quarto Docs](https://quarto.org/docs/authoring/includes.html)).\n\n. . .\n\n::::: panel-tabset\n\n## Static\n\nUse `.content-visible unless-format=\"html\"`\n\n```markdown\n:::: {.content-visible unless-format=\"html\"}\n\n## Cats\n\n{{{< include _cats.qmd >}}}\n\n## Dogs\n\n{{{< include _dogs.qmd >}}}\n\n::::\n```\n\n## Interactive\n\nUse `.content-visible when-format=\"html\"`\n\n```markdown\n:::: {.content-visible when-format=\"html\"}\n::: panel-tabset\n\n## Cats\n\n{{{< include _cats.qmd >}}}\n\n## Dogs\n\n{{{< include _dogs.qmd >}}}\n\n:::\n::::\n```\n:::::\n\n# üí™üèº Exercise 4 {.exercise}\n\n**Use conditional content divs to control when tabsets are shown.**\n\n1. Modify `ex-4-conditional-content.qmd` so that the `panel-tabset` visible for .html reports and hidden for .pdf & .docx reports.\n\nOptions:\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n - {.content-visible when-format=\"___\"}\n \n - {.content-visible unless-format=\"___\"}\n:::\n\n::: {.column width=\"50%\"}\n - {.content-hidden unless-format=\"___\"}\n \n - {.content-hidden unless-format=\"___\"}\n:::\n::::\n \n 2. üí¨ **Chat**: what other kinds of content might you want to make visible for only a certain format?\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_c0963cf7\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n## Conditional code execution\n\n::: incremental\n\n-   More efficient to not execute code that generates interactive outputs for static reports.\n\n-   Useful for executing interactive plot code for HTML reports and static `ggplot2` code for all other formats. \n\n-   Not currently a feature of Quarto v1.3, but a Quarto dev thinks it could be possible in v1.4 according to this [GitHub discussion](https://github.com/quarto-dev/quarto-cli/discussions/3260#discussioncomment-4573926). Granted, that comment was from 2023-01-02...\n\n:::\n\n## Workaround for conditional R code\n\nInclude in the setup chunk of your `.qmd` file.\n\nGet the format of the Pandoc output:\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: setup\n\n# Get output format\nformat <- knitr::opts_knit$get(\"rmarkdown.pandoc.to\")\n```\n````\n:::\n\n## Use `eval: !expr` chunk option\n\n::: panel-tabset\n\n## Static plot\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| eval: !expr format %in% c(\"latex\", \"docx\")\n\n# code to create static {ggplot2}\n```\n````\n:::\n\n## Interactive plot\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| eval: !expr format == \"html\"\n\n# code to create interactive {plotly}\n```\n````\n:::\n\n:::\n\n<br>\n\n. . .\n\n**Can even use `params` in `!expr`:**\n\n``` r\n#| eval: !expr params$fave_breed == \"Snowshoe\"\n```\n\n. . .\n\n<br>\n\n[Chunk Options Quarto Docs](https://quarto.org/docs/computations/r.html#chunk-options)\n\n# üí™üèº Exercise 5 {.exercise}\n\n**Set a `format` variable and use it in the `eval:` chunk option to execute `ggplot2` code only for static reports and `plotly` code only for HTML documents.**\n\n1. Modify `ex-5-conditional-code.qmd`, get the output format in a variable in the `setup` chunk.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get output format in setup chunk:\nformat <- knitr::opts_knit$get(\"rmarkdown.pandoc.to\")\n```\n:::\n\n2. Set chunk options for `ggplot` code blocks and `plotly` code blocks.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Insert in chunk options:\n#| eval: !expr format == \"html\"\n# or\n#| eval: !expr format %in% c(\"latex\", \"docx\")\n```\n:::\n\n2. üí¨ **Chat**: what is something you learned from this workshop that you're excited to apply to your own reports and projects?\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_5d5da971\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n# Summary {.section}\n\n## Learning objective 1\n\n**Understand what parameterized reporting is and when it is useful.**\n\n. . .\n\n**Like very fancy custom functions:**\n\n::: incremental\n\n- Function &rarr; `.qmd` template\n\n- Input &rarr; parameters\n\n- Output &rarr; rendered reports\n:::\n\n. . . \n\n**Useful for creating variations of the same report:**\n\n-   country, state, county, or city\n\n-   time periods\n\n-   breeds, species, diseases, trials, etc.\n\n. . .\n\n::: callout-note\nWe only covered reports, but you can also parameterize `revealjs` presentations! See this [Jumping Rivers blog post](https://www.jumpingrivers.com/blog/r-parameterised-presentations-quarto/) about it.\n:::\n\n## Learning objective 2\n\n**Learn how to convert a report into a parameterized template.**\n\n::: incremental\n- Include default `params:` in YAML\n    \n- Replace hard-coded values with `params$pet_type`\n\n  - **YAML**: \n  \n    ::: {.cell}\n    \n    ```{.yaml .cell-code}\n    ---\n    title: \"Report about `r params$pet_type`\"\n    params:\n      pet_type: \"cats\"\n    ---\n    ```\n    :::\n    \n  - **Inline R code**: \n  \n    ::: {.cell}\n    \n    ```{.markdown .cell-code}\n    I like **`r params$pet_type`**.\n    ```\n    :::\n    \n  - **Code chunks**: \n  \n    ``` r\n    pets |> \n        dplyr::filter(pet_type == params$pet_type)\n    ```\n:::\n\n## Learning objective 3\n\n**Render all variations of the report at once using [{quarto}](https://quarto-dev.github.io/quarto-r/) and [{purrr}](https://purrr.tidyverse.org/). **\n\n::: {.fragment}\n1. Get all unique parameter combinations into a dataframe:\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(pet_reports, 1)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|pet_type |breed       |output_format |output_file                  |execute_params           |\n|:--------|:-----------|:-------------|:----------------------------|:------------------------|\n|cats     |Abyssiniane |html          |cats-abyssiniane-report.html |cats       , Abyssiniane |\n\n</div>\n:::\n:::\n:::\n\n<br>\n\n::: {.fragment}\n2. Use dataframe in `pwalk()` with `quarto_render()`:\n\n::: {.cell}\n\n```{.r .cell-code}\npurrr::pwalk(\n  pet_reports,\n  quarto::quarto_render,\n  input = here::here(\"pet_template.qmd\"),\n  .progress = TRUE\n)\n```\n:::\n:::\n\n## Learning objective 4\n\n**Generate multiple format outputs from the same template with conditional content and code.**\n\n::: {.fragment}\n\n#### Content visibility\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n - {.content-visible when-format=\"___\"}\n \n - {.content-visible unless-format=\"___\"}\n:::\n\n::: {.column width=\"50%\"}\n - {.content-hidden unless-format=\"___\"}\n \n - {.content-hidden unless-format=\"___\"}\n:::\n::::\n\n:::\n\n::: {.fragment}\n\n#### Code execution\n\n```r\n#| label: setup\n\nformat <- knitr::opts_knit$get(\"rmarkdown.pandoc.to\")\n```\n\n```r\n#| label: interactive-plot\n#| eval: !expr format == \"html\"\n\n# plotly code\n```\n\n```r\n#| label: static-plot\n#| eval: !expr format %in% c(\"pdf\", \"docx\")\n\n# ggplot2 code\n```\n\n:::\n\n## Thank you!\n\n:::: {.columns}\n::: {.column width=\"65%\"}\nüôèüèº **Please let me know how I did in this [short survey](https://forms.gle/xSYgJQenNs6gFcck9)** \n\n<br>\n\nüè° **Home for all workshop materials**: <https://jadeyryan.quarto.pub/rladies-dc-quarto-params/>\n\n![](images/mts.jpg){width=600 fig-alt=\"From left to right, Mai, Tai, and Skye. Three snowshoe cats cuddling in their warming beds.\" style=\"border-radius:1em\"}\n:::\n\n::: {.column width=\"35%\"}\n**Stay connected!**\n\n{{< fa link size=xl >}} [jadeyryan.com](https://jadeyryan.com)\n\n{{< fa brands mastodon size=xl >}} [\\@jadeynryan](https://fosstodon.org/@jadeynryan)\n\n{{< fa brands linkedin size=xl >}} [linkedin.com/in/jadey-ryan](https://www.linkedin.com/in/jadey-ryan)\n\n{{< fa brands github size=xl >}} [jadeynryan](https://github.com/jadeynryan/)\n\n{{< fa brands etsy size=xl >}} [thecodingcats.etsy.com](https://thecodingcats.etsy.com/)\n:::\n\n::::\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\r\n"
      ],
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}