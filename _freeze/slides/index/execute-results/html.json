{
  "hash": "c9658f171cc99e23065ede28c5f84ed1",
  "result": {
    "markdown": "---\ntitle: \"Reproducible Reporting<br> with Quarto<br> ![](images/jr-logo-quarto.webp){width=5em}\"\nauthor: \"Jadey Ryan // April 25, 2024<br>Community Engaged Data Science<br>College of the Atlantic\"\nfooter: \"Reproducible Reporting with Quarto // [jadeyryan.quarto.pub/ceds-quarto-workshop/](https://jadeyryan.quarto.pub/ceds-quarto-workshop/)\"\nlogo: \"images/jr-logo-quarto.webp\"\nlogo-alt: \"Two hex stickers side by side with a heart joining them in the middle. Left sticker is Jadey's cat logo. Right sticker is the Quarto logo.\"\nformat: \n  revealjs: \n    width: 1600\n    height: 900  \n    theme: slides.scss\n    highlight-style: a11y\n    transition: fade\n    slide-number: true\nexecute:\n  echo: true\ndf-print: kable\n---\n## Acknowledgements\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/ceds.jpg){.center fig-alt=\"Community-Engaged Data Science Logo\" width=\"250\"}\n:::\n\n::: {.column width=\"50%\"}\n![](images/coa.png){.center fig-alt=\"College of the Atlantic Logo\" width=\"250\"}\n:::\n:::\n\n<br>\n\n[R/Medicine Data Cleaning 2023\nWorkshop](https://shannonpileggi.github.io/rmedicine-data-cleaning-2023/) taught\nby [Crystal Lewis](https://cghlewis.com/), [Shannon\nPileggi](https://www.pipinghotdata.com/), and [Peter\nHiggins](https://bookdown.org/pdr_higgins/rmrwr/)\n\n<br>\n\n[ASA Traveling Courses on\nQuarto](https://quarto.org/docs/blog/posts/2023-12-05-asa-traveling-courses/)\ntaught by [Mine √áetinkaya-Rundel](https://mine-cr.com/) and [Andrew\nBray](https://andrewpbray.github.io/)\n\n## Disclaimer and license\n\nOpinions expressed are solely my own and do not express the views of my employer\nor any organizations I am associated with.\n\n<br>\n\nThis work is licensed under [Creative Commons\nAttribution-NonCommercial-ShareAlike 4.0 International (CC\nBY-NC-SA)](https://creativecommons.org/licenses/by-nc-sa/4.0/).\n\n{{< fa brands creative-commons size=2x >}} {{< fa brands creative-commons-by size=2x >}} {{< fa brands creative-commons-nc size=2x >}} {{< fa brands creative-commons-sa size=2x >}}\n\n## Jadey Ryan\n\n::: columns\n::: {.column width=\"44%\"}\nData scientist at WA Dept of Agriculture\n\nThe Coding Cats: cat & code themed merch\n\n{{< fa link size=xl >}} [jadeyryan.com](https://jadeyryan.com)\n\n{{< fa brands mastodon size=xl >}} [\\@jadeynryan](https://fosstodon.org/@jadeynryan)\n\n{{< fa brands linkedin size=xl >}} [linkedin.com/in/jadey-ryan](https://www.linkedin.com/in/jadey-ryan)\n\n{{< fa brands github size=xl >}} [jadeynryan](https://github.com/jadeynryan/)\n\n{{< fa brands etsy size=xl >}} [thecodingcats.etsy.com](https://thecodingcats.etsy.com/)\n\n![](images/mts.webp){fig-alt=\"Three snowshoe siamese cats in loaf mode. From left to right: Tai, Mai, and Skye\" style=\"border-radius:1em;margin-top:auto\"}\n:::\n\n::: {.column width=\"28%\"}\n![](images/bulk-density.jpg){fig-alt=\"Jadey collecting a bulk density soil sample in a field of wheat stubble.\" style=\"border-radius:1em;margin-top:auto\"}\n:::\n\n::: {.column width=\"28%\"}\n::: {layout-nrow=\"2\"}\n![](images/soil-sampling.jpg){style=\"border-radius:1em;margin-top:auto\"\nfig-alt=\"Jadey standing in a field of wheat stubble holding a 3 foot long soil sampling probe over her shoulder.\"}\n\n![](images/rangeland.jpg){fig-alt=\"Jadey standing in a grazed wildflower meadow with two colleagues collecting soil samples.\"\nstyle=\"border-radius:1em;margin-top:auto\"}\n:::\n\n{{< fa camera title=\"Photo credit\" >}} [@leslie.mmichel](https://twitter.com/leslie_mmichel)\n:::\n:::\n\n## Logistics\n\nLogin to Posit Cloud workspace:\n\n[**https://posit.cloud/spaces/504211/content/8064826**](https://posit.cloud/spaces/504211/content/8064826){.uri}\n\n<br>\n\n. . .\n\nIf Posit Cloud doesn't work, download materials locally:\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_course(\n  \"https://github.com/jadeynryan/parameterized-quarto-workshop/raw/coa-ceds/exercises/exercises.zip\"\n#  ,destdir = \"___\"\n  )\n```\n:::\n\n<br>\n\n. . .\n\nAsk questions in the public Zoom chat or raise hand ‚úã.\n\n<br>\n\n. . .\n\n**Workshop structure**: presentation, üíÉüèª demos, üí™üèª exercises\n\n# üí™üèº Exercise 0 {.exercise}\n\n<br>\n\nüí¨ **Chat**: \n\n-   Your name\n\n-   Which community project you're working on\n\n-   One thing you've made that you're proud of\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_14418b69\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">01</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n## Learning objectives\n\n::: incremental\n\n-   Learn what Quarto is and what you can use it for.\n\n<br>\n\n-   Learn how to weave code and text together to create a fully reproducible\n    report.\n\n<br>\n\n-   Learn how to use parameters to create variations of a report.\n\n:::\n\n# Syntax and RStudio aside {.section}\n\n## Pipes\n\n-   2014+ magrittr pipe `%>%`\n\n-   2021+ (R $\\geq$ 4.1.0) native R pipe `|>`\n\n. . .\n\nIsabella Vel√°squez's blog post [*Understanding the native R pipe*\n\\|\\>](https://ivelasq.rbind.io/blog/understanding-the-r-pipe/) (2022)\n\n<br>\n\n. . .\n\n::: columns\n::: {.column width=\"50%\"}\n::: {.cell}\n\n```{.r .cell-code}\ndo_something(arg1, arg2, arg3, ...)\n\narg1 |>  \n  do_something(arg2, arg3)\n```\n:::\n:::\n\n::: {.column width=\"5%\"}\n:::\n\n::: {.column width=\"45%\"}\n::: {.cell}\n\n```{.r .cell-code}\nmean(0:10)\n\n0:10 |> \n  mean()\n```\n:::\n:::\n:::\n\n. . .\n\n<br>\n\nTo change shortcut to the native pipe:\n\n`Tools` ‚Üí `Global Options` ‚Üí `Code` ‚Üí `Editing` ‚Üí `Use Native Pipe Operator`\n\nWindows: `Ctrl` + `Shift` + `M`\n\nMac: `Cmd` + `Shift` + `M`\n\n::: footer\nSlide adapted from [R/Medicine Data Cleaning 2023\nWorkshop](https://shannonpileggi.github.io/rmedicine-data-cleaning-2023/)\n:::\n\n## Namespacing\n\n`package::function()`\n\n`dplyr::select()`\n\n. . .\n\n-   tells R explicitly to use the function `select` from the package `dplyr`\n\n-   helps avoid name conflicts (e.g., `MASS::select()`)\n\n-   does not require `library(dplyr)`\n\n. . .\n\n::: columns\n::: {.column width=\"45%\"}\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\nmtcars |>  \n  select(mpg, cyl) \n```\n:::\n:::\n\n::: {.column width=\"5%\"}\n:::\n\n::: {.column width=\"50%\"}\n::: {.cell}\n\n```{.r .cell-code}\n# library(dplyr) not needed\n\nmtcars |>  \n  dplyr::select(mpg, cyl) \n```\n:::\n:::\n:::\n\n::: footer\nSlide adapted from [R/Medicine Data Cleaning 2023\nWorkshop](https://shannonpileggi.github.io/rmedicine-data-cleaning-2023/)\n:::\n\n## RStudio options\n\n`Tools` ‚Üí `Global Options` ‚Üí\n\n::: incremental\n-   Fussy YAML indentation:\n\n    `Code` ‚Üí `Display` ‚Üí `Indentation guides:` ‚Üí `Rainbow lines`\n\n<br>\n\n-   Match parentheses:\n\n    `Code` ‚Üí `Display` ‚Üí `Indentation guides:` ‚Üí Check `Use rainbow parentheses`\n\n<br>\n\n-   Matching divs:\n\n    `R Markdown` ‚Üí `Advanced` ‚Üí Check `Use rainbow fenced divs`\n:::\n\n# R Markdown ‚Üí Quarto {.section}\n\n## R Markdown is an authoring framework supported by many R packages\n\n![Figure from \"Hello, Quarto\" keynote by Julia Lowndes and Mine √áetinkaya-Rundel, presented at RStudio::Conf(2022).](images/rmd-ecosystem.png){style=\"margin-top:-5em;margin-bottom:-1em\" fig-alt=\"Hex logos for various packages from the R Markdown ecosystem.\" fig-align=\"center\" width=\"700\"}\n\n## Quarto is a publishing system that supports many multiple & outputs\n\n::: r-stack\n![Artwork from \"Hello, Quarto\" keynote by Julia Lowndes and Mine √áetinkaya-Rundel, presented at RStudio::Conf(2022). Illustrated by Allison Horst.](images/horst-quarto-schematic.png){.fragment .fade-out fragment-index=\"1\" fig-alt=\"A schematic representing the multi-language input (e.g. Python, R, Observable, Julia) and multi-format output (e.g. PDF, html, Word documents, and more) versatility of Quarto.\" fig-align=\"center\" style=\"margin-top:-1.5em;margin-bottom:-1em\"}\n\n![](images/horst-qmd-render-schema.png){.fragment fragment-index=\"1\" fig-alt=\"A schematic representing rendering of Quarto documents from .qmd, to knitr or jupyter, to plain text markdown, then converted by pandoc into any number of output types including html, PDF, or Word document.\" fig-align=\"center\" style=\"margin-top:-1.5em;margin-bottom:-1em\"}\n:::\n\n## R Markdown vs Quarto\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/rmarkdown.png){width=\"150\" style=\"float:left;padding: 0 1em 0 0\"}\n\n### R Markdown\n\n-   Vast R Markdown ecosystem\n\n-   Dependent on R\n:::\n\n::: {.column width=\"50%\"}\n![](images/quarto.png){width=\"150\" style=\"float:left;padding: 0 1em 0 0\"}\n\n### Quarto\n\n-   Command line interface (CLI)\n\n-   Expands R Markdown ecosystem\n\n-   \"Batteries included\"\n\n-   Multi-language and multi-engine\n:::\n:::\n\n. . .\n\n<br>\n\n**If you're happy with R Markdown and it's not broken, no need to switch!**\n\n. . .\n\n<br>\n\nR Markdown will still be maintained but likely no new features [(Xie 2022)](https://yihui.org/en/2022/04/quarto-r-markdown/).\n\n## Convert `.Rmd` ‚Üí `.qmd`\n\n1.  Change file extension from `.Rmd` ‚Üí `.qmd`\n2.  Change YAML header (`output:` ‚Üí `format:`)\n3.  Convert chunk headers with `knitr::convert_chunk_header()`\n\n. . .\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n\n**R Markdown**\n\n::: {.cell}\n\n````{.cell-code}\n```{{r, label=rmarkdown, eval=FALSE}}\n# code\n```\n````\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n**Quarto**\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: quarto\n#| eval: false\n\n# code\n```\n````\n:::\n\n:::\n::::\n\n. . .\n\nüÜï **Shiny app to convert R Markdown to Quarto** ‚ú®\n\nApp: <https://mounaabelaid.shinyapps.io/RMarkdown2Quarto>\n\nRepo: <https://github.com/MounaBelaid/RMarkdown2Quarto>\n\n## Real-life applications of Quarto\n\n-   This workshop's website is built with Quarto\n\n-   My personal website is built with Quarto\n\n-   This presentation is built with the `revealjs` format\n\n-   Quality control summary report for soil samples\n\n-   Soil health reports for the Washington Soil Health Initiative\n\n-   Gallery of Quarto websites\n\n-   Manuscripts and academic posters\n\n## One sad difference üò• {visibility=\"hidden\"}\n\nNo Quarto equivalent to .Rmd [Knit with Parameters GUI](https://bookdown.org/yihui/rmarkdown/params-knit.html#the-interactive-user-interface) built with Shiny [{miniUI}](https://github.com/rstudio/miniUI).\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n![Figure from [*R Markdown: The Definitive Guide* (Xie et al. 2023)](https://bookdown.org/yihui/rmarkdown/params-knit.html#the-interactive-user-interface)](https://bookdown.org/yihui/rmarkdown/images/params-input.png){fig-alt=\"Input parameter values interactively for parameterized reports.\" fig-align=\"left\"}\n:::\n\n::: {.column width=\"50%\"}\n\n<br>\n\n**Workaround**: build web app to get input, serialize to YAML, pass to Quarto render.\n\n**More info**: [GitHub discussion](https://github.com/quarto-dev/quarto-cli/discussions/7581#discussioncomment-7603016)\n:::\n\n::::\n\n## Resources for R Markdown users\n\n- [From R Markdown to Quarto workshop](https://quarto.org/docs/blog/posts/2023-12-05-asa-traveling-courses/) taught by Dr. Mine √áetinkaya-Rundel and Dr. Andrew Bray.\n\n- [Quarto FAQ for R Markdown Users](https://quarto.org/docs/faq/rmarkdown.html)\n\n- Ted Laderas' talk [Quarto / R Markdown - What's Different?](https://laderast.github.io/qmd_rmd)\n\n# Get started with Quarto {.section}\n\n# {background-iframe=\"https://quarto.org/docs/get-started/\" background-interactive=true}\n\n## Create a single Quarto document\n\nOne `.qmd` file for a report, presentation, or dashboard\n\n**File** > **New File** > **Quarto Document...**\n\n![](images/new-quarto-doc.png){fig-alt=\"Pop up menu for creating a new document. The title field shows that we entered &quot;2024 Sampling Report&quot; and the author field shows the name &quot;Jadey Ryan&quot;. HTML format is selected via the radio button.\"}\n\n## Create a Quarto project\n\nMultiple `.qmd` files for a website, blog, or book\n\n**File** > **New Project** > **New Directory** > **Quarto Project/Website/Blog/Book**\n\n![](images/quarto-project.png){fig-alt=\"Pop up menu for creating a new project in a new directory. A list of Project Types are presented with Quarto Project, Quarto Website, Quarto Blog, and Quarto Book highlighted.\"}\n\n## Authoring\n\nToggle between **Visual** and **Source** modes with ‚åò‚áß F4 or Ctrl+Shift+F4.\n\n![](images/rstudio-source-visual.png){fig-alt=\"On the left: Document in the visual editor. On the right: Same document in the source editor. The visual/source editor toggle is highlighted in both documents marking their current state. The document shown is the \\\"Hello Quarto\\\" document from a previous image on the page.\"}\n\n::: footer\nImage adapted from [Tutorial: Hello, Quarto](https://quarto.org/docs/get-started/hello/).\n:::\n\n## Rendering\n\nUse the ![](images/rstudio-render-button.png){fig-alt=\"Quarto render button in RStudio\" style=\"vertical-align:middle;\" width=\"49\"} **Render** button to render the file and preview the output.\n\nKeyboard shortcut: ‚åò‚áßK or Ctrl+Shift+K\n\n![](images/rstudio-render.png){fig-alt=\"Top of the text editor in RStudio with the Render button highlighted with a purple box.\"}\n\n. . .\n\nCheck the **Render on Save** option to automatically render and update the preview after saving.\n\n![](images/rstudio-render-on-save.png){fig-alt=\"Top of the text editor in RStudio with the Render on Save checkbox checked and highlighted with a purple box.\"}\n\n. . .\n\nUse the **`quarto` package** in the Console `quarto::quarto_render(\"hello.qmd\")`.\n\n. . .\n\nUse the **CLI** in the Terminal `quarto render hello.qmd`.\n\n::: footer\nImages from [Tutorial: Hello, Quarto](https://quarto.org/docs/get-started/hello/).\n:::\n\n# Anatomy of a `.qmd` file {.section}\n\n1. YAML header (metadata and document options)\n\n2. Narrative (text)\n\n3. Code chunks (import, wrangle, visualize data)\n\n## 1. YAML header\n\n-   Metadata and options for document ([HTML](https://quarto.org/docs/reference/formats/html.html){preview-link=\"true\"}, [PDF](https://quarto.org/docs/reference/formats/pdf.html){preview-link=\"true\"}, [MS Word](https://quarto.org/docs/reference/formats/docx.html){preview-link=\"true\"})\n\n-   Demarcated by three dashes (`---`) on the top and bottom\n\n-   Uses key-value pairs in the format `key: value`\n\n    -   Careful with indentation!\n\n``` yaml\n---\ntitle: 2024 Sampling Report   # metadata\nauthor: Jadey Ryan\ndate: 2024-04-25\nformat:                       # format type and options\n  html:                       # specify HTML output\n    theme: flatly             # additional options for HTML format\nexecute:                      # global code chunk options\n  echo: false                 # hide code in final report\n---\n```\n\n## YAML intelligence\n\nYAML code completion is available for project files, YAML front matter, and executable cell options:\n\n![](images/rstudio-yaml-completion.png){fig-alt=\"Quarto document with YAML being edited. Next to the cursor code completion helper is open showing YAML options beginning with the letters preceding the cursor ('to').\"}\n\n::: footer\nContent and image adapted from [YAML Intelligence on quarto.org](https://quarto.org/docs/tools/rstudio.html#yaml-intelligence).\n:::\n\n## YAML intelligence\n\nIncorrect YAML is highlighted when documents are saved:\n\n![](images/rstudio-yaml-diagnostics.png){fig-alt=\"Quarto document YAML metadata with an incorrect option underlined in red.\"}\n\n::: footer\nContent and image adapted from [YAML Intelligence on quarto.org](https://quarto.org/docs/tools/rstudio.html#yaml-intelligence).\n:::\n\n## 2. Narrative\n\nMarkdown syntax for:\n\n::: incremental\n\n-   Text with formatting: `**bold**` &rarr; **bold**\n\n-   Section headers: `# Header 1`, `# Header 2`\n\n-   Hyperlinks: `[google.com](https://google.com)` &rarr; [google.com](https://google.com)\n\n-   Images: `![](image.png)`\n\n-   Inline code: ``` `{r} Sys.Date()` ``` &rarr; ``2024-04-23``\n\n-   Inline math: ``` `$E = mc^{2}$` ``` &rarr; $E = mc^{2}$\n\n<br>\n\n-   [**Guide to markdown syntax**](https://quarto.org/docs/authoring/markdown-basics.html){preview-link=\"true\"}\n:::\n\n## 3. Code chunks\n\n**Three ways to insert code chunks:**\n\n1.    Keyboard shortcut ‚åò‚å•I or Ctrl+Alt+I.\n\n2.    ![](images/rstudio-insert-chunk.png){fig-alt=\"Insert Chunk button in RStudio\" style=\"vertical-align:middle;\" width=\"49\"}**Insert Chunk** button in the editor toolbar.\n\n3.    Manually type the chunk delimiters ```` ```{r} ```` and ```` ``` ````.\n\n. . .\n\n**Two ways to run code chunks:**\n\n1.    Use the **Run Current Chunk** or **Run All Chunks Above** buttons.\n\n      ![](images/rstudio-code-chunk.png){fig-alt=\"Code chunk in RStudio with the Run All Chunks Above and Run Current Chunk buttons highlighted and labelled.\"}\n\n2.    Run the current code chunk with ‚åò‚áß‚èé or Ctrl+Shift+Enter.\n\n## Optional code chunk labels\n\nUse the hash pipe syntax (`#|`) to specify labels.\n\n**Labels for better documentation and navigation**.\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: simple-addition\n\n1 + 1\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n. . .\n\n![Figure from [Chapter 28 of *R4DS*](https://r4ds.hadley.nz/quarto#chunk-label)](images/quarto-chunk-nav.png){fig-align=\"left\" fig-alt=\"Snippet of RStudio IDE showing only the drop-down code navigator which shows three chunks. Chunk 1 is setup. Chunk 2 is cars and it is in a section called Quarto. Chunk 3 is pressure and it is in a section called Including plots.\"}\n\n## Optional code chunk options\n\nUse the hash pipe syntax (`#|`) to specify options.\n\n**Options for code execution, what is included in the rendered report, layout, captions, etc.**\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: simple-multiplication\n#| eval: false\n\n2 * 3\n```\n````\n:::\n\n-   `eval: false` prevents code from being evaluated and does not generate results.\n    Use this to display example code or disable a code block.\n\n-   `echo: false` prevents code, but not the results from appearing in the report.\n    Use this when writing reports aimed at people who don't want to see the underlying R code.\n\n-   [Full list of options](https://yihui.org/knitr/options/){preview-link=\"true\"}.\n\n::: footer\nContent adapted from [Chapter 28 of *R4DS*](https://r4ds.hadley.nz/quarto#chunk-label).\n:::\n\n## Global options\n\nUse for chunk options you want to apply to all chunks by default.\n\n**Code execution options:**\n\n``` yaml\n---\ntitle: \"Report for audience that doesn't need to see the code\"\nexecute:\n  echo: false\n---\n```\n\n<br>\n\n. . .\n\n**Some global options relevant only to R must be set under the `knitr` field, under `opts_chunk`:**\n\n``` yaml\n---\ntitle: \"Report with all plots centered\"\nknitr:\n  opts_chunk:\n    fig.align: \"center\"\n---\n```\n::: footer\nContent adapted from [Chapter 28 of *R4DS*](https://r4ds.hadley.nz/quarto#chunk-label).\n:::\n\n# Parameterized reports {.section}\n\n## Many use cases\n\n::: columns\n::: {.column width=\"25%\"}\n![](images/ocean-floor.png){.lightbox group=\"examples\"\nfig-alt=\"RStudio R Markdown parameterized report project for mapping ocean floors.\"}\n\n[Ocean floor maps](https://rmarkdown.rstudio.com/lesson-6.html)\n:::\n\n::: {.column width=\"25%\"}\n![](images/urban-institute.png){.lightbox group=\"examples\"\nfig-alt=\"Report for Alabama spending with text and plots generated from parameterized R Markdown.\"}\n\n[Fiscal\nbriefs](https://book.rwithoutstatistics.com/parameterized-reports-chapter.html)\n:::\n\n::: {.column width=\"25%\"}\n![](images/driver-quality.png){.lightbox group=\"examples\"\nfig-alt=\"Report for Alaska driver quality with text, plot, and table generated from parameterized RMarkdown.\"}\n\n[Bad\ndrivers](https://urban-institute.medium.com/iterated-fact-sheets-with-r-markdown-d685eb4eafce)\n:::\n\n::: {.column width=\"25%\"}\n![](images/soils-report.png){.lightbox group=\"examples\"\nfig-alt=\"HTML report for soil health survey participant, generated from a parameterized Quarto report.\"}\n\n[Soil health](https://wa-department-of-agriculture.github.io/soils/)\n:::\n:::\n\n. . .\n\n<br>\n\n**Different audiences, different reports**\n\nShow code for technical staff and hide code for everyone else ([StackOverflow\nexample](https://stackoverflow.com/questions/73571919/how-to-pass-logical-parameters-with-the-quarto-r-package-to-the-knitr-chunk-opti)).\n\n## Like a custom function\n\n::: r-stack\n![](images/template1.png){.fragment\nfig-alt=\"File with the word '.qmd' inside and the word 'Function' above.\"\nwidth=\"1300\" fig-align=\"left\" style=\"margin-top:-1em\"}\n\n![](images/template2.png){.fragment\nfig-alt=\"An arrow points from 'Input' with 'params$year' to the previous image with 'Function' and '.qmd' file.\"\nwidth=\"1300\" fig-align=\"left\" style=\"margin-top:-1em\"}\n\n![](images/template3.png){.fragment\nfig-alt=\"In addition to the previous two images, arrows point to five reports with years 2019 through 2023 on them in a flow chart.\"\nwidth=\"1300\" fig-align=\"left\" style=\"margin-top:-1em\"}\n:::\n\n## What makes a report \"parameterized\"?\n\n-   YAML header with `params` key-value pairs\n\n    -   Yet Another Markdown Language ‚Üí YAML Ain't Markup Language\n\n-   Use these `params` in your report to create different variations.\n\n. . .\n\n::: callout-important\n-   Valid parameter values are strings, numbers, or Boolean.\n\n-   Must serialize a dataframe to pass it as a parameter, then un-serialize it\n    back to a dataframe within the `.qmd` content.\n\n-   See [Christophe Dervieux's answer in Posit\n    Community](https://community.rstudio.com/t/param-converted-from-data-frame-to-list/155556/9)\n    to understand why.\n\n-   See [John Paul Helveston's blog\n    post](https://www.jhelvy.com/posts/2023-02-28-parameterized-pdfs-with-quarto/#passing-data-frames-as-parameters)\n    to learn how to use {jsonlite} as a workaround.\n:::\n\n## Workflow\n\n::: incremental\n1.  Write report template with default values hard-coded, and then render & review.\n\n2.  Set default `params` key-value pairs in YAML. \n\n3. Replace hard-coded values with the `params` variables.\n\n4.  Render the single report and review.\n\n5.  Render extreme cases and review.\n\n    -   Parameter values with barely any data and with tons of data.\n\n6.  Render all variations of the report at once.\n:::\n\n# üí™üèº Exercise 1 {.exercise}\n\n**Explore a report without parameters and see where we could add them.**\n\n1.  Open `ex-1-swiss-cats.qmd`.\n\n2.  Click the\n    ![](https://quarto.org/docs/get-started/hello/images/rstudio-render-button.png){fig-alt=\"Quarto render button in RStudio\"\n    style=\"vertical-align:middle;\" width=\"49\"} **Render** button.\n\n3.  Look at the source markdown & code and the rendered report.\n\n4.  üí¨ **Chat**: what variables could we set as parameters?\n\n    üí° **Hint**: run the `setup` chunk and look at the `pets` dataframe to see\n    what variables it has.\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_15a9e2f6\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n## Set `params` in YAML header\n\n::: {.cell}\n\n```{.yaml .cell-code  code-line-numbers=\"2|3-5|6-8|11\"}\n---\ntitle: \"Swiss Cats\"             # Metadata\nformat:                         # Set format types\n  html: default                                     \n  docx: default                           \nparams:                         # Set default parameter key-value pairs\n  fave_breed: \"Snowshoe\"                                \n---\n    \nReport content goes here.       # Write content\n```\n:::\n\n. . .\n\n::: callout-important\nYour default `params` key-value pairs must be found in your dataset. Otherwise, code will error or output will be blank.\n\nThe variable name for `params` can be anything you choose. Often, it's a column name in your dataset.\n:::\n\n## Access `params`\n\n\n\nRun any line or chunk to add `params` to your environment.\n\n. . .\n\n`params` object is a list.\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(params)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 1\n $ fave_breed: chr \"Snowshoe\"\n```\n:::\n:::\n\n<br>\n\n. . .\n\nAccess with `$` notation.\n\n::: {.cell}\n\n```{.r .cell-code}\nparams$fave_breed\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Snowshoe\"\n```\n:::\n:::\n\n<br>\n\n. . .\n\nFor inline code in YAML or report content, enclose the expression in `` `r ` ``.\n\n::: {.cell}\n\n```{.markdown .cell-code}\nMy favorite cat breed is the **`r params$fave_breed`**.\n```\n:::\n\nMy favorite cat breed is the **Snowshoe**.\n\n## Replace hard-coded values with `params`\n\n::: incremental\n-   `Cmd`/`Ctrl` + `F` to find where to replace hard-coded values with `params`.\n\n<br>\n\n-   Use inline R code for markdown.\n\n    ::: {.cell}\n    \n    ```{.markdown .cell-code}\n    ## My favorite breed: `r params$fave_breed`\n    ```\n    :::\n\n<br>\n\n-   Use `paste()` or `glue()` for plot and table titles and labels.\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # ggplot code +\n    labs(title = paste(params$fave_breed, \"population\"))\n    ```\n    :::\n:::\n\n##\n\n![](images/snowshoe-graph.png){fig-align=\"center\"}\n\n# üíÉüèª Demo {.demo}\n\nModify `ex-1-swiss-cats.qmd` to add `pet_type` and `fave_breed` parameters.\n\n# Rendering reports {.section}\n\n## Four ways to render \n\n::: incremental\n1. ![](https://quarto.org/docs/get-started/hello/images/rstudio-render-button.png){fig-alt=\"Quarto render button in RStudio\" style=\"vertical-align:middle;\" width=\"49\"} **Render** button in RStudio or `Cmd`/`Ctrl` + `Shift` + `K` keyboard shortcut\n\n2. Check `Render on Save` and `Cmd`/`Ctrl` + `S` keyboard shortcut\n\n3. Quarto CLI\n\n    ```{.bash filename=\"Terminal\"}\n    quarto render ex-2-quarto-render.qmd -P pet_type:'cats' -P fave_breed:'Snowshoe'\n    ```\n\n4. ‚ú® `quarto::quarto_render()`\n\n    ```{.r filename=\"Console or R script\"}\n    quarto::quarto_render(\n      input = here::here(\"ex-2-quarto-render.qmd\"), # Input Quarto file\n      execute_params = list(                        # Named list of params\n        pet_type = \"cats\",\n        fave_breed = \"Snowshoe\"))\n    ```\n:::\n\n# üí™üèº Exercise 2.1 {.exercise}\n\n**Change parameters in the YAML and render using ![](https://quarto.org/docs/get-started/hello/images/rstudio-render-button.png){fig-alt=\"Quarto render button in RStudio\" style=\"vertical-align:middle;\" width=\"49\"} Render button.**\n\n1. Look at the unique pet breeds and pick your favorite.\n   ```r\n   # Run in the console\n   pets <- readr::read_rds(here::here(\"data\", \"pets.RDS\")) |> \n      dplyr::distinct(pet_type, breed) |> View()\n   ```\n   \n2. In `ex-2-quarto-render.qmd` Change the default parameters in the YAML to your favorite pet type and breed. Render using the ![](https://quarto.org/docs/get-started/hello/images/rstudio-render-button.png){fig-alt=\"Quarto render button in RStudio\" style=\"vertical-align:middle;\" width=\"49\"} **Render** button.\n\n    ```yaml\n    params:\n      pet_type: \"___\"\n      fave_breed: \"___\"\n    ```\n\n3. üí¨ **Chat**: do you have any pets? what kind? üêàüêïüêπüêçüê†\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_7490fa15\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n# üí™üèº Exercise 2.2 {.exercise}\n\n**Change parameters and render using `quarto_render()`.**\n\n1. Render with `quarto::quarto_render()`.\n\n   ```r\n   # Run in the console\n    quarto::quarto_render(\n      input = here::here(\"ex-2-quarto-render.qmd\"),\n      execute_params = list(\n        pet_type = \"___\",\n        fave_breed = \"___\"))\n   ```\n\n2. üí¨ **Chat**: what kinds of variables are you hoping to use as parameters for your reports? \n\n*5-min break after this exercise*\n   \n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_80090789\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n# ü•± Break {.section}\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_8af7bbac\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n## Render all 538 reports \n\nOne HTML report for each cat breed and each dog breed.\n\n:::: panel-tabset\n\n## üìä Data\n\n::: {.cell}\n\n```{.r .cell-code}\npets <- readr::read_rds(here::here(\"data\", \"pets.RDS\"))\n\npets |>\n  dplyr::distinct(pet_type, breed) |>\n  dplyr::count(pet_type) |>\n  janitor::adorn_totals()\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|pet_type |   n|\n|:--------|---:|\n|cats     | 104|\n|dogs     | 434|\n|Total    | 538|\n\n</div>\n:::\n:::\n\n## üë∑üèº‚Äç‚ôÇÔ∏è Manual 1\n\n1. Change the default `params` in the YAML.\n\n2. **Render** button or `Cmd`/`Ctrl` + `Shift` + `K` keyboard shortcut.\n\n3. Rename the rendered report to include the parameter & prevent overwriting.\n\n4. Repeat 537 times.\n\nüò≠\n\n## üë∑üèª‚Äç‚ôÄÔ∏è Manual 2\n\n::: {.cell}\n\n```{.r .cell-code}\nquarto::quarto_render(\n  input = here::here(\"ex-2-quarto-render.qmd\"),\n  output_file = \"dogs-affenpinscher-report.html\",\n  execute_params = list(\n    pet_type = \"dogs\",\n    fave_breed = \"Affenpinscher\"))\n\nquarto::quarto_render(\n  input = here::here(\"ex-2-quarto-render.qmd\"),\n  output_file = \"dogs-afghan-hound-report.html\",\n  execute_params = list(\n    pet_type = \"dogs\",\n    fave_breed = \"Afghan Hound\"))\n\nquarto::quarto_render(\n  input = here::here(\"ex-2-quarto-render.qmd\"),\n  output_file = \"dogs-aidi-chien-de-montagne-de-l-atlas-report.html\",\n  execute_params = list(\n    pet_type = \"dogs\",\n    fave_breed = \"Aidi Chien De Montagne De L Atlas\"))\n\nquarto::quarto_render(\n  input = here::here(\"ex-2-quarto-render.qmd\"),\n  output_file = \"dogs-akita-report.html\",\n  execute_params = list(\n    pet_type = \"dogs\",\n    fave_breed = \"Akita\"))\n\n# + 534 more times... \n# üò≠\n```\n:::\n\n## ‚ö° Programatically\n\n**Create a dataframe with three columns that match `quarto_render()` args:**\n\n- `output_format`: file type (html, revealjs, pdf, docx, etc.)\n\n- `output_file`: file name with extension\n\n- `execute_params`: named list of parameters\n\n**Map over each row:**\n\n- `purrr::pwalk(dataframe, quarto_render, quarto_render_args)` \n\nüòé\n::::\n\n## Create dataframe to iterate over\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2|4|5-9|11-14|\"}\npet_reports <- pets |>\n  dplyr::distinct(pet_type, breed) |>   # Get distinct pet/breed combos\n  dplyr::mutate(\n    output_format = \"html\",             # Make output_format column\n    output_file = paste(                # Make output_file column:\n      tolower(pet_type),                # cats-abyssiniane-report.html\n      tolower(gsub(\" \", \"-\", breed)),           \n      \"report.html\",\n      sep = \"-\"\n    ),\n    execute_params = purrr::map2(       # Make execute_params column\n      pet_type,\n      breed,\n      \\(pet_type, breed) list(pet_type = pet_type, breed = breed)))\n```\n:::\n        \n## Subset to first 2 cat/dog breeds\n\n::: {.cell}\n\n```{.r .cell-code}\npet_reports_subset <- pet_reports |>\n  dplyr::slice_head(n = 2, by = pet_type) |>\n  dplyr::select(output_file, execute_params)\n\npet_reports_subset\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|output_file                    |execute_params               |\n|:------------------------------|:----------------------------|\n|cats-abyssiniane-report.html   |cats       , Abyssiniane     |\n|cats-aegean-cat-report.html    |cats      , Aegean Cat       |\n|dogs-affenpinscher-report.html |dogs         , Affenpinscher |\n|dogs-afghan-hound-report.html  |dogs        , Afghan Hound   |\n\n</div>\n:::\n:::\n\n## Map over each row \n\n::: incremental\n-   `purrr::pwalk()` iterates over multiple arguments simultaneously.\n\n-   First `.l` argument is a *list of vectors*. \n\n    - Dataframe is a special case of `.l` that iterates over rows.\n:::\n. . .\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2|3|4|5|\"}\npurrr::pwalk(\n  .l = pet_reports_subset,                      # Dataframe to map over\n  .f = quarto::quarto_render,                   # Function we are applying to each row\n  input = here::here(\"ex-2-quarto-render.qmd\"), # Named arguments of .f\n  .progress = TRUE                              # Show a progress bar :)\n)\n```\n:::\n\n. . .\n\n::: callout-note\n`index` is the only named argument of `quarto_render()` included in `pwalk()`.\n\n\n`output_format`, `output_file`, and `execute_params` are already passed in through the dataframe.\n:::\n\n# Multiple formats {.section}\n\n## Render all reports to all formats\n\nAdd to the `format:` YAML option to render additional output formats from the same `.qmd` file.\n\n``` yaml\n---\nformat:\n  html: \n    embed-resources: true   # Makes the report self-contained\n  pdf: default              # If not using any additional format options,\n  docx: default             # set value to `default`  \n---\n```\n\n. . .\n\n**Note**: the Render button now has a dropdown!\n\n![](images/render-button.png){width=60% fig-alt=\"Screenshot of Quarto file with the Render dropdown showing options for HTML, PDF, and MS Word formats.\"}\n\n[Quarto docs on multiple formats](https://quarto.org/docs/get-started/authoring/rstudio.html#multiple-formats)\n\n## Format links for HTML output\n\nLinks to download the other formats will automatically appear in HTML documents.\n\n![](images/other-formats.png){fig-alt=\"Screenshot of a HTML page that includes links to the PDF and MS Word formats in the table of contents under the heading Other Formats.\" style=\"border-radius:1em\"}\n\n## Format link options\n\n**Choose which format links to include:**\n\n::: {.cell}\n\n```{.yaml .cell-code  code-line-numbers=\"7\"}\n---\nformat:\n  html: \n    embed-resources: true\n  pdf: default\n  docx: default\nformat-links: [pdf]\n---\n```\n:::\n\n. . .\n\n**Or hide all links:**\n\n::: {.cell}\n\n```{.yaml .cell-code  code-line-numbers=\"7\"}\n---\nformat:\n  html: \n    embed-resources: true\n  pdf: default\n  docx: default\nformat-links: false\n---\n```\n:::\n\n# üíÉüèª Demo {.demo}\n\nDemo programmatically rendering all reports in all formats in `ex-3-render-reports.R`.\n\n# üí™üèº Exercise 3 {.exercise}\n\n**Explore the programmatic way of rendering multiple reports at once.**\n\n1. Look through `ex-3-render-reports.qmd` and `ex-3-render-reports.R`.\n\n2. `Source` the R script (or run line by line).\n\n3. üí¨ **Chat**: were any of these functions from the `.qmd` or `.R` files new to you?\n\n4. Ask questions or take a break. üòä\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_b1a4979f\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n## Watchouts\n\n::: incremental\n\n-   Can't render reports to another directory.\n\n    - [`output-dir` YAML option](https://quarto.org/docs/books/book-output.html#output-path) only works for *Quarto projects* that contain a `_quarto.yml` config file.\n\n    - **Workaround**: use [`{fs}`](https://fs.r-lib.org/) to move files after rendering. \n      \n      See `ex-3-render-reports.R` for example.\n    \n    - **More info**: [GitHub discussion](https://github.com/quarto-dev/quarto-cli/discussions/2171#discussioncomment-4865286) and [GitHub issue](https://github.com/quarto-dev/quarto-r/issues/81).\n\n<br>\n\n- If using `embed-resources: true` YAML option, `.qmd` can't be in subfolder, otherwise: \n\n    - [[WARNING] Could not fetch resource ...]{.warning}\n\n    - **More info**: [GitHub discussion](https://github.com/quarto-dev/quarto-cli/discussions/4041#discussioncomment-6052000) and [GitHub issue](https://github.com/quarto-dev/quarto-cli/issues/5765).\n:::\n\n---\nexecute:\n  eval: false\n---\n\n# Conditional content {.section}\n\n## Control content visibility\n\nSpecial `.content-visible` and `.content-hidden` classes with `when-format=\"___\"` and `unless-format=\"___\"` attributes can be applied to:\n\n::: panel-tabset\n\n## Divs\n\n```markdown\n::: {.content-visible when-format=\"html\"}\n\nWill only appear in HTML.\n\n:::\n```\n\n## Spans\n\n``` markdown\nSome text\n[in HTML.]{.content-visible when-format=\"html\"}\n[in PDF.]{.content-visible when-format=\"pdf\"}\n```\n\n## Non-executable code\n\nFenced code blocks purely for documentation.\n\n````markdown\n```{.python .content-visible when-format=\"html\"}\n# code shown only in HTML\n2 + 2\n```\n````\n\n:::\n\n::: footer\nExamples from [Conditional Content Quarto docs](https://quarto.org/docs/authoring/conditional.html)\n:::\n\n## Useful for static/interactive features\n\nPairs well with `{{< include >}}` shortcodes to re-use content without copying/pasting.\n\n. . .\n\n::::: panel-tabset\n\n## Static\n\n```markdown\n:::: {.content-visible unless-format=\"html\"}\n\n## Cats\n\n{{{< include _cats.qmd >}}}\n\n## Dogs\n\n{{{< include _dogs.qmd >}}}\n\n::::\n```\n\n## Interactive\n\n```markdown\n:::: {.content-visible when-format=\"html\"}\n::: panel-tabset\n\n## Cats\n\n{{{< include _cats.qmd >}}}\n\n## Dogs\n\n{{{< include _dogs.qmd >}}}\n\n:::\n::::\n```\n:::::\n\n. . .\n\nUse an underscore prefix for included files so they are automatically ignored by a Quarto render of a project ([Includes Quarto Docs](https://quarto.org/docs/authoring/includes.html)).\n\n# üí™üèº Exercise 4 {.exercise}\n\n**Use conditional content divs to control when tabsets are shown.**\n\n1. Modify `ex-4-conditional-content.qmd` so that the `panel-tabset` is visible for HTML reports and hidden for all other formats.\n\n<br>\n\n2. Explore the other options. There are multiple ways to get the same result.\n\n    {.content-visible when-format=\"html\"} == {.content-hidden unless-format=\"html\"}\n    \n<br>\n \n3. üí¨ **Chat**: what other kinds of content might you want to make visible for only a certain format?\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_bb3798e4\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n## Conditional code execution\n\n::: incremental\n\n-   More efficient to not execute code that generates interactive outputs for static reports.\n\n-   Useful for executing interactive plot code for HTML reports and static `ggplot2` code for all other formats. \n\n-   Not currently a feature of Quarto v1.4. Follow along with this [GitHub discussion](https://github.com/quarto-dev/quarto-cli/discussions/3260#discussioncomment-4573926).\n\n:::\n\n## Workaround for conditional R code\n\nInclude in the setup chunk of your `.qmd` file.\n\nGet the format of the Pandoc output:\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: setup\n\n# Get output format\nformat <- knitr::opts_knit$get(\"rmarkdown.pandoc.to\")\n```\n````\n:::\n\n## Use `eval: !expr` chunk option\n\n::: panel-tabset\n\n## Static plot\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| eval: !expr format %in% c(\"latex\", \"docx\")\n\n# code to create static {ggplot2}\n```\n````\n:::\n\nüí° Pandoc uses LaTeX to create PDFs.\n\n## Interactive plot\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| eval: !expr format == \"html\"\n\n# code to create interactive {plotly}\n```\n````\n:::\n\n:::\n\n<br>\n\n. . .\n\n**Can even use `params` in `!expr`:**\n\n``` r\n#| eval: !expr params$fave_breed == \"Snowshoe\"\n```\n\n. . .\n\n<br>\n\n[Chunk Options Quarto Docs](https://quarto.org/docs/computations/r.html#chunk-options)\n\n# üí™üèº Exercise 5 {.exercise}\n\n<br>\n\n**Conditionally execute `ggplot2` code for static reports & `plotly` code for interactive reports.**\n\n1. Open `ex-5-conditional-code.qmd`.\n\n2. Fill in the blanks for the `eval: ` option for `ggplot` code chunks and `plotly` code chunks.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Options are html, latex, and docx.\n\n#| eval: !expr format == \"___\"\n\n#| eval: !expr format %in% c(\"___\", \"___\")\n```\n:::\n\n2. üí¨ **Chat**: what is something you learned from this workshop that you're excited to apply to your own reports and projects?\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_b755b327\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n# üèÅ Recap {.section}\n\n## Learning objective 1\n\n**Understand what parameterized reporting is and when it is useful.**\n\n. . .\n\n**Like very fancy custom functions:**\n\n::: incremental\n\n- Function &rarr; `.qmd` template\n\n- Input &rarr; parameters\n\n- Output &rarr; rendered reports\n:::\n\n. . . \n\n**Useful for creating variations of the same report:**\n\n-   country, state, county, or city\n\n-   time periods\n\n-   breeds, species, diseases, trials, etc.\n\n. . .\n\n::: callout-note\nWe only covered reports, but you can also parameterize `revealjs` presentations! See this [Jumping Rivers blog post](https://www.jumpingrivers.com/blog/r-parameterised-presentations-quarto/) about it.\n:::\n\n## Learning objective 2\n\n**Learn how to convert a report into a parameterized template.**\n\n::: incremental\n- Include default `params:` in YAML\n    \n- Replace hard-coded values with `params$pet_type`\n\n  - **YAML**: \n  \n    ::: {.cell}\n    \n    ```{.yaml .cell-code}\n    ---\n    title: \"Report about `r params$pet_type`\"\n    params:\n      pet_type: \"cats\"\n    ---\n    ```\n    :::\n    \n  - **Inline R code**: \n  \n    ::: {.cell}\n    \n    ```{.markdown .cell-code}\n    I like **`r params$pet_type`**.\n    ```\n    :::\n    \n  - **Code chunks**: \n  \n    ``` r\n    pets |> \n        dplyr::filter(pet_type == params$pet_type)\n    ```\n:::\n\n## Learning objective 3\n\n**Render all variations of the report at once using [{quarto}](https://quarto-dev.github.io/quarto-r/) and [{purrr}](https://purrr.tidyverse.org/). **\n\n::: {.fragment}\n1. Get all unique parameter combinations into a dataframe:\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(pet_reports, 1)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|pet_type |breed       |output_format |output_file                  |execute_params           |\n|:--------|:-----------|:-------------|:----------------------------|:------------------------|\n|cats     |Abyssiniane |html          |cats-abyssiniane-report.html |cats       , Abyssiniane |\n\n</div>\n:::\n:::\n:::\n\n<br>\n\n::: {.fragment}\n2. Use dataframe in `pwalk()` with `quarto_render()`:\n\n::: {.cell}\n\n```{.r .cell-code}\npurrr::pwalk(\n  pet_reports,\n  quarto::quarto_render,\n  input = here::here(\"pet_template.qmd\"),\n  .progress = TRUE\n)\n```\n:::\n:::\n\n## Learning objective 4\n\n**Generate multiple format outputs from the same template with conditional content and code.**\n\n::: {.fragment}\n\n#### Content visibility\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n - {.content-visible when-format=\"___\"}\n \n - {.content-visible unless-format=\"___\"}\n:::\n\n::: {.column width=\"50%\"}\n - {.content-hidden unless-format=\"___\"}\n \n - {.content-hidden unless-format=\"___\"}\n:::\n::::\n\n:::\n\n::: {.fragment}\n\n#### Code execution\n\n```r\n#| label: setup\n\nformat <- knitr::opts_knit$get(\"rmarkdown.pandoc.to\")\n```\n\n```r\n#| label: interactive-plot\n#| eval: !expr format == \"html\"\n\n# plotly code\n```\n\n```r\n#| label: static-plot\n#| eval: !expr format %in% c(\"latex\", \"docx\")\n\n# ggplot2 code\n```\n\n:::\n\n## Thank you!\n\n:::: {.columns}\n::: {.column width=\"65%\"}\nüôèüèº **Please let me know how I did in this [short survey](https://forms.gle/xSYgJQenNs6gFcck9)** \n\n<br>\n\nüè° **Home for all workshop materials**: [jadeyryan.quarto.pub/rladies-abuja-quarto-params/](https://jadeyryan.quarto.pub/rladies-abuja-quarto-params/)\n\n![](images/mts.jpg){width=600 fig-alt=\"From left to right, Mai, Tai, and Skye. Three snowshoe cats cuddling in their warming beds.\" style=\"border-radius:1em\"}\n:::\n\n::: {.column width=\"35%\"}\n**Stay connected!**\n\n{{< fa link size=xl >}} [jadeyryan.com](https://jadeyryan.com)\n\n{{< fa brands mastodon size=xl >}} [\\@jadeynryan](https://fosstodon.org/@jadeynryan)\n\n{{< fa brands linkedin size=xl >}} [linkedin.com/in/jadey-ryan](https://www.linkedin.com/in/jadey-ryan)\n\n{{< fa brands github size=xl >}} [jadeynryan](https://github.com/jadeynryan/)\n\n{{< fa brands etsy size=xl >}} [thecodingcats.etsy.com](https://thecodingcats.etsy.com/)\n:::\n\n::::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\r\n"
      ],
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}