{
  "hash": "4731d4986636633aa6964ebd4706710a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Reproducible Reporting<br> with Quarto<br> ![](images/jr-logo-quarto.webp){width=5em}\"\nauthor: \"Jadey Ryan // April 25, 2024<br>Community Engaged Data Science<br>College of the Atlantic\"\nfooter: \"Reproducible Reporting with Quarto // [jadeyryan.quarto.pub/ceds-quarto-workshop/](https://jadeyryan.quarto.pub/ceds-quarto-workshop/)\"\nlogo: \"images/jr-logo-quarto.webp\"\nlogo-alt: \"Two hex stickers side by side with a heart joining them in the middle. Left sticker is Jadey's cat logo. Right sticker is the Quarto logo.\"\nformat: \n  revealjs: \n    width: 1600\n    height: 900  \n    theme: slides.scss\n    highlight-style: a11y\n    transition: fade\n    slide-number: true\nexecute:\n  echo: true\ndf-print: kable\n---\n## Acknowledgements\n\n::: columns\n::: {.column width=\"30%\"}\n![](images/ceds.jpg){.center fig-alt=\"Community Engaged Data Science Logo\" width=\"250\"}\n:::\n\n::: {.column width=\"30%\"}\n![](images/coa.png){.center fig-alt=\"College of the Atlantic Logo\" width=\"250\"}\n:::\n\n::: {.column width=\"30%\"}\n![](https://rladies.org/images/logo.png){.center fig-alt=\"Purple R Ladies Logo\" width=\"250\"}\n:::\n:::\n\n<br>\n\n[R/Medicine Data Cleaning 2023\nWorkshop](https://shannonpileggi.github.io/rmedicine-data-cleaning-2023/) taught\nby [Crystal Lewis](https://cghlewis.com/), [Shannon\nPileggi](https://www.pipinghotdata.com/), and [Peter\nHiggins](https://bookdown.org/pdr_higgins/rmrwr/)\n\n<br>\n\n[ASA Traveling Courses on\nQuarto](https://quarto.org/docs/blog/posts/2023-12-05-asa-traveling-courses/)\ntaught by [Mine √áetinkaya-Rundel](https://mine-cr.com/) and [Andrew\nBray](https://andrewpbray.github.io/)\n\n## Disclaimer and license\n\nOpinions expressed are solely my own and do not express the views of my employer\nor any organizations I am associated with.\n\n<br>\n\nThis work is licensed under [Creative Commons\nAttribution-NonCommercial-ShareAlike 4.0 International (CC\nBY-NC-SA)](https://creativecommons.org/licenses/by-nc-sa/4.0/).\n\n{{< fa brands creative-commons size=2x >}} {{< fa brands creative-commons-by size=2x >}} {{< fa brands creative-commons-nc size=2x >}} {{< fa brands creative-commons-sa size=2x >}}\n\n## Jadey Ryan\n\n::: columns\n::: {.column width=\"44%\"}\nData scientist at WA Dept of Agriculture\n\nThe Coding Cats: cat & code themed merch\n\n{{< fa link size=xl >}} [jadeyryan.com](https://jadeyryan.com)\n\n{{< fa brands mastodon size=xl >}} [\\@jadeynryan](https://fosstodon.org/@jadeynryan)\n\n{{< fa brands linkedin size=xl >}} [linkedin.com/in/jadey-ryan](https://www.linkedin.com/in/jadey-ryan)\n\n{{< fa brands github size=xl >}} [jadeynryan](https://github.com/jadeynryan/)\n\n{{< fa brands etsy size=xl >}} [thecodingcats.etsy.com](https://thecodingcats.etsy.com/)\n\n![](images/mts.webp){fig-alt=\"Three snowshoe siamese cats in loaf mode. From left to right: Tai, Mai, and Skye\" style=\"border-radius:1em;margin-top:auto\"}\n:::\n\n::: {.column width=\"28%\"}\n![](images/bulk-density.jpg){fig-alt=\"Jadey collecting a bulk density soil sample in a field of wheat stubble.\" style=\"border-radius:1em;margin-top:auto\"}\n:::\n\n::: {.column width=\"28%\"}\n::: {layout-nrow=\"2\"}\n![](images/soil-sampling.jpg){style=\"border-radius:1em;margin-top:auto\"\nfig-alt=\"Jadey standing in a field of wheat stubble holding a 3 foot long soil sampling probe over her shoulder.\"}\n\n![](images/rangeland.jpg){fig-alt=\"Jadey standing in a grazed wildflower meadow with two colleagues collecting soil samples.\"\nstyle=\"border-radius:1em;margin-top:auto\"}\n:::\n\n{{< fa camera title=\"Photo credit\" >}} [@leslie.mmichel](https://twitter.com/leslie_mmichel)\n:::\n:::\n\n## Participation\n\nLog in to Posit Cloud work space:\n\n[**https://posit.cloud/spaces/504211/content/8093007**](https://posit.cloud/spaces/504211/content/8093007){.uri}\n\n<br>\n\n. . .\n\nIf Posit Cloud doesn't work, download materials locally:\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_course(\n  \"https://github.com/jadeynryan/parameterized-quarto-workshop/raw/coa-ceds/exercises/ceds-quarto-exercises.zip\"\n#  ,destdir = \"___\"\n  )\n```\n:::\n\n<br>\n\n. . .\n\n**Workshop structure**: presentation, üíÉüèª demos, üí™üèª exercises\n\n# üí™üèº Exercise 0 {.exercise}\n\n**Student introductions**: \n\n-   Your name\n\n-   Briefly describe your community project & what you're hoping to learn from this workshop\n\n**Community partner // Maine UseR introductions**: \n\n-   Your name, position title, and affiliation\n\n-   Briefly describe how you use R Markdown or Quarto\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_1d3ff920\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">15</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n## Learning objectives\n\n::: incremental\n\n-   Learn what Quarto is and what you can use it for.\n\n-   Learn how to weave code and text together to create a fully reproducible\n    report.\n\n-   Learn how to use parameters to create variations of a report.\n\n:::\n\n# Syntax and RStudio aside {.section}\n\n## Pipes\n\n-   2014+ magrittr pipe `%>%`\n\n-   2021+ (R $\\geq$ 4.1.0) native R pipe `|>`\n\n. . .\n\nIsabella Vel√°squez's blog post [*Understanding the native R pipe*\n\\|\\>](https://ivelasq.rbind.io/blog/understanding-the-r-pipe/) (2022)\n\n<br>\n\n. . .\n\n::: columns\n::: {.column width=\"50%\"}\n::: {.cell}\n\n```{.r .cell-code}\ndo_something(arg1, arg2, arg3, ...)\n\narg1 |>  \n  do_something(arg2, arg3)\n```\n:::\n:::\n\n::: {.column width=\"5%\"}\n:::\n\n::: {.column width=\"45%\"}\n::: {.cell}\n\n```{.r .cell-code}\nmean(0:10)\n\n0:10 |> \n  mean()\n```\n:::\n:::\n:::\n\n. . .\n\n<br>\n\nTo change shortcut to the native pipe:\n\n`Tools` ‚Üí `Global Options` ‚Üí `Code` ‚Üí `Editing` ‚Üí `Use Native Pipe Operator`\n\nWindows: `Ctrl` + `Shift` + `M`\n\nMac: `Cmd` + `Shift` + `M`\n\n::: footer\nSlide adapted from [R/Medicine Data Cleaning 2023\nWorkshop](https://shannonpileggi.github.io/rmedicine-data-cleaning-2023/)\n:::\n\n## Namespacing\n\n`package::function()`\n\n`dplyr::select()`\n\n. . .\n\n-   tells R explicitly to use the function `select` from the package `dplyr`\n\n-   helps avoid name conflicts (e.g., `MASS::select()`)\n\n-   does not require `library(dplyr)`\n\n. . .\n\n::: columns\n::: {.column width=\"45%\"}\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\nmtcars |>  \n  select(mpg, cyl) \n```\n:::\n:::\n\n::: {.column width=\"5%\"}\n:::\n\n::: {.column width=\"50%\"}\n::: {.cell}\n\n```{.r .cell-code}\n# library(dplyr) not needed\n\nmtcars |>  \n  dplyr::select(mpg, cyl) \n```\n:::\n:::\n:::\n\n::: footer\nSlide adapted from [R/Medicine Data Cleaning 2023\nWorkshop](https://shannonpileggi.github.io/rmedicine-data-cleaning-2023/)\n:::\n\n## RStudio options\n\n`Tools` ‚Üí `Global Options` ‚Üí\n\n::: incremental\n-   Fussy YAML indentation:\n\n    `Code` ‚Üí `Display` ‚Üí `Indentation guides:` ‚Üí `Rainbow lines`\n\n<br>\n\n-   Match parentheses:\n\n    `Code` ‚Üí `Display` ‚Üí `Indentation guides:` ‚Üí Check `Use rainbow parentheses`\n\n<br>\n\n-   Matching divs:\n\n    `R Markdown` ‚Üí `Advanced` ‚Üí Check `Use rainbow fenced divs`\n:::\n\n# R Markdown ‚Üí Quarto {.section}\n\n## R Markdown is an authoring framework supported by many R packages\n\n![Figure from \"Hello, Quarto\" keynote by Julia Lowndes and Mine √áetinkaya-Rundel, presented at RStudio::Conf(2022).](images/rmd-ecosystem.png){style=\"margin-top:-5em;margin-bottom:-1em\" fig-alt=\"Hex logos for various packages from the R Markdown ecosystem.\" fig-align=\"center\" width=\"700\"}\n\n## Quarto is a publishing system that supports many multiple & outputs\n\n::: r-stack\n![Artwork from \"Hello, Quarto\" keynote by Julia Lowndes and Mine √áetinkaya-Rundel, presented at RStudio::Conf(2022). Illustrated by Allison Horst.](images/horst-quarto-schematic.png){.fragment .fade-out fragment-index=\"1\" fig-alt=\"A schematic representing the multi-language input (e.g. Python, R, Observable, Julia) and multi-format output (e.g. PDF, html, Word documents, and more) versatility of Quarto.\" fig-align=\"center\" style=\"margin-top:-1.5em;margin-bottom:-1em\"}\n\n![](images/horst-qmd-render-schema.png){.fragment fragment-index=\"1\" fig-alt=\"A schematic representing rendering of Quarto documents from .qmd, to knitr or jupyter, to plain text markdown, then converted by pandoc into any number of output types including html, PDF, or Word document.\" fig-align=\"center\" style=\"margin-top:-1.5em;margin-bottom:-1em\"}\n:::\n\n## R Markdown vs Quarto\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/rmarkdown.png){width=\"150\" style=\"float:left;padding: 0 1em 0 0\"}\n\n### R Markdown\n\n-   Vast R Markdown ecosystem\n\n-   Dependent on R\n:::\n\n::: {.column width=\"50%\"}\n![](images/quarto.png){width=\"150\" style=\"float:left;padding: 0 1em 0 0\"}\n\n### Quarto\n\n-   Command line interface (CLI)\n\n-   Expands R Markdown ecosystem\n\n-   \"Batteries included\"\n\n-   Multi-language and multi-engine\n:::\n:::\n\n. . .\n\n<br>\n\n**If you're happy with R Markdown and it's not broken, no need to switch!**\n\n. . .\n\n<br>\n\nR Markdown will still be maintained but likely no new features [(Xie 2022)](https://yihui.org/en/2022/04/quarto-r-markdown/).\n\n## How I use Quarto\n\n::: {.r-stack}\n![](images/quarto-workshop-website.png){.fragment .fade-in-then-out fig-alt=\"Screenshot of this workshop website built with Quarto\" width=\"80%\"}\n\n![](images/ceds-workshop-slides.png){.fragment .fade-in-then-out fig-alt=\"Screenshot of workshop slides built with Quarto and revealjs\" width=\"80%\"}\n\n![](images/personal-website.png){.fragment .fade-in-then-out fig-alt=\"Screenshot of my personal website built with Quarto\" width=\"80%\"}\n\n![](images/personal-blog.png){.fragment .fade-in-then-out fig-alt=\"Screenshot of my personal blog built with Quarto\" width=\"80%\"}\n\n![](images/qc-summary-report.png){.fragment .fade-in-then-out fig-alt=\"Screenshot of HTML report titled QC Summary of 2020-2023 Results, Author Jadey Ryan, Published August 28, 2023, Table of contents, a bullet point list summary, and a table with summary statistics. There is a scroll bar on the right, indicating the report has much more content than shown.\" width=\"80%\"}\n\n![](images/soils-report-word-2021.png){.fragment .fade-in-then-out fig-alt=\"2021 MS Word report for soil health survey participant, generated from a parameterized Quarto report.\"}\n\n![](images/soils-report-word.png){.fragment .fade-in-then-out fig-alt=\"2023 MS Word report for soil health survey participant, generated from a parameterized Quarto report.\"}\n\n![](images/soils-report-html.png){.fragment .fade-in-then-out fig-alt=\"2023 HTML report for soil health survey participant, generated from a parameterized Quarto report.\" width=\"80%\"}\n:::\n\n## More real-world applications of Quarto\n\n[Quarto gallery](https://quarto.org/docs/gallery/){preview-link=\"true\"}\n\n[Quarto website showcase](https://qmdclub.com/){preview-link=\"true\"}\n\n[New format type: manuscripts](https://quarto.org/docs/manuscripts/){preview-link=\"true\"}\n\n[New format type: dashboards](https://quarto.org/docs/dashboards/){preview-link=\"true\"}\n\n## Convert `.Rmd` ‚Üí `.qmd`\n\n1.  Change file extension from `.Rmd` ‚Üí `.qmd`\n2.  Change YAML header (`output:` ‚Üí `format:`)\n3.  Convert chunk headers with `knitr::convert_chunk_header()`\n\n. . .\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n\n**R Markdown**\n\n::: {.cell}\n\n````{.cell-code}\n```{{r, label=rmarkdown, eval=FALSE}}\n# code\n```\n````\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n**Quarto**\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: quarto\n#| eval: false\n\n# code\n```\n````\n:::\n\n:::\n::::\n\n. . .\n\nüÜï **Shiny app to convert R Markdown to Quarto** ‚ú®\n\nApp: <https://mounaabelaid.shinyapps.io/RMarkdown2Quarto>\n\nRepo: <https://github.com/MounaBelaid/RMarkdown2Quarto>\n\n## One sad difference üò• {visibility=\"hidden\"}\n\nNo Quarto equivalent to .Rmd [Knit with Parameters GUI](https://bookdown.org/yihui/rmarkdown/params-knit.html#the-interactive-user-interface) built with Shiny [{miniUI}](https://github.com/rstudio/miniUI).\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n![Figure from [*R Markdown: The Definitive Guide* (Xie et al. 2023)](https://bookdown.org/yihui/rmarkdown/params-knit.html#the-interactive-user-interface)](https://bookdown.org/yihui/rmarkdown/images/params-input.png){fig-alt=\"Input parameter values interactively for parameterized reports.\" fig-align=\"left\"}\n:::\n\n::: {.column width=\"50%\"}\n\n<br>\n\n**Workaround**: build web app to get input, serialize to YAML, pass to Quarto render.\n\n**More info**: [GitHub discussion](https://github.com/quarto-dev/quarto-cli/discussions/7581#discussioncomment-7603016)\n:::\n\n::::\n\n## Resources for R Markdown users\n\n- [From R Markdown to Quarto workshop](https://quarto.org/docs/blog/posts/2023-12-05-asa-traveling-courses/) taught by Dr. Mine √áetinkaya-Rundel and Dr. Andrew Bray.\n\n- [Quarto FAQ for R Markdown Users](https://quarto.org/docs/faq/rmarkdown.html)\n\n- Ted Laderas' talk [Quarto / R Markdown - What's Different?](https://laderast.github.io/qmd_rmd)\n\n# Get started with Quarto {.section}\n\n# {background-iframe=\"https://quarto.org/docs/get-started/\" background-interactive=true}\n\n## Create a single Quarto document\n\nOne `.qmd` file for a report, presentation, or dashboard\n\n**File** > **New File** > **Quarto Document...**\n\n![](images/new-quarto-doc.png){fig-alt=\"Pop up menu for creating a new document. The title field shows that we entered &quot;2024 Sampling Report&quot; and the author field shows the name &quot;Jadey Ryan&quot;. HTML format is selected via the radio button.\"}\n\n## Create a Quarto project\n\nMultiple `.qmd` files for a website, blog, or book\n\n**File** > **New Project** > **New Directory** > **Quarto Project/Website/Blog/Book**\n\n![](images/quarto-project.png){fig-alt=\"Pop up menu for creating a new project in a new directory. A list of Project Types are presented with Quarto Project, Quarto Website, Quarto Blog, and Quarto Book highlighted.\"}\n\n## Authoring\n\nToggle between **Visual** and **Source** modes with `Cmd`/`Ctrl` + `Shift`+ `F4.`\n\n![](images/rstudio-source-visual.png){fig-alt=\"On the left: Document in the visual editor. On the right: Same document in the source editor. The visual/source editor toggle is highlighted in both documents marking their current state. The document shown is the \\\"Hello Quarto\\\" document from a previous image on the page.\"}\n\n::: footer\nImage adapted from [Tutorial: Hello, Quarto](https://quarto.org/docs/get-started/hello/).\n:::\n\n# üí™üèº Exercise 1-1 {.exercise}\n\n1. Create a Quarto document that will generate an HTML output format. Name it `1-hello-quarto`.\n\n2. Toggle between **Visual** and **Source** modes. What differences in the RStudio IDE do you notice?\n\n3. In **Visual** mode, try a traditional keyboard shortcut to format text in Google Docs or Microsoft Word (`Cmd`/`Ctrl` + `B` to bold text).\n\n4. Try out other formatting shortcuts you normally use.\n\n5. Try inserting an image using the **Insert Anything** shortcut (`Cmd`/`Ctrl` + `/`).\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_c8057c68\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n## Three ways to render\n\n1. Use the RStudio/Quarto integration\n\n![](images/rstudio-render-button.png){fig-alt=\"Quarto render button in RStudio\" style=\"vertical-align:middle;\" width=\"49\"} **Render** button to render the file and preview the output.\n\nKeyboard shortcut: `Cmd`/`Ctrl` + `Shift` + `K`\n\n![](images/rstudio-render.png){fig-alt=\"Top of the text editor in RStudio with the Render button highlighted with a purple box.\"}\n\n. . .\n\nCheck the **Render on Save** option to automatically render and update the preview after saving.\n\n![](images/rstudio-render-on-save.png){fig-alt=\"Top of the text editor in RStudio with the Render on Save checkbox checked and highlighted with a purple box.\"}\n\n::: footer\nImages from [Tutorial: Hello, Quarto](https://quarto.org/docs/get-started/hello/).\n:::\n\n## Three ways to render\n\n2. Use the **`quarto` package** in the Console or an R script\n\n```{.r filename=\"Console or R script\"}\nquarto::quarto_render(input = \"hello.qmd\", output_format = \"html\")\n```\n\n. . .\n\n3. Use the **CLI** in the Terminal\n\n```{.bash filename=\"Terminal\"}\nquarto render hello.qmd --to html\n```\n\n# üí™üèº Exercise 1-2 {.exercise}\n\n1. Render the document using the ![](images/rstudio-render-button.png){fig-alt=\"Quarto render button in RStudio\" style=\"vertical-align:middle;\" width=\"49\"} **Render** button.\n\n2. Modify the text and code, render using the `quarto` package, and review the output.\n\n3. Check the **Render on Save** option, make more changes, save, and watch the preview update.\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_a9ead34b\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">03</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n# Anatomy of a `.qmd` file {.section}\n\n1. YAML header (metadata and document options)\n\n2. Narrative (text)\n\n3. Code chunks (import, wrangle, visualize data)\n\n## 1. YAML header\n\n\"Yet Another Markup Language\" or \"YAML Ain't Markup Language\"\n\n``` {.yaml}\n---                           # <1>\ntitle: 2024 Sampling Report   # <2>\nauthor: Jadey Ryan            # <2>\ndate: 2024-04-25              # <2>\nformat:                       # <2>\n  html:                       # <3>\n    theme: flatly             # <3>\n    toc: true                 # <3>\n---                           # <1>\n```\n\n1. Demarcated by three dashes (`---`) on the top and bottom\n\n2. Document level metadata and options using key-value pairs in the format `key: value`\n\n3. Use 2 spaces for each indentation level -- YAML is very fussy!\n\n<br>\n\n. . .\n\nSee available options in the **reference guides**: [HTML](https://quarto.org/docs/reference/formats/html.html){preview-link=\"true\"}, [PDF](https://quarto.org/docs/reference/formats/pdf.html){preview-link=\"true\"}, [MS Word](https://quarto.org/docs/reference/formats/docx.html){preview-link=\"true\"}.\n\n## YAML intelligence: tab-completion\n\n-   Start a word and then Tab to complete. \n\n-   `Cmd`/`Ctrl` + `Space` to see all available options.\n\n![](images/rstudio-yaml-completion.png){fig-alt=\"Quarto document with YAML being edited. Next to the cursor code completion helper is open showing YAML options beginning with the letters preceding the cursor ('to').\"}\n\n::: footer\nContent and image adapted from [YAML Intelligence on quarto.org](https://quarto.org/docs/tools/rstudio.html#yaml-intelligence).\n:::\n\n## YAML intelligence: diagnostics\n\nIncorrect YAML is highlighted when documents are saved:\n\n![](images/rstudio-yaml-diagnostics.png){fig-alt=\"Quarto document YAML metadata with an incorrect option underlined in red.\"}\n\n::: footer\nContent and image adapted from [YAML Intelligence on quarto.org](https://quarto.org/docs/tools/rstudio.html#yaml-intelligence).\n:::\n\n# üí™üèº Exercise 1-3 {.exercise}\n\n1. Explore the [Quarto documentation on HTML theming](https://quarto.org/docs/output-formats/html-themes.html) and choose a [Bootswatch theme](https://bootswatch.com/). \n\n2. Add your chosen theme to the YAML.\n\n  ```yaml\n  format:                      \n    html:                       \n      theme: flatly \n  ```\n\n3. `Cmd`/`Ctrl` + `Space` to see all available YAML options for the HTML format.\n\n4. Try any that sound interesting.\n\n5. üí¨ **Discuss**: Share your two favorites.\n\nUse the [HTML reference](https://quarto.org/docs/reference/formats/html.html) as needed.\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_c7801e2c\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">08</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n## 2. Narrative\n\nMarkdown syntax for:\n\n::: incremental\n\n-   Text with formatting: `**bold**` &rarr; **bold**\n\n-   Section headers: `# Header 1`, `# Header 2`\n\n-   Hyperlinks: `[google.com](https://google.com)` &rarr; [google.com](https://google.com)\n\n-   Images: `![](image.png)`\n\n-   Inline code: ``` 2024-04-25 ``` &rarr; ``2024-04-25``\n\n-   Inline math: ``` `$E = mc^{2}$` ``` &rarr; $E = mc^{2}$\n:::\n\n<br>\n\n. . .\n\n[**Guide to markdown syntax**](https://quarto.org/docs/authoring/markdown-basics.html){preview-link=\"true\"}\n\n# üí™üèº Exercise 1-4 {.exercise}\n\n1. Enable the **Visual** mode.\n\n2. Explore the **Format**, **Insert**, and **Table** drop downs.\n\n3. Pick one or two options from these drop downs and try them out.\n\n4. Switch to the **Source** mode and see what that formatting or feature looks like in markdown syntax.\n\n5. üí¨ **Discuss**: Share your two favorites.\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_91f5f04e\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n## 3. Code chunks (or cells or blocks)\n\n**Three ways to insert code chunks:**\n\n1.    Keyboard shortcut `Cmd`/`Ctrl` + `Option`/`Alt` + `I`.\n\n2.    ![](images/rstudio-insert-chunk.png){fig-alt=\"Insert Chunk button in RStudio\" style=\"vertical-align:middle;\" width=\"49\"} **Insert Chunk** button in the editor toolbar.\n\n3.    Manually type the chunk delimiters ```` ```{r} ```` and ```` ``` ````.\n\n. . .\n\n**Two ways to run code chunks:**\n\n1.    Use the **Run Current Chunk** or **Run All Chunks Above** buttons.\n\n      ![](images/rstudio-code-chunk.png){fig-alt=\"Code chunk in RStudio with the Run All Chunks Above and Run Current Chunk buttons highlighted and labelled.\"}\n\n2.    Run the current code chunk with `Cmd`/`Ctrl` + `Shift` + `Enter`.\n\n# üí™üèº Exercise 1-5 {.exercise}\n\n1. Insert a code chunk at the beginning of the document that includes `library(ggplot2)`.  \n   Do not run this chunk yet.\n\n2. Insert a chunk at the end that includes `ggplot2` code to generate a plot of your choice.  \n   Browse the various geoms on the [ggplot2 documentation website](https://ggplot2.tidyverse.org/reference/index.html#geoms) for examples.\n\n3. Try running just this plot code chunk. It should error with `could not find function \"ggplot\"`. \n   üí¨ **Discuss**: We attached the `ggplot2` package, why can't R find the `ggplot` function? \n\n4. Click the **Run All Chunks Above** button. \n   \n   üí¨ **Discuss**: Why do you think it worked this time?\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_8766c90b\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">08</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n## Optional code chunk labels\n\n:::: {.columns}\n\n::: {.column width=\"40%\"}\nUse a hashpipe (`#|`) to specify **labels**.\n\n::: {.cell}\n\n````{.cell-code  code-line-numbers=\"|2\"}\n```{{r}}\n#| label: simple-addition\n#| code-line-numbers: \"|2\"\n\n1 + 1\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n:::\n\n::: {.fragment .column width=\"60%\"}\nImprove **documentation** and **navigation**.\n\n![Figure from the [Quarto chapter of *R for Data Science*](https://r4ds.hadley.nz/quarto#chunk-label)](images/quarto-chunk-nav.png){fig-align=\"left\" fig-alt=\"Snippet of RStudio IDE showing only the drop-down code navigator which shows three chunks. Chunk 1 is setup. Chunk 2 is cars and it is in a section called Quarto. Chunk 3 is pressure and it is in a section called Including plots.\"}\n:::\n::::\n\n## Optional code chunk options\n\nUse a hashpipe (`#|`) to specify **options**.\n\n::: {.cell}\n\n````{.cell-code  code-line-numbers=\"|3-4\"}\n```{{r}}\n#| label: simple-multiplication\n#| eval: false\n#| code-line-numbers: \"|3-4\"\n\n2 * 3\n```\n````\n:::\n\n. . .\n\n**Control code execution, text or plot output, layout, captions, etc.**\n\n-   `eval: false` prevents code from being evaluated and does not generate results.\n    Use this to display example code or disable a code block.\n\n-   `echo: false` prevents code, but not the results from appearing in the report.\n    Use this when writing reports aimed at people who don't want to see the underlying R code.\n\n. . .\n\n**Use tab-completion to see available options!**\n\nRead about `knitr` specific options in the [developer's documentation](https://yihui.org/knitr/options/){preview-link=\"true\"} or the [Quarto Code Cells: Knitr reference](https://quarto.org/docs/reference/cells/cells-knitr.html).\n\n::: footer\nContent adapted from the [Quarto chapter of *R for Data Science*](https://r4ds.hadley.nz/quarto#chunk-label).\n:::\n\n# üí™üèº Exercise 1-6 {.exercise}\n\n1. Add appropriate **labels** to the first and last code chunks.\n\n2. Try navigating to the chunks using the drop down navigator at the bottom left of the source pane.\n\n3. Add `#| echo: false` to all chunks and re-render. How did this change the report?\n\n4. Try two more chunk options and re-render.  \n   To see all options, type `#| ` then `Tab`, or `Cmd`/`Ctrl` + `Space`. \n   \n5. üí¨ **Discuss**: Share which options you tried and what they did.\n\nUse the [Code Cells: Knitr reference](https://quarto.org/docs/reference/cells/cells-knitr.html) as needed.\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_5ccf3d67\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">06</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n## Global options\n\nUse for chunk options you want to apply to all chunks by default.\n\n**Code execution options:**\n\n``` yaml\n---\ntitle: \"Report for audience that doesn't need to see the code\"\nexecute:\n  echo: false\n---\n```\n\n<br>\n\n. . .\n\n**Some global options relevant only to R must be set under the `knitr` key, under `opts_chunk`:**\n\n``` yaml\n---\ntitle: \"Report with all plots centered\"\nknitr:\n  opts_chunk:\n    fig-align: \"center\"\n---\n```\n::: footer\nContent adapted from the [Quarto chapter of *R for Data Science*](https://r4ds.hadley.nz/quarto#chunk-label).\n:::\n\n# üí™üèº Exercise 1-7 {.exercise}\n\n1. Delete the `echo: false` option from all code chunks.\n\n2. Add `code-fold: true` (under the `html:` key in the YAML header) to collapse all code chunks by default.\n\n3. üí¨ **Discuss**: What do you think will happen if you add `echo: false` (under the `execute:` key in the YAML header)? Try it out.\n\n4. Try adding a `knitr: opts_chunk:` global option. Careful with indentation!  \n\n   ``` yaml\n   knitr:\n     opts_chunk:\n       out-width: 50%   # width of the plot in the output document\n   ```\n   Tab-completion doesn't seem to work for the `opts_chunk` YAML key.  \n   Use the [Code Cells: Knitr reference](https://quarto.org/docs/reference/cells/cells-knitr.html#figures) as needed.\n\n‚è±**10-min break after this exercise**\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_858aace3\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">06</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n# üö∂üèª‚Äç‚ôÄ Break üßòüèª‚Äç‚ôÄÔ∏è {.section}\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_05f63ef0\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n# Parameterized reports {.section}\n\n## Many use cases\n\n::: columns\n::: {.column width=\"25%\"}\n![](images/ocean-floor.png){.lightbox group=\"examples\"\nfig-alt=\"RStudio R Markdown parameterized report project for mapping ocean floors.\"}\n\n[Ocean floor maps](https://rmarkdown.rstudio.com/lesson-6.html)\n:::\n\n::: {.column width=\"25%\"}\n![](images/urban-institute.png){.lightbox group=\"examples\"\nfig-alt=\"Report for Alabama spending with text and plots generated from parameterized R Markdown.\"}\n\n[Fiscal\nbriefs](https://book.rwithoutstatistics.com/parameterized-reports-chapter.html)\n:::\n\n::: {.column width=\"25%\"}\n![](images/driver-quality.png){.lightbox group=\"examples\"\nfig-alt=\"Report for Alaska driver quality with text, plot, and table generated from parameterized RMarkdown.\"}\n\n[Bad\ndrivers](https://urban-institute.medium.com/iterated-fact-sheets-with-r-markdown-d685eb4eafce)\n:::\n\n::: {.column width=\"25%\"}\n![](images/soils-report-html.png){.lightbox group=\"examples\"\nfig-alt=\"HTML report for soil health survey participant, generated from a parameterized Quarto report.\"}\n\n[Soil health](https://wa-department-of-agriculture.github.io/soils/)\n:::\n:::\n\n. . .\n\n<br>\n\n**Different audiences, different reports**\n\nShow code for technical staff and hide code for everyone else ([StackOverflow\nexample](https://stackoverflow.com/questions/73571919/how-to-pass-logical-parameters-with-the-quarto-r-package-to-the-knitr-chunk-opti)).\n\n## Like a custom function\n\n::: r-stack\n![](images/template1.png){.fragment\nfig-alt=\"File with the word '.qmd' inside and the word 'Function' above.\"\nwidth=\"1300\" fig-align=\"left\" style=\"margin-top:-1em\"}\n\n![](images/template2.png){.fragment\nfig-alt=\"An arrow points from 'Input' with 'params$year' to the previous image with 'Function' and '.qmd' file.\"\nwidth=\"1300\" fig-align=\"left\" style=\"margin-top:-1em\"}\n\n![](images/template3.png){.fragment\nfig-alt=\"In addition to the previous two images, arrows point to five reports with years 2019 through 2023 on them in a flow chart.\"\nwidth=\"1300\" fig-align=\"left\" style=\"margin-top:-1em\"}\n:::\n\n## What makes a report \"parameterized\"?\n\n-   YAML header with `params` key-value pairs\n\n-   Use these `params` to create different variations of a report from a single `.qmd` document.\n\n. . .\n\n::: callout-important\n-   Valid parameter values are strings, numbers, or Boolean.\n\n-   Must serialize a dataframe to pass it as a parameter, then un-serialize it\n    back to a dataframe within the `.qmd` content.\n\n-   See [Christophe Dervieux's answer in Posit\n    Community](https://community.rstudio.com/t/param-converted-from-data-frame-to-list/155556/9)\n    to understand why.\n\n-   See [John Paul Helveston's blog\n    post](https://www.jhelvy.com/posts/2023-02-28-parameterized-pdfs-with-quarto/#passing-data-frames-as-parameters)\n    to learn how to use {jsonlite} as a workaround.\n:::\n\n## Workflow\n\n::: incremental\n1.  Write report template with default values hard-coded, and then render & review.\n\n2.  Set default `params` key-value pairs in YAML. \n\n3. Replace hard-coded values with the `params` variables.\n\n4.  Render the single report and review.\n\n5.  Render extreme cases and review.\n\n    -   Parameter values with barely any data and with tons of data.\n\n6.  Render all variations of the report at once.\n:::\n\n# üí™üèº Exercise 2 {.exercise}\n\n**Explore a report without parameters and see where we could add them.**\n\n1.  Open `2-swiss-cats.qmd`.\n\n2.  Click the\n    ![](https://quarto.org/docs/get-started/hello/images/rstudio-render-button.png){fig-alt=\"Quarto render button in RStudio\"\n    style=\"vertical-align:middle;\" width=\"49\"} **Render** button.\n\n3.  Look at the source markdown & code and the rendered report.\n\n4.  üí¨ **Discuss**: What variables could we set as parameters?\n\n    üí° **Hint**: run the `setup` chunk and look at the `pets` dataframe to see\n    what variables it has.\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_11f5888e\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n## Set `params` in YAML header\n\n```{.yaml code-line-numbers=\"|2|3,4,6|7-8|11\"}\n---\ntitle: \"Swiss Cats\"             # Metadata\nformat:                         # Set format types\n  html:\n    toc: true                   # Set additional options\n  docx: default                           \nparams:                         # Set default parameter key-value pairs\n  fave_breed: \"Snowshoe\"                                \n---\n    \nReport content goes here.       # Write narrative and code\n```\n\n. . .\n\n::: callout-important\nYour default `params` key-value pairs must be found in your dataset. Otherwise, code will error or output will be blank.\n\nThe variable name for `params` can be anything you choose. Often, it's a column name in your dataset.\n:::\n\n## Access `params`\n\n\n\nRun any line or chunk to add `params` to your environment.\n\n. . .\n\n`params` object is a list.\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(params)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 1\n $ fave_breed: chr \"Snowshoe\"\n```\n\n\n:::\n:::\n\n<br>\n\n. . .\n\nAccess with `$` notation.\n\n::: {.cell}\n\n```{.r .cell-code}\nparams$fave_breed\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Snowshoe\"\n```\n\n\n:::\n:::\n\n<br>\n\n. . .\n\nFor inline code in YAML or report content, enclose the expression in `` `r ` ``.\n\n::: {.cell}\n\n```{.markdown .cell-code}\nMy favorite cat breed is the **`r params$fave_breed`**.\n```\n:::\n\nMy favorite cat breed is the **Snowshoe**.\n\n## Replace hard-coded values with `params`\n\n-   `Cmd`/`Ctrl` + `F` to find where to replace hard-coded values with `params`.\n\n![](images/find-replace-hard-coded-values.png){fig-alt=\"Find and replace toolbar with &quot;pet_type in the Search field highlighted by a purple box and &quot;params$pet_type in the Replace field highlighted by a blue box. The .qmd file shows a filter statement with the &quot;pet_type highlighted by RStudio as a match for the Find tool. This filter statement is highlighted by a purple box with an arrow pointing to a blue box that has the filter statement with the hard-coded &quot;cats string replaced with &quot;params$pet_type.\"}\n\n## Replace hard-coded values with `params`\n\nUse inline R code for markdown.\n\n::: {.cell}\n\n```{.markdown .cell-code}\n## My favorite breed: `r params$fave_breed`\n```\n:::\n\n<br>\n\n. . .\n\nUse `paste()` or `glue::glue()` for plot and table titles and labels.\n\n::: {.cell}\n\n```{.r .cell-code}\n# ggplot code +\nlabs(title = paste(params$fave_breed, \"population\"))\n\n# OR\n\n# ggplot code +\nlabs(title = glue::glue(\"{params$fave_breed} population\"))\n```\n:::\n\n##\n\n![](images/snowshoe-graph.png){fig-align=\"center\"}\n\n# üíÉüèª Demo {.demo}\n\nModify `2-swiss-cats.qmd` to add `pet_type` and `fave_breed` parameters.\n\n<br>\n\nThis parameterized version of `2-swiss-cats.qmd` is the starting point for the next section's exercises (`3-quarto-render.qmd`).\n\n# Rendering many reports {.section}\n\n## Review three ways to render\n\n::: incremental\n1. **RStudio/Quarto integration**:\n\n    ![](https://quarto.org/docs/get-started/hello/images/rstudio-render-button.png){fig-alt=\"Quarto render button in RStudio\" style=\"vertical-align:middle;\" width=\"49\"} **Render** button in RStudio or `Cmd`/`Ctrl` + `Shift` + `K` keyboard shortcut\n\n2. ‚ú® **Quarto R package** ‚ú®\n\n    ```{.r filename=\"Console or R script\"}\n    quarto::quarto_render(\n      input = here::here(\"3-quarto-render.qmd\"),   # Input Quarto file\n      execute_params = list(                       # Named list of params\n        pet_type = \"cats\",\n        fave_breed = \"Snowshoe\"))\n    ```\n\n3. **Quarto CLI**\n\n    ```{.bash filename=\"Terminal\"}\n    quarto render 3-quarto-render.qmd -P pet_type:'cats' -P fave_breed:'Snowshoe'\n    ```\n\n:::\n\n# üí™üèº Exercise 3-1 {.exercise}\n\n**Change parameters in the YAML and render using ![](https://quarto.org/docs/get-started/hello/images/rstudio-render-button.png){fig-alt=\"Quarto render button in RStudio\" style=\"vertical-align:middle;\" width=\"49\"} Render button.**\n\n1. Look at the unique pet breeds and pick your favorite.\n   ```{.r}\n   # Run in Console\n   pets <- readr::read_rds(here::here(\"data\", \"pets.RDS\")) |> \n      dplyr::distinct(pet_type, breed) |> View()\n   ```\n   \n2. In `3-quarto-render.qmd` Change the default parameters in the YAML to your favorite pet type and breed. Render using the ![](https://quarto.org/docs/get-started/hello/images/rstudio-render-button.png){fig-alt=\"Quarto render button in RStudio\" style=\"vertical-align:middle;\" width=\"49\"} **Render** button.\n\n    ```yaml\n    params:\n      pet_type: \"___\"\n      fave_breed: \"___\"\n    ```\n\n3. üí¨ **Discuss**: Which breed did you pick and why? What do you think will happen if you set the `pet_type` default parameter to \"cats\" and the `fave_breed` parameter to \"American Bulldog\"? \n\nTry it out! \n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_c775e62c\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">07</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n# üí™üèº Exercise 3-2 {.exercise}\n\n**Change parameters and render using `quarto_render()`.**\n\n1. Render with `quarto::quarto_render()`.\n\n   ```r\n   # Run in the console\n    quarto::quarto_render(\n      input = here::here(\"3-quarto-render.qmd\"),\n      execute_params = list(\n        pet_type = \"___\",\n        fave_breed = \"___\"))\n   ```\n\n2. üí¨ **Discuss**: What kinds of variables will you use as parameters for your reports? \n\n‚è±**10-min break after this exercise**\n   \n   \n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_d6c372d0\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">07</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n# üö∂üèª‚Äç‚ôÄ Break üßòüèª‚Äç‚ôÄÔ∏è {.section}\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_6418a00d\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n## Render all 538 reports \n\nOne HTML report for each cat breed and each dog breed.\n\n:::: panel-tabset\n\n## üìä Data\n\n::: {.cell}\n\n```{.r .cell-code}\npets <- readr::read_rds(here::here(\"data\", \"pets.RDS\"))\n\npets |>\n  dplyr::distinct(pet_type, breed) |>\n  dplyr::count(pet_type) |>\n  janitor::adorn_totals()\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|pet_type |   n|\n|:--------|---:|\n|cats     | 104|\n|dogs     | 434|\n|Total    | 538|\n\n</div>\n:::\n:::\n\n## üë∑üèº‚Äç‚ôÇÔ∏è Manual 1\n\n1. Change the default `params` in the YAML.\n\n2. **Render** button or `Cmd`/`Ctrl` + `Shift` + `K` keyboard shortcut.\n\n3. Rename the rendered report to include the parameter & prevent overwriting.\n\n4. Repeat 537 times.\n\nüò≠\n\n## üë∑üèª‚Äç‚ôÄÔ∏è Manual 2\n\n::: {.cell}\n\n```{.r .cell-code}\nquarto::quarto_render(\n  input = here::here(\"3-quarto-render.qmd\"),\n  output_file = \"dogs-affenpinscher-report.html\",\n  execute_params = list(\n    pet_type = \"dogs\",\n    fave_breed = \"Affenpinscher\"))\n\nquarto::quarto_render(\n  input = here::here(\"3-quarto-render.qmd\"),\n  output_file = \"dogs-afghan-hound-report.html\",\n  execute_params = list(\n    pet_type = \"dogs\",\n    fave_breed = \"Afghan Hound\"))\n\nquarto::quarto_render(\n  input = here::here(\"3-quarto-render.qmd\"),\n  output_file = \"dogs-aidi-chien-de-montagne-de-l-atlas-report.html\",\n  execute_params = list(\n    pet_type = \"dogs\",\n    fave_breed = \"Aidi Chien De Montagne De L Atlas\"))\n\nquarto::quarto_render(\n  input = here::here(\"3-quarto-render.qmd\"),\n  output_file = \"dogs-akita-report.html\",\n  execute_params = list(\n    pet_type = \"dogs\",\n    fave_breed = \"Akita\"))\n\n# + 534 more times... \n# üò≠\n```\n:::\n\n## ‚ö° Programatically\n\n**Create a dataframe with three columns that match `quarto_render()` args:**\n\n- `output_format`: file type (html, revealjs, pdf, docx, etc.)\n\n- `output_file`: file name with extension\n\n- `execute_params`: named list of parameters\n\n**Map over each row:**\n\n- `purrr::pwalk(dataframe, quarto_render, <arguments for quarto_render>)` üòé\n::::\n\n## `purrr` map functions for iteration\n\n:::: {.columns}\n\n::: {.column width=\"60%\"}\n**Map functions** apply the same action/function to each element of an object.\n\n-   Base R `apply()` functions are map functions.\n\n-   `purrr` map functions have consistent syntax and the output data type is predictable.\n\n`for loops` &rarr; `lapply()` &rarr; `purrr::map()`\n:::\n\n::: {.column width=\"40%\"}\n![](https://purrr.tidyverse.org/logo.png){fig-alt=\"purrr R package logo\"}\n:::\n::::\n\n. . .\n\n**Learn more**:\n\n- [Iteration chapter of *R for Data Science*](https://r4ds.had.co.nz/iteration.html)\n\n- R-Ladies Baltimore presentation [*Make your R Code purr with `purrr`*](https://www.youtube.com/watch?v=IewsPpjKElc)\n\n- Jenny Bryan's [tutorial](https://jennybc.github.io/purrr-tutorial/) and [workshop](https://github.com/jennybc/row-oriented-workflows)\n\n## Create dataframe to iterate over\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2|4|5-9|11-14|\"}\npet_reports <- pets |>\n  dplyr::distinct(pet_type, breed) |>   # Get distinct pet/breed combos\n  dplyr::mutate(\n    output_format = \"html\",             # Make output_format column\n    output_file = paste(                # Make output_file column:\n      tolower(pet_type),                # cats-abyssiniane-report.html\n      tolower(gsub(\" \", \"-\", breed)),           \n      \"report.html\",\n      sep = \"-\"\n    ),\n    execute_params = purrr::map2(       # Make execute_params column\n      pet_type,\n      breed,\n      \\(pet_type, breed) list(pet_type = pet_type, breed = breed)))\n```\n:::\n        \n## Subset to first 2 cat/dog breeds\n\n::: {.cell}\n\n```{.r .cell-code}\npet_reports_subset <- pet_reports |>\n  dplyr::slice_head(n = 2, by = pet_type) |>\n  dplyr::select(output_file, execute_params)\n\npet_reports_subset\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|output_file                    |execute_params               |\n|:------------------------------|:----------------------------|\n|cats-abyssiniane-report.html   |cats       , Abyssiniane     |\n|cats-aegean-cat-report.html    |cats      , Aegean Cat       |\n|dogs-affenpinscher-report.html |dogs         , Affenpinscher |\n|dogs-afghan-hound-report.html  |dogs        , Afghan Hound   |\n\n</div>\n:::\n:::\n\n## Map over each row \n\n::: incremental\n-   `purrr::pwalk()` iterates over multiple arguments simultaneously.\n\n-   First `.l` argument is a *list of vectors*. \n\n    - Dataframe is a special case of `.l` that iterates over rows.\n:::\n. . .\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2|3|4|5|\"}\npurrr::pwalk(\n  .l = pet_reports_subset,                      # Dataframe to map over\n  .f = quarto::quarto_render,                   # Function we are applying to each row\n  input = here::here(\"3-quarto-render.qmd\"),    # Named arguments of .f\n  .progress = TRUE                              # Show a progress bar :)\n)\n```\n:::\n\n. . .\n\n::: callout-note\n`index` is the only named argument of `quarto_render()` included in `pwalk()`.\n\n\n`output_format`, `output_file`, and `execute_params` are already passed in through the dataframe.\n:::\n\n# Multiple formats {.section}\n\n## Render all reports to all formats\n\nAdd to the `format:` YAML option to render additional output formats from the same `.qmd` file.\n\n``` yaml\n---\nformat:\n  html: \n    embed-resources: true   # Makes the report self-contained\n  pdf: default              # If not using any additional format options,\n  docx: default             # set value to `default`  \n---\n```\n\n. . .\n\n**Note**: the Render button now has a dropdown!\n\n![](images/render-button.png){width=60% fig-alt=\"Screenshot of Quarto file with the Render dropdown showing options for HTML, PDF, and MS Word formats.\"}\n\n[Quarto docs on multiple formats](https://quarto.org/docs/get-started/authoring/rstudio.html#multiple-formats)\n\n## Format links for HTML output\n\nLinks to download the other formats will automatically appear in HTML documents.\n\n![](images/other-formats.png){fig-alt=\"Screenshot of a HTML page that includes links to the PDF and MS Word formats in the table of contents under the heading Other Formats.\" style=\"border-radius:1em\"}\n\n## Format link options\n\n**Choose which format links to include:**\n\n::: {.cell}\n\n```{.yaml .cell-code  code-line-numbers=\"7\"}\n---\nformat:\n  html: \n    embed-resources: true\n  pdf: default\n  docx: default\nformat-links: [pdf]\n---\n```\n:::\n\n. . .\n\n**Or hide all links:**\n\n::: {.cell}\n\n```{.yaml .cell-code  code-line-numbers=\"7\"}\n---\nformat:\n  html: \n    embed-resources: true\n  pdf: default\n  docx: default\nformat-links: false\n---\n```\n:::\n\n# üíÉüèª Demo {.demo}\n\nDemo programmatically rendering all reports in all formats in `4-demo-quarto-render-purrr.qmd` and `4-demo-quarto-render-purrr.R`.\n\n## Watchouts\n\n::: incremental\n\n-   Can't render reports to another directory.\n\n    - [`output-dir` YAML option](https://quarto.org/docs/books/book-output.html#output-path) only works for *Quarto projects* that contain a `_quarto.yml` config file.\n\n    - **Workaround**: use [`{fs}`](https://fs.r-lib.org/) to move files after rendering. \n      \n      See `demo-quarto-render-purrr.R` for example.\n    \n    - **More info**: [GitHub discussion](https://github.com/quarto-dev/quarto-cli/discussions/2171#discussioncomment-4865286) and [GitHub issue](https://github.com/quarto-dev/quarto-r/issues/81).\n\n<br>\n\n- If using `embed-resources: true` YAML option, `.qmd` can't be in subfolder, otherwise: \n\n    - [[WARNING] Could not fetch resource ...]{.warning}\n\n    - **More info**: [GitHub discussion](https://github.com/quarto-dev/quarto-cli/discussions/4041#discussioncomment-6052000) and [GitHub issue](https://github.com/quarto-dev/quarto-cli/issues/5765).\n:::\n\n---\nexecute:\n  eval: false\n---\n\n<!-- # Conditional content {.section} -->\n\n<!-- ## Control content visibility -->\n\n<!-- Special `.content-visible` and `.content-hidden` classes with `when-format=\"___\"` and `unless-format=\"___\"` attributes can be applied to: -->\n\n<!-- ::: panel-tabset -->\n\n<!-- ## Divs -->\n\n<!-- ```markdown -->\n<!-- ::: {.content-visible when-format=\"html\"} -->\n\n<!-- Will only appear in HTML. -->\n\n<!-- ::: -->\n<!-- ``` -->\n\n<!-- ## Spans -->\n\n<!-- ``` markdown -->\n<!-- Some text -->\n<!-- [in HTML.]{.content-visible when-format=\"html\"} -->\n<!-- [in PDF.]{.content-visible when-format=\"pdf\"} -->\n<!-- ``` -->\n\n<!-- ## Non-executable code -->\n\n<!-- Fenced code blocks purely for documentation. -->\n\n<!-- ````markdown -->\n<!-- ```{.python .content-visible when-format=\"html\"} -->\n<!-- # code shown only in HTML -->\n<!-- 2 + 2 -->\n<!-- ``` -->\n<!-- ```` -->\n\n<!-- ::: -->\n\n<!-- ::: footer -->\n<!-- Examples from [Conditional Content Quarto docs](https://quarto.org/docs/authoring/conditional.html) -->\n<!-- ::: -->\n\n<!-- ## Useful for static/interactive features -->\n\n<!-- Pairs well with `{{< include >}}` shortcodes to re-use content without copying/pasting. -->\n\n<!-- . . . -->\n\n<!-- ::::: panel-tabset -->\n\n<!-- ## Static -->\n\n<!-- ```markdown -->\n<!-- :::: {.content-visible unless-format=\"html\"} -->\n\n<!-- ## Cats -->\n\n<!-- {{{< include _cats.qmd >}}} -->\n\n<!-- ## Dogs -->\n\n<!-- {{{< include _dogs.qmd >}}} -->\n\n<!-- :::: -->\n<!-- ``` -->\n\n<!-- ## Interactive -->\n\n<!-- ```markdown -->\n<!-- :::: {.content-visible when-format=\"html\"} -->\n<!-- ::: panel-tabset -->\n\n<!-- ## Cats -->\n\n<!-- {{{< include _cats.qmd >}}} -->\n\n<!-- ## Dogs -->\n\n<!-- {{{< include _dogs.qmd >}}} -->\n\n<!-- ::: -->\n<!-- :::: -->\n<!-- ``` -->\n<!-- ::::: -->\n\n<!-- . . . -->\n\n<!-- Use an underscore prefix for included files so they are automatically ignored by a Quarto render of a project ([Includes Quarto Docs](https://quarto.org/docs/authoring/includes.html)). -->\n\n<!-- # üí™üèº Exercise 4 {.exercise} -->\n\n<!-- **Use conditional content divs to control when tabsets are shown.** -->\n\n<!-- 1. Modify `ex-4-conditional-content.qmd` so that the `panel-tabset` is visible for HTML reports and hidden for all other formats. -->\n\n<!-- <br> -->\n\n<!-- 2. Explore the other options. There are multiple ways to get the same result. -->\n\n<!--     {.content-visible when-format=\"html\"} == {.content-hidden unless-format=\"html\"} -->\n\n<!-- <br> -->\n\n<!-- 3. üí¨ **Chat**: what other kinds of content might you want to make visible for only a certain format? -->\n\n<!-- ```{r} -->\n<!-- #| echo: false -->\n<!-- countdown::countdown(minutes = 5, top = 0) -->\n<!-- ``` -->\n\n# Conditional code execution {.section}\n\n## Conditionally execute a code chunk\n\n::: incremental\n\n-   More efficient to not execute code that generates interactive outputs for static reports.\n\n-   Useful for executing interactive plot code (e.g., `plotly` or `ggiraph`) for HTML reports and static `ggplot2` code for all other formats. \n\n-   Useful for executing different code based on a parameter value.\n\n-   Not currently a feature of Quarto v1.4. Follow along with this [GitHub discussion](https://github.com/quarto-dev/quarto-cli/discussions/3260#discussioncomment-4573926).\n\n-   Chunk options can use R code for option values with `!expr`. Learn about the limitations to this YAML \"tag\" literal syntax in the [Quarto Chunk Options reference](https://quarto.org/docs/computations/r.html#chunk-options).\n\n:::\n\n## Conditional code based on output\n\nInclude in the setup chunk of your `.qmd` file.\n\nGet the format of the Pandoc output:\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: setup\n\n# Get output format\nformat <- knitr::opts_knit$get(\"rmarkdown.pandoc.to\")\n```\n````\n:::\n\n## Use `eval: !expr` chunk option\n\n::: panel-tabset\n\n## Static plot\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| eval: !expr format %in% c(\"latex\", \"docx\")\n\n# code to create static {ggplot2}\n```\n````\n:::\n\nüí° Pandoc uses LaTeX to create PDFs.\n\n## Interactive plot\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| eval: !expr format == \"html\"\n\n# code to create interactive {plotly}\n```\n````\n:::\n\n:::\n\n# üí™üèº Exercise 5 {.exercise}\n\n<br>\n\n**Conditionally execute `ggplot2` code for static reports & `plotly` code for interactive reports.**\n\n1. Open `ex-5-conditional-code.qmd`.\n\n2. Fill in the blanks for the `eval: ` option for `ggplot` code chunks and `plotly` code chunks.\n\n3. üí¨ **Discuss**: How would you change the `eval: ` option to execute a chunk based on a parameter value rather than the output format?\n\n::: {.cell}\n\n```{.r .cell-code}\n# Options are html, latex, and docx.\n\n#| eval: !expr format == \"___\"\n\n#| eval: !expr format %in% c(\"___\", \"___\")\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_f861a534\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n## Conditional code based on parameter\n\nUse `params` in `!expr`:\n\n``` r\n#| eval: !expr params$fave_breed == \"Snowshoe\"\n\n# Code for a special plot for my favorite cat breed.\n```\n\n<br>\n\n. . .\n\n``` r\n#| eval: !expr !params$fave_breed == \"Snowshoe\"\n\n# Code for a different plot for all other breeds.\n# Note the ! in front of params.\n```\n\n<br>\n\n. . .\n\n::: callout-tip\n## Community project: home energy monitoring\nConsider using a different conditional code chunk to create different visualizations depending on heating source.\n:::\n\n# Child documents {.section}\n\n## Generate dynamic contents with a \"child\" template\n\n-   `knitr::knit_child()` and `knitr::knit_expand()` are functions from R Markdown that also work with Quarto\n\n-   \"child\" document is a template, which is run with different parameters\n\n-   \"main\" document includes the output from all the different iterations of the child document\n\n<br> \n\n. . .\n\n::: callout-tip\n## Community project: water quality monitoring monitoring\nConsider creating a main document using the river as the parameter and a child document as a template for the heading, plots, tables, and text for each sampling site.\n:::\n\n## Do not run interactively!\n\nCode chunks including [`knitr::knit_child()`](https://rdrr.io/pkg/knitr/man/knit_child.html) are not supposed to be used interactively (see this [Stack Overflow response](https://stackoverflow.com/a/16847729) from the `knitr` developer Yihui\nXie). If run interactively, you will get an error similar to the one shown\nbelow.\n\n``` {.r}\nError in `purrr::map_chr()`:\n‚Ñπ In index: 1.\nCaused by error in `setwd()`:\n! character argument expected\n```\n\nRead a description of this issue in WSDA's {soils} R package [vignette](https://wa-department-of-agriculture.github.io/soils/articles/troubleshoot.html#error-when-run-interactively).\n\n## Learn more about child documents\n\n-   Qiushi Yan's blog post [*Generating dynamic contents in R Markdown and\n    Quarto*](https://www.qiushiyan.dev/posts/dynamic-rmd-quarto/)\n    \n-   Yihui Xie's *R Markdown Cookbook* sections on [`knitr::knit_child()`](https://bookdown.org/yihui/rmarkdown-cookbook/child-document.html#child-document) and [`knitr::knit_expand()`](https://bookdown.org/yihui/rmarkdown-cookbook/knit-expand.html)\n\n-   Isabella Vel√°squez's [*Getting started with report writing using Quarto* at\n    26:00](https://youtu.be/Sf__ERCSgIA?si=Z4DLAHdqgRvof0FB&t=1560).\n\n# üíÉüèª Demo {.demo}\n\nGenerate a report that dynamically creates sections and plots for all breeds of the `pet_type`.\n\nMain document: `6-demo-knit-child.qmd`\n\nChild document: `_child-template.qmd`\n\n# üèÅ Recap {.section}\n\n## Learning objective 1\n\n**Learn what Quarto is and what you can use it for.**\n\n::: columns\n::: {.column width=\"50%\"}\nScientific and technical publishing system for:\n\n-   interactive [HTML\n    reports](https://quarto.org/docs/output-formats/html-basics.html)\n-   static [MS Word](https://quarto.org/docs/output-formats/ms-word.html) or\n    [PDF](https://quarto.org/docs/output-formats/pdf-basics.html) fact sheets or\n    reports\n-   [manuscripts](https://quarto.org/docs/manuscripts/)\n-   [presentations](https://quarto.org/docs/presentations/)\n-   [dashboards](https://quarto.org/docs/dashboards/)\n-   [websites](https://quarto.org/docs/websites/)\n-   [books](https://quarto.org/docs/books/)\n-   [blogs](https://quarto.org/docs/websites/website-blog.html)\n\n**Check out the [Quarto Gallery](https://quarto.org/docs/gallery/)!**\n:::\n\n::: {.column width=\"50%\"}\n![Artwork from \"Hello, Quarto\" keynote by Julia Lowndes and Mine\n√áetinkaya-Rundel, presented at RStudio::Conf(2022). Illustrated by Allison\nHorst.](images/horst-quarto-schematic.png){fig-alt=\"A schematic representing the multi-language input (e.g. Python, R, Observable, Julia) and multi-format output (e.g. PDF, html, Word documents, and more) versatility of Quarto.\"\nfig-align=\"center\" style=\"margin-top:-1.5em;margin-bottom:-1em\"}\n:::\n:::\n\n## Learning objective 2\n\n**Learn how to weave code and text together to create a fully reproducible\nreport.**\n\n`.qmd` documents contain:\n\n-   document level metadata and options in the **YAML**\n-   a **narrative** using markdown syntax, and\n-   **code chunks** to import, wrangle, visualize data.\n\n## Learning objective 3\n\n**Learn how to use parameters to create variations of a report.**\n\n. . .\n\n**Parameterized reports &rarr; very fancy custom functions:**\n\n::: incremental\n-   Function ‚Üí `.qmd` template\n\n-   Input ‚Üí parameters\n\n-   Output ‚Üí rendered reports\n:::\n\n. . .\n\n**Useful for creating variations of the same report:**\n\n-   spatial: country, state, county, or city\n\n-   temporal: year or other time period\n\n-   water bodies, sampling sites, energy sources, breeds, species, diseases, trials, etc.\n\n. . .\n\n::: callout-note\nWe only covered reports, but you can also parameterize `revealjs` presentations!\nSee this [Jumping Rivers blog\npost](https://www.jumpingrivers.com/blog/r-parameterised-presentations-quarto/)\nabout it.\n:::\n\n## Thank you!\n\n::: columns\n::: {.column width=\"65%\"}\nüè° **Home for all workshop materials**:\n[jadeyryan.quarto.pub/ceds-quarto-workshop/](https://jadeyryan.quarto.pub/ceds-quarto-workshop/)\n\nüé• **Recordings from previous workshops & talks**:  \n[links in GitHub repo](https://github.com/jadeynryan/parameterized-quarto-workshop?tab=readme-ov-file#workshops) or [my YouTube playlist](https://youtube.com/playlist?list=PLzjGoNexcyYaDUVCg4MQDtMXLl2F5HE3B&si=-y0jQfCYyRAQjI1B)\n\n![](images/mts.jpg){width=\"600\"\nfig-alt=\"From left to right, Mai, Tai, and Skye. Three snowshoe cats cuddling in their warming beds.\"\nstyle=\"border-radius:1em\"}\n:::\n\n::: {.column width=\"35%\"}\n**Stay connected!**\n\n{{< fa link size=xl >}} [jadeyryan.com](https://jadeyryan.com)\n\n{{< fa brands mastodon size=xl >}} [\\@jadeynryan](https://fosstodon.org/@jadeynryan)\n\n{{< fa brands linkedin size=xl >}} [linkedin.com/in/jadey-ryan](https://www.linkedin.com/in/jadey-ryan)\n\n{{< fa brands github size=xl >}} [jadeynryan](https://github.com/jadeynryan/)\n\n{{< fa brands etsy size=xl >}} [thecodingcats.etsy.com](https://thecodingcats.etsy.com/)\n:::\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}