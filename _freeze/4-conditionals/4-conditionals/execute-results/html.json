{
  "hash": "50d786819504686ebd8c9d1c508c538d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Conditional content & code<br>![](../images/cascadia-jr-quarto.webp){width=4em}\"\nformat: revealjs\nexecute:\n  eval: false\n---\n\n\n\n# Conditional content {.section}\n\n## Control content visibility\n\nSpecial `.content-visible` and `.content-hidden` classes with `when-format=\"___\"` and `unless-format=\"___\"` attributes can be applied to:\n\n::: panel-tabset\n\n## Divs\n\n```markdown\n::: {.content-visible when-format=\"html\"}\n\nWill only appear in HTML.\n\n:::\n```\n\n## Spans\n\n``` markdown\nSome text\n[in HTML.]{.content-visible when-format=\"html\"}\n[in PDF.]{.content-visible when-format=\"pdf\"}\n```\n\n## Non-executable code\n\nFenced code blocks purely for documentation.\n\n````markdown\n```{.python .content-visible when-format=\"html\"}\n# code shown only in HTML\n2 + 2\n```\n````\n\n:::\n\n::: footer\nExamples from [Conditional Content Quarto docs](https://quarto.org/docs/authoring/conditional.html)\n:::\n\n## Useful for static/interactive features\n\nPairs well with `{{< include >}}` shortcodes to re-use content without copying/pasting.\n\n. . .\n\n::::: panel-tabset\n\n## Static\n\n```markdown\n:::: {.content-visible unless-format=\"html\"}\n\n## Cats\n\n{{{< include _cats.qmd >}}}\n\n## Dogs\n\n{{{< include _dogs.qmd >}}}\n\n::::\n```\n\n## Interactive\n\n```markdown\n:::: {.content-visible when-format=\"html\"}\n::: panel-tabset\n\n## Cats\n\n{{{< include _cats.qmd >}}}\n\n## Dogs\n\n{{{< include _dogs.qmd >}}}\n\n:::\n::::\n```\n:::::\n\n. . .\n\nUse an underscore prefix for included files so they are automatically ignored by a Quarto render of a project ([Includes Quarto Docs](https://quarto.org/docs/authoring/includes.html)).\n\n# üí™üèº Exercise 4 {.exercise}\n\n**Use conditional content divs to control when tabsets are shown.**\n\n1. Modify `ex-4-conditional-content.qmd` so that the `panel-tabset` is visible for HTML reports and hidden for all other formats.\n\n<br>\n\n2. Explore the other options. There are multiple ways to get the same result.\n\n    {.content-visible when-format=\"html\"} == {.content-hidden unless-format=\"html\"}\n\n<br>\n\n3. üí¨ **Chat**: what other kinds of content might you want to make visible for only a certain format?\n\n\n\n::: {.cell}\n\n:::\n\n\n\n# Conditional code execution {.section}\n\n## Conditionally execute a code chunk\n\n::: incremental\n\n-   More efficient to not execute code that generates interactive outputs for static reports.\n\n-   Useful for executing interactive plot code (e.g., `plotly` or `ggiraph`) for HTML reports and static `ggplot2` code for all other formats. \n\n-   Useful for executing different code based on a parameter value.\n\n-   Not currently a feature of Quarto v1.4. Follow along with this [GitHub discussion](https://github.com/quarto-dev/quarto-cli/discussions/3260#discussioncomment-4573926).\n\n-   Chunk options can use R code for option values with `!expr`. Learn about the limitations to this YAML \"tag\" literal syntax in the [Quarto Chunk Options reference](https://quarto.org/docs/computations/r.html#chunk-options).\n\n:::\n\n## Conditional code based on output\n\nInclude in the setup chunk of your `.qmd` file.\n\nGet the format of the Pandoc output:\n\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: setup\n\n# Get output format\nformat <- knitr::opts_knit$get(\"rmarkdown.pandoc.to\")\n```\n````\n:::\n\n\n\n## Use `eval: !expr` chunk option\n\n::: panel-tabset\n\n## Static plot\n\n```markdown\n#| echo: fenced\n#| eval: !expr format %in% c(\"latex\", \"docx\")\n\n# code to create static {ggplot2}\n```\n\nüí° Pandoc uses LaTeX to create PDFs.\n\n## Interactive plot\n\n```markdown\n#| echo: fenced\n#| eval: !expr format == \"html\"\n\n# code to create interactive {plotly}\n```\n\n:::\n\n# üí™üèº Exercise 5 {.exercise}\n\n<br>\n\n**Conditionally execute `ggplot2` code for static reports & `plotly` code for interactive reports.**\n\n1. Open `ex-5-conditional-code.qmd`.\n\n2. Fill in the blanks for the `eval: ` option for `ggplot` code chunks and `plotly` code chunks.\n\n3. üí¨ **Discuss**: How would you change the `eval: ` option to execute a chunk based on a parameter value rather than the output format?\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n## Conditional code based on parameter\n\nUse `params` in `!expr`:\n\n``` r\n#| eval: !expr params$fave_breed == \"Snowshoe\"\n\n# Code for a special plot for my favorite cat breed.\n```\n\n<br>\n\n. . .\n\n``` r\n#| eval: !expr !params$fave_breed == \"Snowshoe\"\n\n# Code for a different plot for all other breeds.\n# Note the ! in front of params.\n```\n\n<br>\n\n. . .\n\n::: callout-tip\n## Community project: home energy monitoring\nConsider using a different conditional code chunk to create different visualizations depending on heating source.\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}