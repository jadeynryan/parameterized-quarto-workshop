{
  "hash": "b01822cd1d328b14ab03f3a3a6971f90",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Conditional content & code<br>![](../images/cascadia-jr-quarto.webp){width=4em}\"\nformat: revealjs\n---\n\n\n\n# Conditional content {.section}\n\n## Control content visibility\n\nCreate a div, span, or non-executable code block with one option from each of the below columns:\n\n`{.class attribute=\"format\"}`\n\n:::: {.columns}\n\n::: {.column width=\"30%\"}\n**Class**\n\n- `.content-visible`\n- `.content-hidden`\n:::\n\n::: {.column width=\"30%\"}\n**Attribute**\n\n- `when-format=\"___\"`\n- `unless-format=\"___\"`\n:::\n\n::: {.column width=\"30%\"}\n**Format**\n\n- `latex` or `pdf`\n- `epub`\n- `html` or `revealjs`\n- `markdown`\n:::\n\n::::\n\n:::: {.fragment style=\"margin-top:-3.5em\"}\n\n**Examples:**\n\n::: panel-tabset\n\n## Divs\n\n```markdown\n::: {.content-visible when-format=\"html\"}\n\nWill only appear in HTML.\n\n:::\n```\n\n## Spans\n\n``` markdown\nSome text\n[in HTML.]{.content-visible when-format=\"html\"}\n[in PDF.]{.content-visible when-format=\"pdf\"}\n```\n\n## Non-executable code\n\nFenced code blocks purely for documentation.\n\n````markdown\n```{.python .content-visible when-format=\"html\"}\n# code shown only in HTML\n2 + 2\n```\n````\n:::\n::::\n\n. . .\n\n[Conditional Quarto docs](https://quarto.org/docs/authoring/conditional.html) & [Format aliases](https://quarto.org/docs/authoring/conditional.html#format-matching)\n\n## Useful for static/interactive features\n\nPairs well with the `{{< include >}}` shortcode to re-use content without copying/pasting.\n\n. . .\n\n::::: panel-tabset\n\n## Static\n\n```markdown\n:::: {.content-visible unless-format=\"html\"}\n\n## Cats\n\n{{{< include _cats.qmd >}}}\n\n## Dogs\n\n{{{< include _dogs.qmd >}}}\n\n::::\n```\n\n## Interactive\n\n```markdown\n:::: {.content-visible when-format=\"html\"}\n::: panel-tabset\n\n## Cats\n\n{{{< include _cats.qmd >}}}\n\n## Dogs\n\n{{{< include _dogs.qmd >}}}\n\n:::\n::::\n```\n:::::\n\n. . .\n\n::: callout-tip\n## Good practice\nUse an underscore prefix for included files so they are automatically ignored by a Quarto render of a project ([Include shortcode Quarto docs](https://quarto.org/docs/authoring/includes.html)).\n:::\n\n# üí™üèº Exercise {.exercise}\n\n**Use conditional content divs to control when tabsets are shown.**\n\n1. Modify `3-conditional-content.qmd` so that the `panel-tabset` is visible for HTML reports and hidden for all other formats.\n\n\\\n\n2. Try another way to get the same result.\n\n    `{.content-visible when-format=\"html\"}` is essentially the same as `{.content-hidden unless-format=\"html\"}`.\n\n\\\n\n3. üí¨ **Chat**: Besides tabsets, what other kinds of content might you want to make visible for only a certain format?\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_072b54f0\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n# Conditional code execution {.section}\n\n## Conditionally execute a code chunk\n\n::: incremental\n\n-   More efficient to not execute code that generates interactive outputs for static reports.\n\n-   Useful for executing interactive plot code (e.g., `plotly` or `ggiraph`) for HTML reports and static `ggplot2` code for all other formats. \n\n-   Useful for executing different code based on a parameter value.\n\n-   Not currently a feature of Quarto v1.4. Follow along with this [GitHub discussion](https://github.com/quarto-dev/quarto-cli/discussions/3260#discussioncomment-4573926).\n\n-   Chunk options can use R code for option values with `!expr`. Learn about the limitations to this YAML \"tag\" literal syntax in the [Quarto Chunk Options reference](https://quarto.org/docs/computations/r.html#chunk-options).\n\n:::\n\n## Conditional code based on output\n\nGet the format of the Pandoc output by including the following in the setup chunk of your `.qmd` file:\n\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: setup\n\n# Get output format\nformat <- knitr::opts_knit$get(\"rmarkdown.pandoc.to\")\n```\n````\n:::\n\n\n\n## Use `eval: !expr` chunk option\n\n::: panel-tabset\n\n## Static plot\n\n```markdown\n#| echo: fenced\n#| eval: !expr format %in% c(\"latex\", \"docx\")\n\n# code to create static {ggplot2}\n```\n\n:::: callout-important\n## Use `latex` not `pdf`\n\n`format` comes from `knitr::opts_knit$get(\"rmarkdown.pandoc.to\")`. Pandoc uses LaTeX to create PDFs.\n\nQuarto [format aliases](https://quarto.org/docs/authoring/conditional.html#format-matching) won't work here.\n::::\n\n## Interactive plot\n\n```markdown\n#| echo: fenced\n#| eval: !expr format == \"html\"\n\n# code to create interactive {plotly}\n```\n\n:::\n\n# üí™üèº Exercise {.exercise}\n\n**Conditionally execute `ggplot2` code for static reports & `plotly` code for interactive reports.**\n\n1. Open `5-conditional-code.qmd`.\n\n2. In the `ggplot2` code chunks and `plotly` code chunks, fill in the blanks for the `eval: ` option.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Replace ___ with html, latex, or docx.\n\n#| eval: !expr format == \"___\"\n\n#| eval: !expr format %in% c(\"___\", \"___\")\n```\n:::\n\n\n\n3. üí¨ **Chat**: How would you change the `eval: ` option to execute a chunk based on a parameter value rather than the output format?\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_0633068c\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n## Conditional code based on parameter\n\nUse `params` in `!expr`:\n\n``` r\n#| eval: !expr params$fave_breed == \"Snowshoe\"\n\n# Code for a special plot for my favorite cat breed.\n```\n\n\\\n\n. . .\n\n``` r\n#| eval: !expr !params$fave_breed == \"Snowshoe\"\n\n# Code for a different plot for all other breeds.\n# Note the ! in front of params.\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}