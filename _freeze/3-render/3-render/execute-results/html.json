{
  "hash": "af0b4d919232beaf67995bc09dc8cc03",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Rendering reports<br> ![](../images/cascadia-jr-quarto.webp){width=5em}\"\nformat: revealjs\n---\n\n\n## Three ways to render\n\n::: incremental\n1. **RStudio/Quarto integration**:\n\n    ![](https://quarto.org/docs/get-started/hello/images/rstudio-render-button.png){fig-alt=\"Quarto render button in RStudio\" style=\"vertical-align:middle;\" width=\"49\"} **Render** button in RStudio or `Cmd`/`Ctrl` + `Shift` + `K` keyboard shortcut\n\n2. ‚ú® **Quarto R package** ‚ú®\n\n    ```{.r filename=\"Console or R script\"}\n    quarto::quarto_render(\n      input = here::here(\"2-quarto-render.qmd\"),   # Input Quarto file\n      execute_params = list(                       # Named list of params\n        pet_type = \"cats\",\n        fave_breed = \"Snowshoe\"))\n    ```\n\n3. **Quarto CLI**\n\n    ```{.bash filename=\"Terminal\"}\n    quarto render 2-quarto-render.qmd -P pet_type:'cats' -P fave_breed:'Snowshoe'\n    ```\n\n:::\n\n# üí™üèº Exercise 2-1 {.exercise}\n\n**Change parameters in the YAML and render using ![](https://quarto.org/docs/get-started/hello/images/rstudio-render-button.png){fig-alt=\"Quarto render button in RStudio\" style=\"vertical-align:middle;\" width=\"49\"} Render button.**\n\n1. Look at the unique pet breeds and pick your favorite.\n   ```{.r}\n   # Run in the console\n   pets <- readr::read_rds(here::here(\"data\", \"pets.RDS\")) |> \n      dplyr::distinct(pet_type, breed) |> View()\n   ```\n   \n2. In `2-quarto-render.qmd` Change the default parameters in the YAML to your favorite pet type and breed. Render using the ![](https://quarto.org/docs/get-started/hello/images/rstudio-render-button.png){fig-alt=\"Quarto render button in RStudio\" style=\"vertical-align:middle;\" width=\"49\"} **Render** button.\n\n    ```{.yaml}\n    params:\n      pet_type: \"___\"\n      fave_breed: \"___\"\n    ```\n\n3. üí¨ **Chat**: Which breed did you pick and why? What do you think will happen if you set the `pet_type` default parameter to \"cats\" and the `fave_breed` parameter to \"American Bulldog\"? \n\n    Try it out and discuss what happend!\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_7bbfd2c7\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">07</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n# üí™üèº Exercise 2-2 {.exercise}\n\n**Change parameters and render using `quarto_render()`.**\n\n1. Render with `quarto::quarto_render()`.\n\n   ```r\n   # Run in the console\n    quarto::quarto_render(\n      input = here::here(\"2-quarto-render.qmd\"),\n      execute_params = list(\n        pet_type = \"___\",\n        fave_breed = \"___\"))\n   ```\n\n2. üí¨ **Chat**: What kinds of variables will you use as parameters for your reports? \n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_fe1142fa\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">07</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n## Render all 538 reports \n\nOne HTML report for each cat breed and each dog breed.\n\n:::: panel-tabset\n\n## üìä Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\npets <- readr::read_rds(here::here(\"data\", \"pets.RDS\"))\n\npets |>\n  dplyr::distinct(pet_type, breed) |>\n  dplyr::count(pet_type) |>\n  janitor::adorn_totals()\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|pet_type |   n|\n|:--------|---:|\n|cats     | 104|\n|dogs     | 434|\n|Total    | 538|\n\n</div>\n:::\n:::\n\n\n## üë∑üèº‚Äç‚ôÇÔ∏è Manual 1\n\n1. Change the default `params` in the YAML.\n\n2. **Render** button or `Cmd`/`Ctrl` + `Shift` + `K` keyboard shortcut.\n\n3. Rename the rendered report to include the parameter & prevent overwriting.\n\n4. Repeat 537 times.\n\nüò≠\n\n## üë∑üèª‚Äç‚ôÄÔ∏è Manual 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquarto::quarto_render(\n  input = here::here(\"2-quarto-render.qmd\"),\n  output_file = \"dogs-affenpinscher-report.html\",\n  execute_params = list(\n    pet_type = \"dogs\",\n    fave_breed = \"Affenpinscher\"))\n\nquarto::quarto_render(\n  input = here::here(\"2-quarto-render.qmd\"),\n  output_file = \"dogs-afghan-hound-report.html\",\n  execute_params = list(\n    pet_type = \"dogs\",\n    fave_breed = \"Afghan Hound\"))\n\nquarto::quarto_render(\n  input = here::here(\"2-quarto-render.qmd\"),\n  output_file = \"dogs-aidi-chien-de-montagne-de-l-atlas-report.html\",\n  execute_params = list(\n    pet_type = \"dogs\",\n    fave_breed = \"Aidi Chien De Montagne De L Atlas\"))\n\nquarto::quarto_render(\n  input = here::here(\"2-quarto-render.qmd\"),\n  output_file = \"dogs-akita-report.html\",\n  execute_params = list(\n    pet_type = \"dogs\",\n    fave_breed = \"Akita\"))\n\n# + 534 more times... \n# üò≠\n```\n:::\n\n\n## ‚ö° Programatically\n\n**Create a dataframe with three columns that match `quarto_render()` args:**\n\n- `output_format`: file type (html, revealjs, pdf, docx, etc.)\n\n- `output_file`: file name with extension\n\n- `execute_params`: named list of parameters\n\n**Map over each row:**\n\n- `purrr::pwalk(dataframe, quarto_render, <arguments for quarto_render>)` üòé\n::::\n\n## Primer on `purrr` functions for iteration\n\n:::: {.columns}\n\n::: {.column width=\"60%\"}\n**Map functions** apply the same action/function to each element of an object.\n\n-   Base R `apply()` functions are map functions.\n\n-   `purrr` map functions have consistent syntax and the output data type is predictable.\n\n`for loops` &rarr; `lapply()` &rarr; `purrr::map()`\n:::\n\n::: {.column width=\"5%\"}\n:::\n\n::: {.column width=\"35%\"}\n![](https://purrr.tidyverse.org/logo.png){fig-alt=\"purrr R package logo\"}\n:::\n::::\n\n. . .\n\n**Learn more**:\n\n- [Iteration chapter of *R for Data Science*](https://r4ds.had.co.nz/iteration.html)\n\n- R-Ladies Baltimore presentation [*Make your R Code purr with `purrr`*](https://www.youtube.com/watch?v=IewsPpjKElc)\n\n- Jenny Bryan's [tutorial](https://jennybc.github.io/purrr-tutorial/) and [workshop](https://github.com/jennybc/row-oriented-workflows)\n\n## Create dataframe to iterate over\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2|4|5-9|11-14|\"}\npet_reports <- pets |>\n  dplyr::distinct(pet_type, breed) |>   # Get distinct pet/breed combos\n  dplyr::mutate(\n    output_format = \"html\",             # Make output_format column\n    output_file = paste(                # Make output_file column:\n      tolower(pet_type),                # cats-abyssiniane-report.html\n      tolower(gsub(\" \", \"-\", breed)),           \n      \"report.html\",\n      sep = \"-\"\n    ),\n    execute_params = purrr::map2(       # Make execute_params column\n      pet_type,\n      breed,\n      \\(pet_type, breed) list(pet_type = pet_type, breed = breed)))\n```\n:::\n\n        \n## Subset to first 2 cat/dog breeds\n\n\n::: {.cell}\n\n```{.r .cell-code}\npet_reports_subset <- pet_reports |>\n  dplyr::slice_head(n = 2, by = pet_type) |>\n  dplyr::select(output_file, execute_params)\n\npet_reports_subset\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|output_file                    |execute_params               |\n|:------------------------------|:----------------------------|\n|cats-abyssiniane-report.html   |cats       , Abyssiniane     |\n|cats-aegean-cat-report.html    |cats      , Aegean Cat       |\n|dogs-affenpinscher-report.html |dogs         , Affenpinscher |\n|dogs-afghan-hound-report.html  |dogs        , Afghan Hound   |\n\n</div>\n:::\n:::\n\n\n## Map over each row \n\n::: incremental\n-   `purrr::pwalk()` iterates over multiple arguments simultaneously.\n\n-   First `.l` argument is a *list of vectors*. \n\n    - Dataframe is a special case of `.l` that iterates over rows.\n:::\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2|3|4|5|\"}\npurrr::pwalk(\n  .l = pet_reports_subset,                      # Dataframe to map over\n  .f = quarto::quarto_render,                   # Function we are applying to each row\n  input = here::here(\"2-quarto-render.qmd\"),    # Named arguments of .f\n  .progress = TRUE                              # Show a progress bar :)\n)\n```\n:::\n\n\n. . .\n\n::: callout-note\n`input` is the only named argument of `quarto_render()` included in `pwalk()`.\n\n\n`output_format`, `output_file`, and `execute_params` are already passed in through the dataframe.\n:::\n\n# Multiple formats {.section}\n\n## Render all reports to all formats\n\nAdd to the `format:` YAML option to render additional output formats from the same `.qmd` file.\n\n``` {.yaml}\n---\nformat:\n  html: \n    embed-resources: true   # Makes the report self-contained\n  pdf: default              # If not using any additional format options,\n  docx: default             # set value to `default`  \n---\n```\n\n. . .\n\n**Note**: the Render button now has a dropdown!\n\n![](images/render-button.png){width=60% fig-alt=\"Screenshot of Quarto file with the Render dropdown showing options for HTML, PDF, and MS Word formats.\"}\n\n[Quarto docs on multiple formats](https://quarto.org/docs/get-started/authoring/rstudio.html#multiple-formats)\n\n## Format links for HTML output\n\nLinks to download the other formats will automatically appear in HTML documents.\n\n![](images/other-formats.png){fig-alt=\"Screenshot of a HTML page that includes links to the PDF and MS Word formats in the table of contents under the heading Other Formats.\" style=\"border-radius:1em\"}\n\n## Format link options\n\n**Choose which format links to include:**\n\n\n::: {.cell}\n\n```{.yaml .cell-code  code-line-numbers=\"7\"}\n---\nformat:\n  html: \n    embed-resources: true\n  pdf: default\n  docx: default\nformat-links: [pdf, docx]\n---\n```\n:::\n\n\n. . .\n\n**Or hide all links:**\n\n\n::: {.cell}\n\n```{.yaml .cell-code  code-line-numbers=\"7\"}\n---\nformat:\n  html: \n    embed-resources: true\n  pdf: default\n  docx: default\nformat-links: false\n---\n```\n:::\n\n\n# üíÉüèª Demo {.demo}\n\nProgrammatically render all reports in all formats in `3-purrr-render-demo.qmd` and `3-purrr-render-demo.R`.\n\n\\\n\nüí° Use these files as a template and modify them for your own projects!\n\n## Directory limitations\n\n::: incremental\n\n:::: callout-important\n## Can't render reports to another directory.\n\n[`output-dir` YAML option](https://quarto.org/docs/books/book-output.html#output-path) only works for *Quarto projects* that contain a `_quarto.yml` config file.\n\n**Workaround**: use [`{fs}`](https://fs.r-lib.org/) to move files after rendering. \n    \nSee `3-purrr-render-demo.R` for example.\n  \n**More info**: [GitHub discussion](https://github.com/quarto-dev/quarto-cli/discussions/2171#discussioncomment-4865286) and [GitHub issue](https://github.com/quarto-dev/quarto-r/issues/81).\n::::\n\n\\\n\n:::: callout-important\n##  Can't embed resources for a Quarto document in a subfolder.\n\nIf using `embed-resources: true` YAML option, `.qmd` can't be in subfolder, otherwise:\n\n[[WARNING] Could not fetch resource ...]{.warning}\n\n**More info**: [GitHub discussion](https://github.com/quarto-dev/quarto-cli/discussions/4041#discussioncomment-6052000) and [GitHub issue](https://github.com/quarto-dev/quarto-cli/issues/5765).\n::::\n:::\n\n# üö∂üèª‚Äç‚ôÄ 30-min break üßòüèæ‚Äç‚ôÇÔ∏èÔ∏è {.section}\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_98d98051\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">30</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}