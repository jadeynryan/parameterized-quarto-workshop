# R Markdown ‚Üí Quarto {.section}

## R Markdown is an authoring framework supported by many R packages

![Figure from "Hello, Quarto" keynote by Julia Lowndes and Mine √áetinkaya-Rundel, presented at RStudio::Conf(2022).](images/rmd-ecosystem.png){style="margin-top:-5em;margin-bottom:-1em" fig-alt="Hex logos for various packages from the R Markdown ecosystem." fig-align="center" width="700"}

## Quarto is a publishing system that supports many multiple & outputs

::: r-stack
![Artwork from "Hello, Quarto" keynote by Julia Lowndes and Mine √áetinkaya-Rundel, presented at RStudio::Conf(2022). Illustrated by Allison Horst.](images/horst-quarto-schematic.png){.fragment .fade-out fragment-index="1" fig-alt="A schematic representing the multi-language input (e.g. Python, R, Observable, Julia) and multi-format output (e.g. PDF, html, Word documents, and more) versatility of Quarto." fig-align="center" style="margin-top:-1.5em;margin-bottom:-1em"}

![](images/horst-qmd-render-schema.png){.fragment fragment-index="1" fig-alt="A schematic representing rendering of Quarto documents from .qmd, to knitr or jupyter, to plain text markdown, then converted by pandoc into any number of output types including html, PDF, or Word document." fig-align="center" style="margin-top:-1.5em;margin-bottom:-1em"}
:::

## R Markdown vs Quarto

::: columns
::: {.column width="50%"}
![](images/rmarkdown.png){width="150" style="float:left;padding: 0 1em 0 0"}

### R Markdown

-   Vast R Markdown ecosystem

-   Dependent on R
:::

::: {.column width="50%"}
![](images/quarto.png){width="150" style="float:left;padding: 0 1em 0 0"}

### Quarto

-   Command line interface (CLI)

-   Expands R Markdown ecosystem

-   "Batteries included"

-   Multi-language and multi-engine
:::
:::

. . .

<br>

**If you're happy with R Markdown and it's not broken, no need to switch!**

. . .

<br>

R Markdown will still be maintained but likely no new features [(Xie 2022)](https://yihui.org/en/2022/04/quarto-r-markdown/).

## How I use Quarto

::: {.r-stack}
![](images/quarto-workshop-website.png){.fragment .fade-in-then-out fig-alt="Screenshot of this workshop website built with Quarto" width="80%"}

![](images/ceds-workshop-slides.png){.fragment .fade-in-then-out fig-alt="Screenshot of workshop slides built with Quarto and revealjs" width="80%"}

![](images/personal-website.png){.fragment .fade-in-then-out fig-alt="Screenshot of my personal website built with Quarto" width="80%"}

![](images/personal-blog.png){.fragment .fade-in-then-out fig-alt="Screenshot of my personal blog built with Quarto" width="80%"}

![](images/qc-summary-report.png){.fragment .fade-in-then-out fig-alt="Screenshot of HTML report titled QC Summary of 2020-2023 Results, Author Jadey Ryan, Published August 28, 2023, Table of contents, a bullet point list summary, and a table with summary statistics. There is a scroll bar on the right, indicating the report has much more content than shown." width="80%"}

![](images/soils-report-word-2021.png){.fragment .fade-in-then-out fig-alt="2021 MS Word report for soil health survey participant, generated from a parameterized Quarto report."}

![](images/soils-report-word.png){.fragment .fade-in-then-out fig-alt="2023 MS Word report for soil health survey participant, generated from a parameterized Quarto report."}

![](images/soils-report-html.png){.fragment .fade-in-then-out fig-alt="2023 HTML report for soil health survey participant, generated from a parameterized Quarto report." width="80%"}
:::

## More real-world applications of Quarto

[Quarto gallery](https://quarto.org/docs/gallery/){preview-link="true"}

[Quarto website showcase](https://qmdclub.com/){preview-link="true"}

[New format type: manuscripts](https://quarto.org/docs/manuscripts/){preview-link="true"}

[New format type: dashboards](https://quarto.org/docs/dashboards/){preview-link="true"}

## Convert `.Rmd` ‚Üí `.qmd`

1.  Change file extension from `.Rmd` ‚Üí `.qmd`
2.  Change YAML header (`output:` ‚Üí `format:`)
3.  Convert chunk headers with `knitr::convert_chunk_header()`

. . .

:::: {.columns}
::: {.column width="50%"}

**R Markdown**

```{r, label=rmarkdown, eval=FALSE}
#| echo: fenced
# code
```

:::

::: {.column width="50%"}

**Quarto**

```{r}
#| label: quarto
#| echo: fenced
#| eval: false

# code
```

:::
::::

. . .

üÜï **Shiny app to convert R Markdown to Quarto** ‚ú®

App: <https://mounaabelaid.shinyapps.io/RMarkdown2Quarto>

Repo: <https://github.com/MounaBelaid/RMarkdown2Quarto>

## One sad difference üò• {visibility="hidden"}

No Quarto equivalent to .Rmd [Knit with Parameters GUI](https://bookdown.org/yihui/rmarkdown/params-knit.html#the-interactive-user-interface) built with Shiny [{miniUI}](https://github.com/rstudio/miniUI).

:::: {.columns}

::: {.column width="50%"}
![Figure from [*R Markdown: The Definitive Guide* (Xie et al. 2023)](https://bookdown.org/yihui/rmarkdown/params-knit.html#the-interactive-user-interface)](https://bookdown.org/yihui/rmarkdown/images/params-input.png){fig-alt="Input parameter values interactively for parameterized reports." fig-align="left"}
:::

::: {.column width="50%"}

<br>

**Workaround**: build web app to get input, serialize to YAML, pass to Quarto render.

**More info**: [GitHub discussion](https://github.com/quarto-dev/quarto-cli/discussions/7581#discussioncomment-7603016)
:::

::::

## Resources for R Markdown users

- [From R Markdown to Quarto workshop](https://quarto.org/docs/blog/posts/2023-12-05-asa-traveling-courses/) taught by Dr. Mine √áetinkaya-Rundel and Dr. Andrew Bray.

- [Quarto FAQ for R Markdown Users](https://quarto.org/docs/faq/rmarkdown.html)

- Ted Laderas' talk [Quarto / R Markdown - What's Different?](https://laderast.github.io/qmd_rmd)

# Get started with Quarto {.section}

# {background-iframe="https://quarto.org/docs/get-started/" background-interactive=true}

## Create a single Quarto document

One `.qmd` file for a report, presentation, or dashboard

**File** > **New File** > **Quarto Document...**

![](images/new-quarto-doc.png){fig-alt="Pop up menu for creating a new document. The title field shows that we entered &quot;2024 Sampling Report&quot; and the author field shows the name &quot;Jadey Ryan&quot;. HTML format is selected via the radio button."}

## Create a Quarto project

Multiple `.qmd` files for a website, blog, or book

**File** > **New Project** > **New Directory** > **Quarto Project/Website/Blog/Book**

![](images/quarto-project.png){fig-alt="Pop up menu for creating a new project in a new directory. A list of Project Types are presented with Quarto Project, Quarto Website, Quarto Blog, and Quarto Book highlighted."}

## Authoring

Toggle between **Visual** and **Source** modes with `Cmd`/`Ctrl` + `Shift`+ `F4.`

![](images/rstudio-source-visual.png){fig-alt="On the left: Document in the visual editor. On the right: Same document in the source editor. The visual/source editor toggle is highlighted in both documents marking their current state. The document shown is the \"Hello Quarto\" document from a previous image on the page."}

::: footer
Image adapted from [Tutorial: Hello, Quarto](https://quarto.org/docs/get-started/hello/).
:::

# üí™üèº Exercise 1-1 {.exercise}

1. Create a Quarto document that will generate an HTML output format. Name it `1-hello-quarto`.

2. Toggle between **Visual** and **Source** modes. What differences in the RStudio IDE do you notice?

3. In **Visual** mode, try a traditional keyboard shortcut to format text in Google Docs or Microsoft Word (`Cmd`/`Ctrl` + `B` to bold text).

4. Try out other formatting shortcuts you normally use.

5. Try inserting an image using the **Insert Anything** shortcut (`Cmd`/`Ctrl` + `/`).

```{r}
#| echo: false
countdown::countdown(minutes = 5, top = 0)
```

## Three ways to render

1. Use the RStudio/Quarto integration

![](images/rstudio-render-button.png){fig-alt="Quarto render button in RStudio" style="vertical-align:middle;" width="49"} **Render** button to render the file and preview the output.

Keyboard shortcut: `Cmd`/`Ctrl` + `Shift` + `K`

![](images/rstudio-render.png){fig-alt="Top of the text editor in RStudio with the Render button highlighted with a purple box."}

. . .

Check the **Render on Save** option to automatically render and update the preview after saving.

![](images/rstudio-render-on-save.png){fig-alt="Top of the text editor in RStudio with the Render on Save checkbox checked and highlighted with a purple box."}

::: footer
Images from [Tutorial: Hello, Quarto](https://quarto.org/docs/get-started/hello/).
:::

## Three ways to render

2. Use the **`quarto` package** in the Console or an R script

```{.r filename="Console or R script"}
quarto::quarto_render(input = "hello.qmd", output_format = "html")
```

. . .

3. Use the **CLI** in the Terminal

```{.bash filename="Terminal"}
quarto render hello.qmd --to html
```

# üí™üèº Exercise 1-2 {.exercise}

1. Render the document using the ![](images/rstudio-render-button.png){fig-alt="Quarto render button in RStudio" style="vertical-align:middle;" width="49"} **Render** button.

2. Modify the text and code, render using the `quarto` package, and review the output.

3. Check the **Render on Save** option, make more changes, save, and watch the preview update.

```{r}
#| echo: false
countdown::countdown(minutes = 3, top = 0)
```

# Anatomy of a `.qmd` file {.section}

1. YAML header (metadata and document options)

2. Narrative (text)

3. Code chunks (import, wrangle, visualize data)

## 1. YAML header

"Yet Another Markup Language" or "YAML Ain't Markup Language"

``` {.yaml}
---                           # <1>
title: 2024 Sampling Report   # <2>
author: Jadey Ryan            # <2>
date: 2024-04-25              # <2>
format:                       # <2>
  html:                       # <3>
    theme: flatly             # <3>
    toc: true                 # <3>
---                           # <1>
```

1. Demarcated by three dashes (`---`) on the top and bottom

2. Document level metadata and options using key-value pairs in the format `key: value`

3. Use 2 spaces for each indentation level -- YAML is very fussy!

<br>

. . .

See available options in the **reference guides**: [HTML](https://quarto.org/docs/reference/formats/html.html){preview-link="true"}, [PDF](https://quarto.org/docs/reference/formats/pdf.html){preview-link="true"}, [MS Word](https://quarto.org/docs/reference/formats/docx.html){preview-link="true"}.

## YAML intelligence: tab-completion

-   Start a word and then Tab to complete. 

-   `Cmd`/`Ctrl` + `Space` to see all available options.

![](images/rstudio-yaml-completion.png){fig-alt="Quarto document with YAML being edited. Next to the cursor code completion helper is open showing YAML options beginning with the letters preceding the cursor ('to')."}

::: footer
Content and image adapted from [YAML Intelligence on quarto.org](https://quarto.org/docs/tools/rstudio.html#yaml-intelligence).
:::

## YAML intelligence: diagnostics

Incorrect YAML is highlighted when documents are saved:

![](images/rstudio-yaml-diagnostics.png){fig-alt="Quarto document YAML metadata with an incorrect option underlined in red."}

::: footer
Content and image adapted from [YAML Intelligence on quarto.org](https://quarto.org/docs/tools/rstudio.html#yaml-intelligence).
:::

# üí™üèº Exercise 1-3 {.exercise}

1. Explore the [Quarto documentation on HTML theming](https://quarto.org/docs/output-formats/html-themes.html) and choose a [Bootswatch theme](https://bootswatch.com/). 

2. Add your chosen theme to the YAML.

  ```yaml
  format:                      
    html:                       
      theme: flatly 
  ```

3. `Cmd`/`Ctrl` + `Space` to see all available YAML options for the HTML format.

4. Try any that sound interesting.

5. üí¨ **Discuss**: Share your two favorites.

Use the [HTML reference](https://quarto.org/docs/reference/formats/html.html) as needed.

```{r}
#| echo: false
countdown::countdown(minutes = 8, top = 0)
```

## 2. Narrative

Markdown syntax for:

::: incremental

-   Text with formatting: `**bold**` &rarr; **bold**

-   Section headers: `# Header 1`, `# Header 2`

-   Hyperlinks: `[google.com](https://google.com)` &rarr; [google.com](https://google.com)

-   Images: `![](image.png)`

-   Inline code: ``` `{r} Sys.Date()` ``` &rarr; ```r Sys.Date()```

-   Inline math: ``` `$E = mc^{2}$` ``` &rarr; $E = mc^{2}$
:::

<br>

. . .

[**Guide to markdown syntax**](https://quarto.org/docs/authoring/markdown-basics.html){preview-link="true"}

# üí™üèº Exercise 1-4 {.exercise}

1. Enable the **Visual** mode.

2. Explore the **Format**, **Insert**, and **Table** drop downs.

3. Pick one or two options from these drop downs and try them out.

4. Switch to the **Source** mode and see what that formatting or feature looks like in markdown syntax.

5. üí¨ **Discuss**: Share your two favorites.

```{r}
#| echo: false
countdown::countdown(minutes = 5, top = 0)
```

## 3. Code chunks (or cells or blocks)

**Three ways to insert code chunks:**

1.    Keyboard shortcut `Cmd`/`Ctrl` + `Option`/`Alt` + `I`.

2.    ![](images/rstudio-insert-chunk.png){fig-alt="Insert Chunk button in RStudio" style="vertical-align:middle;" width="49"} **Insert Chunk** button in the editor toolbar.

3.    Manually type the chunk delimiters ```` ```{r} ```` and ```` ``` ````.

. . .

**Two ways to run code chunks:**

1.    Use the **Run Current Chunk** or **Run All Chunks Above** buttons.

      ![](images/rstudio-code-chunk.png){fig-alt="Code chunk in RStudio with the Run All Chunks Above and Run Current Chunk buttons highlighted and labelled."}

2.    Run the current code chunk with `Cmd`/`Ctrl` + `Shift` + `Enter`.

# üí™üèº Exercise 1-5 {.exercise}

1. Insert a code chunk at the beginning of the document that includes `library(ggplot2)`.  
   Do not run this chunk yet.

2. Insert a chunk at the end that includes `ggplot2` code to generate a plot of your choice.  
   Browse the various geoms on the [ggplot2 documentation website](https://ggplot2.tidyverse.org/reference/index.html#geoms) for examples.

3. Try running just this plot code chunk. It should error with `could not find function "ggplot"`. 
   üí¨ **Discuss**: We attached the `ggplot2` package, why can't R find the `ggplot` function? 

4. Click the **Run All Chunks Above** button. 
   
   üí¨ **Discuss**: Why do you think it worked this time?

```{r}
#| echo: false
countdown::countdown(minutes = 8, top = 0)
```

## Optional code chunk labels

:::: {.columns}

::: {.column width="40%"}
Use a hashpipe (`#|`) to specify **labels**.

```{r}
#| echo: fenced
#| label: simple-addition
#| code-line-numbers: "|2"

1 + 1
```
:::

::: {.fragment .column width="60%"}
Improve **documentation** and **navigation**.

![Figure from the [Quarto chapter of *R for Data Science*](https://r4ds.hadley.nz/quarto#chunk-label)](images/quarto-chunk-nav.png){fig-align="left" fig-alt="Snippet of RStudio IDE showing only the drop-down code navigator which shows three chunks. Chunk 1 is setup. Chunk 2 is cars and it is in a section called Quarto. Chunk 3 is pressure and it is in a section called Including plots."}
:::
::::

## Optional code chunk options

Use a hashpipe (`#|`) to specify **options**.

```{r}
#| echo: fenced
#| label: simple-multiplication
#| eval: false
#| code-line-numbers: "|3-4"

2 * 3
```

. . .

**Control code execution, text or plot output, layout, captions, etc.**

-   `eval: false` prevents code from being evaluated and does not generate results.
    Use this to display example code or disable a code block.

-   `echo: false` prevents code, but not the results from appearing in the report.
    Use this when writing reports aimed at people who don't want to see the underlying R code.

. . .

**Use tab-completion to see available options!**

Read about `knitr` specific options in the [developer's documentation](https://yihui.org/knitr/options/){preview-link="true"} or the [Quarto Code Cells: Knitr reference](https://quarto.org/docs/reference/cells/cells-knitr.html).

::: footer
Content adapted from the [Quarto chapter of *R for Data Science*](https://r4ds.hadley.nz/quarto#chunk-label).
:::

# üí™üèº Exercise 1-6 {.exercise}

1. Add appropriate **labels** to the first and last code chunks.

2. Try navigating to the chunks using the drop down navigator at the bottom left of the source pane.

3. Add `#| echo: false` to all chunks and re-render. How did this change the report?

4. Try two more chunk options and re-render.  
   To see all options, type `#| ` then `Tab`, or `Cmd`/`Ctrl` + `Space`. 
   
5. üí¨ **Discuss**: Share which options you tried and what they did.

Use the [Code Cells: Knitr reference](https://quarto.org/docs/reference/cells/cells-knitr.html) as needed.

```{r}
#| echo: false
countdown::countdown(minutes = 6, top = 0)
```

## Global options

Use for chunk options you want to apply to all chunks by default.

**Code execution options:**

``` yaml
---
title: "Report for audience that doesn't need to see the code"
execute:
  echo: false
---
```

<br>

. . .

**Some global options relevant only to R must be set under the `knitr` key, under `opts_chunk`:**

``` yaml
---
title: "Report with all plots centered"
knitr:
  opts_chunk:
    fig-align: "center"
---
```
::: footer
Content adapted from the [Quarto chapter of *R for Data Science*](https://r4ds.hadley.nz/quarto#chunk-label).
:::

# üí™üèº Exercise 1-7 {.exercise}

1. Delete the `echo: false` option from all code chunks.

2. Add `code-fold: true` (under the `html:` key in the YAML header) to collapse all code chunks by default.

3. üí¨ **Discuss**: What do you think will happen if you add `echo: false` (under the `execute:` key in the YAML header)? Try it out.

4. Try adding a `knitr: opts_chunk:` global option. Careful with indentation!  

   ``` yaml
   knitr:
     opts_chunk:
       out-width: 50%   # width of the plot in the output document
   ```
   Tab-completion doesn't seem to work for the `opts_chunk` YAML key.  
   Use the [Code Cells: Knitr reference](https://quarto.org/docs/reference/cells/cells-knitr.html#figures) as needed.

‚è±**10-min break after this exercise**

```{r}
#| echo: false
countdown::countdown(minutes = 6, top = 0)
```

# üö∂üèª‚Äç‚ôÄ Break üßòüèª‚Äç‚ôÄÔ∏è {.section}

```{r}
#| echo: false
countdown::countdown(minutes = 10, top = 0)
```
