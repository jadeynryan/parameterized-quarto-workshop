# Parameterized reports {.section}

## Many use cases

::: columns
::: {.column width="25%"}
![](images/ocean-floor.png){.lightbox group="examples"
fig-alt="RStudio R Markdown parameterized report project for mapping ocean floors."}

[Ocean floor maps](https://rmarkdown.rstudio.com/lesson-6.html)
:::

::: {.column width="25%"}
![](images/urban-institute.png){.lightbox group="examples"
fig-alt="Report for Alabama spending with text and plots generated from parameterized R Markdown."}

[Fiscal
briefs](https://book.rwithoutstatistics.com/parameterized-reports-chapter.html)
:::

::: {.column width="25%"}
![](images/driver-quality.png){.lightbox group="examples"
fig-alt="Report for Alaska driver quality with text, plot, and table generated from parameterized RMarkdown."}

[Bad
drivers](https://urban-institute.medium.com/iterated-fact-sheets-with-r-markdown-d685eb4eafce)
:::

::: {.column width="25%"}
![](images/soils-report-html.png){.lightbox group="examples"
fig-alt="HTML report for soil health survey participant, generated from a parameterized Quarto report."}

[Soil health](https://wa-department-of-agriculture.github.io/soils/)
:::
:::

. . .

<br>

**Different audiences, different reports**

Show code for technical staff and hide code for everyone else ([StackOverflow
example](https://stackoverflow.com/questions/73571919/how-to-pass-logical-parameters-with-the-quarto-r-package-to-the-knitr-chunk-opti)).

## Like a custom function

::: r-stack
![](images/template1.png){.fragment
fig-alt="File with the word '.qmd' inside and the word 'Function' above."
width="1300" fig-align="left" style="margin-top:-1em"}

![](images/template2.png){.fragment
fig-alt="An arrow points from 'Input' with 'params$year' to the previous image with 'Function' and '.qmd' file."
width="1300" fig-align="left" style="margin-top:-1em"}

![](images/template3.png){.fragment
fig-alt="In addition to the previous two images, arrows point to five reports with years 2019 through 2023 on them in a flow chart."
width="1300" fig-align="left" style="margin-top:-1em"}
:::

## What makes a report "parameterized"?

-   YAML header with `params` key-value pairs

-   Use these `params` to create different variations of a report from a single `.qmd` document.

. . .

::: callout-important
-   Valid parameter values are strings, numbers, or Boolean.

-   Must serialize a dataframe to pass it as a parameter, then un-serialize it
    back to a dataframe within the `.qmd` content.

-   See [Christophe Dervieux's answer in Posit
    Community](https://community.rstudio.com/t/param-converted-from-data-frame-to-list/155556/9)
    to understand why.

-   See [John Paul Helveston's blog
    post](https://www.jhelvy.com/posts/2023-02-28-parameterized-pdfs-with-quarto/#passing-data-frames-as-parameters)
    to learn how to use {jsonlite} as a workaround.
:::

## Workflow

::: incremental
1.  Write report template with default values hard-coded, and then render & review.

2.  Set default `params` key-value pairs in YAML. 

3. Replace hard-coded values with the `params` variables.

4.  Render the single report and review.

5.  Render extreme cases and review.

    -   Parameter values with barely any data and with tons of data.

6.  Render all variations of the report at once.
:::

# üí™üèº Exercise 2 {.exercise}

**Explore a report without parameters and see where we could add them.**

1.  Open `2-swiss-cats.qmd`.

2.  Click the
    ![](https://quarto.org/docs/get-started/hello/images/rstudio-render-button.png){fig-alt="Quarto render button in RStudio"
    style="vertical-align:middle;" width="49"} **Render** button.

3.  Look at the source markdown & code and the rendered report.

4.  üí¨ **Discuss**: What variables could we set as parameters?

    üí° **Hint**: run the `setup` chunk and look at the `pets` dataframe to see
    what variables it has.

```{r}
#| echo: false
countdown::countdown(minutes = 5, top = 0)
```

## Set `params` in YAML header

```{.yaml code-line-numbers="|2|3,4,6|7-8|11"}
---
title: "Swiss Cats"             # Metadata
format:                         # Set format types
  html:
    toc: true                   # Set additional options
  docx: default                           
params:                         # Set default parameter key-value pairs
  fave_breed: "Snowshoe"                                
---
    
Report content goes here.       # Write narrative and code
```

. . .

::: callout-important
Your default `params` key-value pairs must be found in your dataset. Otherwise, code will error or output will be blank.

The variable name for `params` can be anything you choose. Often, it's a column name in your dataset.
:::

## Access `params`

```{r}
#| include: false

# Set params for slide
params <- list(
  fave_breed = "Snowshoe"
)
```

Run any line or chunk to add `params` to your environment.

. . .

`params` object is a list.

```{r}
str(params)
```

<br>

. . .

Access with `$` notation.

```{r}
params$fave_breed
```

<br>

. . .

For inline code in YAML or report content, enclose the expression in `` `r ` ``.

```{markdown}
My favorite cat breed is the **`r params$fave_breed`**.
```

My favorite cat breed is the **`r params$fave_breed`**.

## Replace hard-coded values with `params`

-   `Cmd`/`Ctrl` + `F` to find where to replace hard-coded values with `params`.

![](images/find-replace-hard-coded-values.png){fig-alt="Find and replace toolbar with &quot;pet_type in the Search field highlighted by a purple box and &quot;params$pet_type in the Replace field highlighted by a blue box. The .qmd file shows a filter statement with the &quot;pet_type highlighted by RStudio as a match for the Find tool. This filter statement is highlighted by a purple box with an arrow pointing to a blue box that has the filter statement with the hard-coded &quot;cats string replaced with &quot;params$pet_type."}

## Replace hard-coded values with `params`

Use inline R code for markdown.

```{markdown}
## My favorite breed: `r params$fave_breed`
```

<br>

. . .

Use `paste()` or `glue::glue()` for plot and table titles and labels.

```{r}
#| eval: false

# ggplot code +
labs(title = paste(params$fave_breed, "population"))

# OR

# ggplot code +
labs(title = glue::glue("{params$fave_breed} population"))
```

##

![](images/snowshoe-graph.png){fig-align="center"}

# üíÉüèª Demo {.demo}

Modify `2-swiss-cats.qmd` to add `pet_type` and `fave_breed` parameters.

<br>

This parameterized version of `2-swiss-cats.qmd` is the starting point for the next section's exercises (`3-quarto-render.qmd`).
