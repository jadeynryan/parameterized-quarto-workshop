---
title: "Conditional content & code<br>![](../images/cascadia-jr-quarto.webp){width=4em}"
format: revealjs
---

# Conditional content {.section}

## Control content visibility

Create a div, span, or non-executable code block with one option from each of the below columns:

`{.class attribute="format"}`

:::: {.columns}

::: {.column width="30%"}
**Class**

- `.content-visible`
- `.content-hidden`
:::

::: {.column width="30%"}
**Attribute**

- `when-format="___"`
- `unless-format="___"`
:::

::: {.column width="30%"}
**Format**

- `latex` or `pdf`
- `epub`
- `html` or `revealjs`
- `markdown`
:::

::::

:::: {.fragment style="margin-top:-3.5em"}

**Examples:**

::: panel-tabset

## Divs

```markdown
::: {.content-visible when-format="html"}

Will only appear in HTML.

:::
```

## Spans

``` markdown
Some text
[in HTML.]{.content-visible when-format="html"}
[in PDF.]{.content-visible when-format="pdf"}
```

## Non-executable code

Fenced code blocks purely for documentation.

````markdown
```{.python .content-visible when-format="html"}
# code shown only in HTML
2 + 2
```
````
:::
::::

. . .

[Conditional Quarto docs](https://quarto.org/docs/authoring/conditional.html) & [Format aliases](https://quarto.org/docs/authoring/conditional.html#format-matching)

## Useful for static/interactive features

Pairs well with the `{{< include >}}` shortcode to re-use content without copying/pasting.

. . .

::::: panel-tabset

## Static

```markdown
:::: {.content-visible unless-format="html"}

## Cats

{{{< include _cats.qmd >}}}

## Dogs

{{{< include _dogs.qmd >}}}

::::
```

## Interactive

```markdown
:::: {.content-visible when-format="html"}
::: panel-tabset

## Cats

{{{< include _cats.qmd >}}}

## Dogs

{{{< include _dogs.qmd >}}}

:::
::::
```
:::::

. . .

::: callout-tip
## Good practice
Use an underscore prefix for included files so they are automatically ignored by a Quarto render of a project ([Include shortcode Quarto docs](https://quarto.org/docs/authoring/includes.html)).
:::

# üí™üèº Exercise {.exercise}

**Use conditional content divs to control when tabsets are shown.**

1. Modify `3-conditional-content.qmd` so that the `panel-tabset` is visible for HTML reports and hidden for all other formats.

\

2. Try another way to get the same result.

    `{.content-visible when-format="html"}` is essentially the same as `{.content-hidden unless-format="html"}`.

\

3. üí¨ **Chat**: Besides tabsets, what other kinds of content might you want to make visible for only a certain format?

```{r}
#| echo: false
countdown::countdown(minutes = 5, top = 0)
```

# Conditional code execution {.section}

## Conditionally execute a code chunk

::: incremental

-   More efficient to not execute code that generates interactive outputs for static reports.

-   Useful for executing interactive plot code (e.g., `plotly` or `ggiraph`) for HTML reports and static `ggplot2` code for all other formats. 

-   Useful for executing different code based on a parameter value.

-   Not currently a feature of Quarto v1.4. Follow along with this [GitHub discussion](https://github.com/quarto-dev/quarto-cli/discussions/3260#discussioncomment-4573926).

-   Chunk options can use R code for option values with `!expr`. Learn about the limitations to this YAML "tag" literal syntax in the [Quarto Chunk Options reference](https://quarto.org/docs/computations/r.html#chunk-options).

:::

## Conditional code based on output

Get the format of the Pandoc output by including the following in the setup chunk of your `.qmd` file:

```{r}
#| label: setup
#| echo: fenced

# Get output format
format <- knitr::opts_knit$get("rmarkdown.pandoc.to")
```

## Use `eval: !expr` chunk option

::: panel-tabset

## Static plot

```markdown
#| echo: fenced
#| eval: !expr format %in% c("latex", "docx")

# code to create static {ggplot2}
```

:::: callout-important
## Use `latex` not `pdf`

`format` comes from `knitr::opts_knit$get("rmarkdown.pandoc.to")`. Pandoc uses LaTeX to create PDFs.

Quarto [format aliases](https://quarto.org/docs/authoring/conditional.html#format-matching) won't work here.
::::

## Interactive plot

```markdown
#| echo: fenced
#| eval: !expr format == "html"

# code to create interactive {plotly}
```

:::

# üí™üèº Exercise {.exercise}

**Conditionally execute `ggplot2` code for static reports & `plotly` code for interactive reports.**

1. Open `5-conditional-code.qmd`.

2. In the `ggplot2` code chunks and `plotly` code chunks, fill in the blanks for the `eval: ` option.

```{r}
# Replace ___ with html, latex, or docx.

#| eval: !expr format == "___"

#| eval: !expr format %in% c("___", "___")
```

3. üí¨ **Chat**: How would you change the `eval: ` option to execute a chunk based on a parameter value rather than the output format?

```{r}
#| echo: false
countdown::countdown(minutes = 5, top = 0)
```

## Conditional code based on parameter

Use `params` in `!expr`:

``` r
#| eval: !expr params$fave_breed == "Snowshoe"

# Code for a special plot for my favorite cat breed.
```

\

. . .

``` r
#| eval: !expr !params$fave_breed == "Snowshoe"

# Code for a different plot for all other breeds.
# Note the ! in front of params.
```
